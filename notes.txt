Parser notes

TODO
- FIRST() caching?

- state caching
  - instead of (symbol,state) -> state mapping, need to build the
    kernel items and do a kernel -> state mapping

- closure optimizations
  - lots of duplicates while processing items with different terminals
  - merge items and include a set of terminals?
  - requires rewrite of a few things but avoids many loops and
    count/inserts in closure
  - currently, most loops in closure are simply creating and dropping
    duplicate items

- productions map that is "versioned"
  - this is required for supporting scoped changes to the grammar
  - turn into a hash structure for faster lookup
  - allow for marking and later reverting to that mark
  - on the first change in any scope, mark, make changes
  - if changes were made in the scope, revert on exit

- write simple test for extending syntax on the fly
  - introduce custom code to trigger
- C API
  - struct tree_node, char * head, etc
- tokenizer
  - separate file (compile time is growing)
  - simple regex engine (should be easy compared to parser)
  - tokenizer spec built into grammar files

- shift and reduce in one step when possible (?)
  - foo -> . bar (with various lookaheads)
  - token is 'bar'
  - look ahead to next token
  - if token matches lookahead, do shift/reduce in one step
  - this requires a solid mechanism of looking ahead to the next token
