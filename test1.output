closure for initial state
FIRST([$,$]): [$,$] 
closure creating: tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
FIRST([%%,%%] [grammar,grammar] [$,$]): [%%,%%] 
closure creating: tokenizer -> . token_line_list {%%}
FIRST([%%,%%]): [%%,%%] 
closure creating: token_line_list -> . token_line {%%}
closure creating: token_line_list -> . token_line token_line_list {%%}
FIRST([%%,%%]): [%%,%%] 
closure creating: token_line -> . [%token,%token] token_list {%%}
closure creating: token_line -> . [%start,%start] [id,id] {%%}
FIRST([token_line_list,token_line_list] [%%,%%]): [%start,%start] [%token,%token] 
closure creating: token_line -> . [%token,%token] token_list {%start}
closure creating: token_line -> . [%token,%token] token_list {%token}
closure creating: token_line -> . [%start,%start] [id,id] {%start}
closure creating: token_line -> . [%start,%start] [id,id] {%token}
LOOP: 0, token: %token, token_value: %token
[verbose dump (every loop)]
parser state:
current token: %token, value: %token
 symbol stack:
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
check: shift token_line -> . [%token,%token] token_list {%%}
check: shift token_line -> . [%token,%token] token_list {%start}
check: shift token_line -> . [%token,%token] token_list {%token}
shifts: 3, reduces: 0, accepts: 0
shifting [%token,%token]
building new item: token_line -> [%token,%token] . token_list {%%}
building new item: token_line -> [%token,%token] . token_list {%start}
building new item: token_line -> [%token,%token] . token_list {%token}
closure post shift
FIRST([%%,%%]): [%%,%%] 
closure creating: token_list -> . [id,id] {%%}
closure creating: token_list -> . [id,id] token_list {%%}
FIRST([%start,%start]): [%start,%start] 
closure creating: token_list -> . [id,id] {%start}
closure creating: token_list -> . [id,id] token_list {%start}
FIRST([%token,%token]): [%token,%token] 
closure creating: token_list -> . [id,id] {%token}
closure creating: token_list -> . [id,id] token_list {%token}
LOOP: 1, token: id, token_value: id
[verbose dump (every loop)]
parser state:
current token: id, value: id
 symbol stack:
  [%token,%token]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    token_line -> [%token,%token] . token_list {%%}
    token_line -> [%token,%token] . token_list {%start}
    token_line -> [%token,%token] . token_list {%token}
   nonkernel items:
    token_list -> . [id,id] {%%}
    token_list -> . [id,id] token_list {%%}
    token_list -> . [id,id] {%start}
    token_list -> . [id,id] token_list {%start}
    token_list -> . [id,id] {%token}
    token_list -> . [id,id] token_list {%token}
check: shift token_list -> . [id,id] {%%}
check: shift token_list -> . [id,id] token_list {%%}
check: shift token_list -> . [id,id] {%start}
check: shift token_list -> . [id,id] token_list {%start}
check: shift token_list -> . [id,id] {%token}
check: shift token_list -> . [id,id] token_list {%token}
shifts: 6, reduces: 0, accepts: 0
shifting [id,id]
building new item: token_list -> [id,id] . {%%}
building new item: token_list -> [id,id] . token_list {%%}
building new item: token_list -> [id,id] . {%start}
building new item: token_list -> [id,id] . token_list {%start}
building new item: token_list -> [id,id] . {%token}
building new item: token_list -> [id,id] . token_list {%token}
closure post shift
FIRST([%%,%%]): [%%,%%] 
closure creating: token_list -> . [id,id] {%%}
closure creating: token_list -> . [id,id] token_list {%%}
FIRST([%start,%start]): [%start,%start] 
closure creating: token_list -> . [id,id] {%start}
closure creating: token_list -> . [id,id] token_list {%start}
FIRST([%token,%token]): [%token,%token] 
closure creating: token_list -> . [id,id] {%token}
closure creating: token_list -> . [id,id] token_list {%token}
LOOP: 2, token: id, token_value: num
[verbose dump (every loop)]
parser state:
current token: id, value: num
 symbol stack:
  [%token,%token]
  [id,id]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    token_line -> [%token,%token] . token_list {%%}
    token_line -> [%token,%token] . token_list {%start}
    token_line -> [%token,%token] . token_list {%token}
   nonkernel items:
    token_list -> . [id,id] {%%}
    token_list -> . [id,id] token_list {%%}
    token_list -> . [id,id] {%start}
    token_list -> . [id,id] token_list {%start}
    token_list -> . [id,id] {%token}
    token_list -> . [id,id] token_list {%token}
  state 2
   kernel items:
    token_list -> [id,id] . {%%}
    token_list -> [id,id] . token_list {%%}
    token_list -> [id,id] . {%start}
    token_list -> [id,id] . token_list {%start}
    token_list -> [id,id] . {%token}
    token_list -> [id,id] . token_list {%token}
   nonkernel items:
    token_list -> . [id,id] {%%}
    token_list -> . [id,id] token_list {%%}
    token_list -> . [id,id] {%start}
    token_list -> . [id,id] token_list {%start}
    token_list -> . [id,id] {%token}
    token_list -> . [id,id] token_list {%token}
check: shift token_list -> . [id,id] {%%}
check: shift token_list -> . [id,id] token_list {%%}
check: shift token_list -> . [id,id] {%start}
check: shift token_list -> . [id,id] token_list {%start}
check: shift token_list -> . [id,id] {%token}
check: shift token_list -> . [id,id] token_list {%token}
shifts: 6, reduces: 0, accepts: 0
shifting [id,num]
building new item: token_list -> [id,id] . {%%}
building new item: token_list -> [id,id] . token_list {%%}
building new item: token_list -> [id,id] . {%start}
building new item: token_list -> [id,id] . token_list {%start}
building new item: token_list -> [id,id] . {%token}
building new item: token_list -> [id,id] . token_list {%token}
closure post shift
FIRST([%%,%%]): [%%,%%] 
closure creating: token_list -> . [id,id] {%%}
closure creating: token_list -> . [id,id] token_list {%%}
FIRST([%start,%start]): [%start,%start] 
closure creating: token_list -> . [id,id] {%start}
closure creating: token_list -> . [id,id] token_list {%start}
FIRST([%token,%token]): [%token,%token] 
closure creating: token_list -> . [id,id] {%token}
closure creating: token_list -> . [id,id] token_list {%token}
LOOP: 3, token: %start, token_value: %start
[verbose dump (every loop)]
parser state:
current token: %start, value: %start
 symbol stack:
  [%token,%token]
  [id,id]
  [id,num]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    token_line -> [%token,%token] . token_list {%%}
    token_line -> [%token,%token] . token_list {%start}
    token_line -> [%token,%token] . token_list {%token}
   nonkernel items:
    token_list -> . [id,id] {%%}
    token_list -> . [id,id] token_list {%%}
    token_list -> . [id,id] {%start}
    token_list -> . [id,id] token_list {%start}
    token_list -> . [id,id] {%token}
    token_list -> . [id,id] token_list {%token}
  state 2
   kernel items:
    token_list -> [id,id] . {%%}
    token_list -> [id,id] . token_list {%%}
    token_list -> [id,id] . {%start}
    token_list -> [id,id] . token_list {%start}
    token_list -> [id,id] . {%token}
    token_list -> [id,id] . token_list {%token}
   nonkernel items:
    token_list -> . [id,id] {%%}
    token_list -> . [id,id] token_list {%%}
    token_list -> . [id,id] {%start}
    token_list -> . [id,id] token_list {%start}
    token_list -> . [id,id] {%token}
    token_list -> . [id,id] token_list {%token}
  state 3
   kernel items:
    token_list -> [id,id] . {%%}
    token_list -> [id,id] . token_list {%%}
    token_list -> [id,id] . {%start}
    token_list -> [id,id] . token_list {%start}
    token_list -> [id,id] . {%token}
    token_list -> [id,id] . token_list {%token}
   nonkernel items:
    token_list -> . [id,id] {%%}
    token_list -> . [id,id] token_list {%%}
    token_list -> . [id,id] {%start}
    token_list -> . [id,id] token_list {%start}
    token_list -> . [id,id] {%token}
    token_list -> . [id,id] token_list {%token}
check: reduce token_list -> [id,id] . {%start}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: token_list -> [id,id] . {%%}
trying to reduce by: token_list -> [id,id] . token_list {%%}
trying to reduce by: token_list -> [id,id] . {%start}
reduce: token_list -> 
reduce item: token_list -> [id,id] . {%start}
building new item: token_list -> [id,id] token_list . {%%}
building new item: token_list -> [id,id] token_list . {%start}
building new item: token_list -> [id,id] token_list . {%token}
closure post reduce
LOOP: 4, token: %start, token_value: %start
[verbose dump (every loop)]
parser state:
current token: %start, value: %start
 symbol stack:
  [%token,%token]
  [id,id]
  [token_list,token_list]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    token_line -> [%token,%token] . token_list {%%}
    token_line -> [%token,%token] . token_list {%start}
    token_line -> [%token,%token] . token_list {%token}
   nonkernel items:
    token_list -> . [id,id] {%%}
    token_list -> . [id,id] token_list {%%}
    token_list -> . [id,id] {%start}
    token_list -> . [id,id] token_list {%start}
    token_list -> . [id,id] {%token}
    token_list -> . [id,id] token_list {%token}
  state 2
   kernel items:
    token_list -> [id,id] . {%%}
    token_list -> [id,id] . token_list {%%}
    token_list -> [id,id] . {%start}
    token_list -> [id,id] . token_list {%start}
    token_list -> [id,id] . {%token}
    token_list -> [id,id] . token_list {%token}
   nonkernel items:
    token_list -> . [id,id] {%%}
    token_list -> . [id,id] token_list {%%}
    token_list -> . [id,id] {%start}
    token_list -> . [id,id] token_list {%start}
    token_list -> . [id,id] {%token}
    token_list -> . [id,id] token_list {%token}
  state 3
   kernel items:
    token_list -> [id,id] token_list . {%%}
    token_list -> [id,id] token_list . {%start}
    token_list -> [id,id] token_list . {%token}
   nonkernel items:
check: reduce token_list -> [id,id] token_list . {%start}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: token_list -> [id,id] token_list . {%%}
trying to reduce by: token_list -> [id,id] token_list . {%start}
reduce: token_list -> 
reduce item: token_list -> [id,id] token_list . {%start}
building new item: token_line -> [%token,%token] token_list . {%%}
building new item: token_line -> [%token,%token] token_list . {%start}
building new item: token_line -> [%token,%token] token_list . {%token}
closure post reduce
LOOP: 5, token: %start, token_value: %start
[verbose dump (every loop)]
parser state:
current token: %start, value: %start
 symbol stack:
  [%token,%token]
  [token_list,token_list]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    token_line -> [%token,%token] . token_list {%%}
    token_line -> [%token,%token] . token_list {%start}
    token_line -> [%token,%token] . token_list {%token}
   nonkernel items:
    token_list -> . [id,id] {%%}
    token_list -> . [id,id] token_list {%%}
    token_list -> . [id,id] {%start}
    token_list -> . [id,id] token_list {%start}
    token_list -> . [id,id] {%token}
    token_list -> . [id,id] token_list {%token}
  state 2
   kernel items:
    token_line -> [%token,%token] token_list . {%%}
    token_line -> [%token,%token] token_list . {%start}
    token_line -> [%token,%token] token_list . {%token}
   nonkernel items:
check: reduce token_line -> [%token,%token] token_list . {%start}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: token_line -> [%token,%token] token_list . {%%}
trying to reduce by: token_line -> [%token,%token] token_list . {%start}
reduce: token_line -> 
reduce item: token_line -> [%token,%token] token_list . {%start}
building new item: token_line_list -> token_line . {%%}
building new item: token_line_list -> token_line . token_line_list {%%}
closure post reduce
FIRST([%%,%%]): [%%,%%] 
closure creating: token_line_list -> . token_line {%%}
closure creating: token_line_list -> . token_line token_line_list {%%}
FIRST([%%,%%]): [%%,%%] 
closure creating: token_line -> . [%token,%token] token_list {%%}
closure creating: token_line -> . [%start,%start] [id,id] {%%}
FIRST([token_line_list,token_line_list] [%%,%%]): [%start,%start] [%token,%token] 
closure creating: token_line -> . [%token,%token] token_list {%start}
closure creating: token_line -> . [%token,%token] token_list {%token}
closure creating: token_line -> . [%start,%start] [id,id] {%start}
closure creating: token_line -> . [%start,%start] [id,id] {%token}
LOOP: 6, token: %start, token_value: %start
[verbose dump (every loop)]
parser state:
current token: %start, value: %start
 symbol stack:
  [token_line,token_line]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    token_line_list -> token_line . {%%}
    token_line_list -> token_line . token_line_list {%%}
   nonkernel items:
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
check: shift token_line -> . [%start,%start] [id,id] {%%}
check: shift token_line -> . [%start,%start] [id,id] {%start}
check: shift token_line -> . [%start,%start] [id,id] {%token}
shifts: 3, reduces: 0, accepts: 0
shifting [%start,%start]
building new item: token_line -> [%start,%start] . [id,id] {%%}
building new item: token_line -> [%start,%start] . [id,id] {%start}
building new item: token_line -> [%start,%start] . [id,id] {%token}
closure post shift
LOOP: 7, token: id, token_value: STMT
[verbose dump (every loop)]
parser state:
current token: id, value: STMT
 symbol stack:
  [token_line,token_line]
  [%start,%start]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    token_line_list -> token_line . {%%}
    token_line_list -> token_line . token_line_list {%%}
   nonkernel items:
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 2
   kernel items:
    token_line -> [%start,%start] . [id,id] {%%}
    token_line -> [%start,%start] . [id,id] {%start}
    token_line -> [%start,%start] . [id,id] {%token}
   nonkernel items:
check: shift token_line -> [%start,%start] . [id,id] {%%}
check: shift token_line -> [%start,%start] . [id,id] {%start}
check: shift token_line -> [%start,%start] . [id,id] {%token}
shifts: 3, reduces: 0, accepts: 0
shifting [id,STMT]
building new item: token_line -> [%start,%start] [id,id] . {%%}
building new item: token_line -> [%start,%start] [id,id] . {%start}
building new item: token_line -> [%start,%start] [id,id] . {%token}
closure post shift
LOOP: 8, token: %%, token_value: %%
[verbose dump (every loop)]
parser state:
current token: %%, value: %%
 symbol stack:
  [token_line,token_line]
  [%start,%start]
  [id,STMT]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    token_line_list -> token_line . {%%}
    token_line_list -> token_line . token_line_list {%%}
   nonkernel items:
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 2
   kernel items:
    token_line -> [%start,%start] . [id,id] {%%}
    token_line -> [%start,%start] . [id,id] {%start}
    token_line -> [%start,%start] . [id,id] {%token}
   nonkernel items:
  state 3
   kernel items:
    token_line -> [%start,%start] [id,id] . {%%}
    token_line -> [%start,%start] [id,id] . {%start}
    token_line -> [%start,%start] [id,id] . {%token}
   nonkernel items:
check: reduce token_line -> [%start,%start] [id,id] . {%%}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: token_line -> [%start,%start] [id,id] . {%%}
reduce: token_line -> 
reduce item: token_line -> [%start,%start] [id,id] . {%%}
building new item: token_line_list -> token_line . {%%}
building new item: token_line_list -> token_line . token_line_list {%%}
closure post reduce
FIRST([%%,%%]): [%%,%%] 
closure creating: token_line_list -> . token_line {%%}
closure creating: token_line_list -> . token_line token_line_list {%%}
FIRST([%%,%%]): [%%,%%] 
closure creating: token_line -> . [%token,%token] token_list {%%}
closure creating: token_line -> . [%start,%start] [id,id] {%%}
FIRST([token_line_list,token_line_list] [%%,%%]): [%start,%start] [%token,%token] 
closure creating: token_line -> . [%token,%token] token_list {%start}
closure creating: token_line -> . [%token,%token] token_list {%token}
closure creating: token_line -> . [%start,%start] [id,id] {%start}
closure creating: token_line -> . [%start,%start] [id,id] {%token}
LOOP: 9, token: %%, token_value: %%
[verbose dump (every loop)]
parser state:
current token: %%, value: %%
 symbol stack:
  [token_line,token_line]
  [token_line,token_line]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    token_line_list -> token_line . {%%}
    token_line_list -> token_line . token_line_list {%%}
   nonkernel items:
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 2
   kernel items:
    token_line_list -> token_line . {%%}
    token_line_list -> token_line . token_line_list {%%}
   nonkernel items:
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
check: reduce token_line_list -> token_line . {%%}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: token_line_list -> token_line . {%%}
reduce: token_line_list -> 
reduce item: token_line_list -> token_line . {%%}
building new item: token_line_list -> token_line token_line_list . {%%}
closure post reduce
LOOP: 10, token: %%, token_value: %%
[verbose dump (every loop)]
parser state:
current token: %%, value: %%
 symbol stack:
  [token_line,token_line]
  [token_line_list,token_line_list]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    token_line_list -> token_line . {%%}
    token_line_list -> token_line . token_line_list {%%}
   nonkernel items:
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 2
   kernel items:
    token_line_list -> token_line token_line_list . {%%}
   nonkernel items:
check: reduce token_line_list -> token_line token_line_list . {%%}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: token_line_list -> token_line token_line_list . {%%}
reduce: token_line_list -> 
reduce item: token_line_list -> token_line token_line_list . {%%}
building new item: tokenizer -> token_line_list . {%%}
closure post reduce
LOOP: 11, token: %%, token_value: %%
[verbose dump (every loop)]
parser state:
current token: %%, value: %%
 symbol stack:
  [token_line_list,token_line_list]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer -> token_line_list . {%%}
   nonkernel items:
check: reduce tokenizer -> token_line_list . {%%}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: tokenizer -> token_line_list . {%%}
reduce: tokenizer -> 
reduce item: tokenizer -> token_line_list . {%%}
building new item: tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
closure post reduce
LOOP: 12, token: %%, token_value: %%
[verbose dump (every loop)]
parser state:
current token: %%, value: %%
 symbol stack:
  [tokenizer,tokenizer]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
check: shift tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
shifts: 1, reduces: 0, accepts: 0
shifting [%%,%%]
building new item: tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
closure post shift
FIRST([$,$]): [$,$] 
closure creating: grammar -> . production_list {$}
FIRST([$,$]): [$,$] 
closure creating: production_list -> . production {$}
closure creating: production_list -> . production production_list {$}
FIRST([$,$]): [$,$] 
closure creating: production -> . [id,id] [:,:] body_list [;,;] {$}
FIRST([production_list,production_list] [$,$]): [id,id] 
closure creating: production -> . [id,id] [:,:] body_list [;,;] {id}
LOOP: 13, token: id, token_value: STMT
[verbose dump (every loop)]
parser state:
current token: id, value: STMT
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
check: shift production -> . [id,id] [:,:] body_list [;,;] {$}
check: shift production -> . [id,id] [:,:] body_list [;,;] {id}
shifts: 2, reduces: 0, accepts: 0
shifting [id,STMT]
building new item: production -> [id,id] . [:,:] body_list [;,;] {$}
building new item: production -> [id,id] . [:,:] body_list [;,;] {id}
closure post shift
LOOP: 14, token: :, token_value: :
[verbose dump (every loop)]
parser state:
current token: :, value: :
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [id,STMT]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
check: shift production -> [id,id] . [:,:] body_list [;,;] {$}
check: shift production -> [id,id] . [:,:] body_list [;,;] {id}
shifts: 2, reduces: 0, accepts: 0
shifting [:,:]
building new item: production -> [id,id] [:,:] . body_list [;,;] {$}
building new item: production -> [id,id] [:,:] . body_list [;,;] {id}
closure post shift
FIRST([;,;] [$,$]): [;,;] 
closure creating: body_list -> . body {;}
closure creating: body_list -> . body [|,|] body_list {;}
FIRST([;,;] [id,id]): [;,;] 
FIRST([;,;]): [;,;] 
closure creating: body -> . symbol_list {;}
FIRST([|,|] [body_list,body_list] [;,;]): [|,|] 
closure creating: body -> . symbol_list {|}
FIRST([;,;]): [;,;] 
closure creating: symbol_list -> . symbol {;}
closure creating: symbol_list -> . symbol symbol_list {;}
FIRST([|,|]): [|,|] 
closure creating: symbol_list -> . symbol {|}
closure creating: symbol_list -> . symbol symbol_list {|}
FIRST([;,;]): [;,;] 
closure creating: symbol -> . [id,id] {;}
closure creating: symbol -> . [literal,literal] {;}
FIRST([symbol_list,symbol_list] [;,;]): [id,id] [literal,literal] 
closure creating: symbol -> . [id,id] {id}
closure creating: symbol -> . [id,id] {literal}
closure creating: symbol -> . [literal,literal] {id}
closure creating: symbol -> . [literal,literal] {literal}
FIRST([|,|]): [|,|] 
closure creating: symbol -> . [id,id] {|}
closure creating: symbol -> . [literal,literal] {|}
FIRST([symbol_list,symbol_list] [|,|]): [id,id] [literal,literal] 
LOOP: 15, token: literal, token_value: if
[verbose dump (every loop)]
parser state:
current token: literal, value: if
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [id,STMT]
  [:,:]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 4
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
check: shift symbol -> . [literal,literal] {;}
check: shift symbol -> . [literal,literal] {id}
check: shift symbol -> . [literal,literal] {literal}
check: shift symbol -> . [literal,literal] {|}
shifts: 4, reduces: 0, accepts: 0
shifting [literal,if]
building new item: symbol -> [literal,literal] . {;}
building new item: symbol -> [literal,literal] . {id}
building new item: symbol -> [literal,literal] . {literal}
building new item: symbol -> [literal,literal] . {|}
closure post shift
LOOP: 16, token: id, token_value: E
[verbose dump (every loop)]
parser state:
current token: id, value: E
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [id,STMT]
  [:,:]
  [literal,if]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 4
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 5
   kernel items:
    symbol -> [literal,literal] . {;}
    symbol -> [literal,literal] . {id}
    symbol -> [literal,literal] . {literal}
    symbol -> [literal,literal] . {|}
   nonkernel items:
check: reduce symbol -> [literal,literal] . {id}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: symbol -> [literal,literal] . {;}
trying to reduce by: symbol -> [literal,literal] . {id}
reduce: symbol -> 
reduce item: symbol -> [literal,literal] . {id}
building new item: symbol_list -> symbol . {;}
building new item: symbol_list -> symbol . symbol_list {;}
building new item: symbol_list -> symbol . {|}
building new item: symbol_list -> symbol . symbol_list {|}
closure post reduce
FIRST([;,;]): [;,;] 
closure creating: symbol_list -> . symbol {;}
closure creating: symbol_list -> . symbol symbol_list {;}
FIRST([|,|]): [|,|] 
closure creating: symbol_list -> . symbol {|}
closure creating: symbol_list -> . symbol symbol_list {|}
FIRST([;,;]): [;,;] 
closure creating: symbol -> . [id,id] {;}
closure creating: symbol -> . [literal,literal] {;}
FIRST([symbol_list,symbol_list] [;,;]): [id,id] [literal,literal] 
closure creating: symbol -> . [id,id] {id}
closure creating: symbol -> . [id,id] {literal}
closure creating: symbol -> . [literal,literal] {id}
closure creating: symbol -> . [literal,literal] {literal}
FIRST([|,|]): [|,|] 
closure creating: symbol -> . [id,id] {|}
closure creating: symbol -> . [literal,literal] {|}
FIRST([symbol_list,symbol_list] [|,|]): [id,id] [literal,literal] 
LOOP: 17, token: id, token_value: E
[verbose dump (every loop)]
parser state:
current token: id, value: E
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [id,STMT]
  [:,:]
  [symbol,symbol]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 4
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 5
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
check: shift symbol -> . [id,id] {;}
check: shift symbol -> . [id,id] {id}
check: shift symbol -> . [id,id] {literal}
check: shift symbol -> . [id,id] {|}
shifts: 4, reduces: 0, accepts: 0
shifting [id,E]
building new item: symbol -> [id,id] . {;}
building new item: symbol -> [id,id] . {id}
building new item: symbol -> [id,id] . {literal}
building new item: symbol -> [id,id] . {|}
closure post shift
LOOP: 18, token: literal, token_value: then
[verbose dump (every loop)]
parser state:
current token: literal, value: then
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [id,STMT]
  [:,:]
  [symbol,symbol]
  [id,E]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 4
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 5
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    symbol -> [id,id] . {;}
    symbol -> [id,id] . {id}
    symbol -> [id,id] . {literal}
    symbol -> [id,id] . {|}
   nonkernel items:
check: reduce symbol -> [id,id] . {literal}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: symbol -> [id,id] . {;}
trying to reduce by: symbol -> [id,id] . {id}
trying to reduce by: symbol -> [id,id] . {literal}
reduce: symbol -> 
reduce item: symbol -> [id,id] . {literal}
building new item: symbol_list -> symbol . {;}
building new item: symbol_list -> symbol . symbol_list {;}
building new item: symbol_list -> symbol . {|}
building new item: symbol_list -> symbol . symbol_list {|}
closure post reduce
FIRST([;,;]): [;,;] 
closure creating: symbol_list -> . symbol {;}
closure creating: symbol_list -> . symbol symbol_list {;}
FIRST([|,|]): [|,|] 
closure creating: symbol_list -> . symbol {|}
closure creating: symbol_list -> . symbol symbol_list {|}
FIRST([;,;]): [;,;] 
closure creating: symbol -> . [id,id] {;}
closure creating: symbol -> . [literal,literal] {;}
FIRST([symbol_list,symbol_list] [;,;]): [id,id] [literal,literal] 
closure creating: symbol -> . [id,id] {id}
closure creating: symbol -> . [id,id] {literal}
closure creating: symbol -> . [literal,literal] {id}
closure creating: symbol -> . [literal,literal] {literal}
FIRST([|,|]): [|,|] 
closure creating: symbol -> . [id,id] {|}
closure creating: symbol -> . [literal,literal] {|}
FIRST([symbol_list,symbol_list] [|,|]): [id,id] [literal,literal] 
LOOP: 19, token: literal, token_value: then
[verbose dump (every loop)]
parser state:
current token: literal, value: then
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [id,STMT]
  [:,:]
  [symbol,symbol]
  [symbol,symbol]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 4
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 5
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
check: shift symbol -> . [literal,literal] {;}
check: shift symbol -> . [literal,literal] {id}
check: shift symbol -> . [literal,literal] {literal}
check: shift symbol -> . [literal,literal] {|}
shifts: 4, reduces: 0, accepts: 0
shifting [literal,then]
building new item: symbol -> [literal,literal] . {;}
building new item: symbol -> [literal,literal] . {id}
building new item: symbol -> [literal,literal] . {literal}
building new item: symbol -> [literal,literal] . {|}
closure post shift
LOOP: 20, token: id, token_value: E
[verbose dump (every loop)]
parser state:
current token: id, value: E
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [id,STMT]
  [:,:]
  [symbol,symbol]
  [symbol,symbol]
  [literal,then]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 4
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 5
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 7
   kernel items:
    symbol -> [literal,literal] . {;}
    symbol -> [literal,literal] . {id}
    symbol -> [literal,literal] . {literal}
    symbol -> [literal,literal] . {|}
   nonkernel items:
check: reduce symbol -> [literal,literal] . {id}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: symbol -> [literal,literal] . {;}
trying to reduce by: symbol -> [literal,literal] . {id}
reduce: symbol -> 
reduce item: symbol -> [literal,literal] . {id}
building new item: symbol_list -> symbol . {;}
building new item: symbol_list -> symbol . symbol_list {;}
building new item: symbol_list -> symbol . {|}
building new item: symbol_list -> symbol . symbol_list {|}
closure post reduce
FIRST([;,;]): [;,;] 
closure creating: symbol_list -> . symbol {;}
closure creating: symbol_list -> . symbol symbol_list {;}
FIRST([|,|]): [|,|] 
closure creating: symbol_list -> . symbol {|}
closure creating: symbol_list -> . symbol symbol_list {|}
FIRST([;,;]): [;,;] 
closure creating: symbol -> . [id,id] {;}
closure creating: symbol -> . [literal,literal] {;}
FIRST([symbol_list,symbol_list] [;,;]): [id,id] [literal,literal] 
closure creating: symbol -> . [id,id] {id}
closure creating: symbol -> . [id,id] {literal}
closure creating: symbol -> . [literal,literal] {id}
closure creating: symbol -> . [literal,literal] {literal}
FIRST([|,|]): [|,|] 
closure creating: symbol -> . [id,id] {|}
closure creating: symbol -> . [literal,literal] {|}
FIRST([symbol_list,symbol_list] [|,|]): [id,id] [literal,literal] 
LOOP: 21, token: id, token_value: E
[verbose dump (every loop)]
parser state:
current token: id, value: E
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [id,STMT]
  [:,:]
  [symbol,symbol]
  [symbol,symbol]
  [symbol,symbol]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 4
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 5
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 7
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
check: shift symbol -> . [id,id] {;}
check: shift symbol -> . [id,id] {id}
check: shift symbol -> . [id,id] {literal}
check: shift symbol -> . [id,id] {|}
shifts: 4, reduces: 0, accepts: 0
shifting [id,E]
building new item: symbol -> [id,id] . {;}
building new item: symbol -> [id,id] . {id}
building new item: symbol -> [id,id] . {literal}
building new item: symbol -> [id,id] . {|}
closure post shift
LOOP: 22, token: literal, token_value: else
[verbose dump (every loop)]
parser state:
current token: literal, value: else
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [id,STMT]
  [:,:]
  [symbol,symbol]
  [symbol,symbol]
  [symbol,symbol]
  [id,E]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 4
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 5
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 7
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 8
   kernel items:
    symbol -> [id,id] . {;}
    symbol -> [id,id] . {id}
    symbol -> [id,id] . {literal}
    symbol -> [id,id] . {|}
   nonkernel items:
check: reduce symbol -> [id,id] . {literal}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: symbol -> [id,id] . {;}
trying to reduce by: symbol -> [id,id] . {id}
trying to reduce by: symbol -> [id,id] . {literal}
reduce: symbol -> 
reduce item: symbol -> [id,id] . {literal}
building new item: symbol_list -> symbol . {;}
building new item: symbol_list -> symbol . symbol_list {;}
building new item: symbol_list -> symbol . {|}
building new item: symbol_list -> symbol . symbol_list {|}
closure post reduce
FIRST([;,;]): [;,;] 
closure creating: symbol_list -> . symbol {;}
closure creating: symbol_list -> . symbol symbol_list {;}
FIRST([|,|]): [|,|] 
closure creating: symbol_list -> . symbol {|}
closure creating: symbol_list -> . symbol symbol_list {|}
FIRST([;,;]): [;,;] 
closure creating: symbol -> . [id,id] {;}
closure creating: symbol -> . [literal,literal] {;}
FIRST([symbol_list,symbol_list] [;,;]): [id,id] [literal,literal] 
closure creating: symbol -> . [id,id] {id}
closure creating: symbol -> . [id,id] {literal}
closure creating: symbol -> . [literal,literal] {id}
closure creating: symbol -> . [literal,literal] {literal}
FIRST([|,|]): [|,|] 
closure creating: symbol -> . [id,id] {|}
closure creating: symbol -> . [literal,literal] {|}
FIRST([symbol_list,symbol_list] [|,|]): [id,id] [literal,literal] 
LOOP: 23, token: literal, token_value: else
[verbose dump (every loop)]
parser state:
current token: literal, value: else
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [id,STMT]
  [:,:]
  [symbol,symbol]
  [symbol,symbol]
  [symbol,symbol]
  [symbol,symbol]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 4
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 5
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 7
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 8
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
check: shift symbol -> . [literal,literal] {;}
check: shift symbol -> . [literal,literal] {id}
check: shift symbol -> . [literal,literal] {literal}
check: shift symbol -> . [literal,literal] {|}
shifts: 4, reduces: 0, accepts: 0
shifting [literal,else]
building new item: symbol -> [literal,literal] . {;}
building new item: symbol -> [literal,literal] . {id}
building new item: symbol -> [literal,literal] . {literal}
building new item: symbol -> [literal,literal] . {|}
closure post shift
LOOP: 24, token: id, token_value: E
[verbose dump (every loop)]
parser state:
current token: id, value: E
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [id,STMT]
  [:,:]
  [symbol,symbol]
  [symbol,symbol]
  [symbol,symbol]
  [symbol,symbol]
  [literal,else]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 4
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 5
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 7
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 8
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 9
   kernel items:
    symbol -> [literal,literal] . {;}
    symbol -> [literal,literal] . {id}
    symbol -> [literal,literal] . {literal}
    symbol -> [literal,literal] . {|}
   nonkernel items:
check: reduce symbol -> [literal,literal] . {id}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: symbol -> [literal,literal] . {;}
trying to reduce by: symbol -> [literal,literal] . {id}
reduce: symbol -> 
reduce item: symbol -> [literal,literal] . {id}
building new item: symbol_list -> symbol . {;}
building new item: symbol_list -> symbol . symbol_list {;}
building new item: symbol_list -> symbol . {|}
building new item: symbol_list -> symbol . symbol_list {|}
closure post reduce
FIRST([;,;]): [;,;] 
closure creating: symbol_list -> . symbol {;}
closure creating: symbol_list -> . symbol symbol_list {;}
FIRST([|,|]): [|,|] 
closure creating: symbol_list -> . symbol {|}
closure creating: symbol_list -> . symbol symbol_list {|}
FIRST([;,;]): [;,;] 
closure creating: symbol -> . [id,id] {;}
closure creating: symbol -> . [literal,literal] {;}
FIRST([symbol_list,symbol_list] [;,;]): [id,id] [literal,literal] 
closure creating: symbol -> . [id,id] {id}
closure creating: symbol -> . [id,id] {literal}
closure creating: symbol -> . [literal,literal] {id}
closure creating: symbol -> . [literal,literal] {literal}
FIRST([|,|]): [|,|] 
closure creating: symbol -> . [id,id] {|}
closure creating: symbol -> . [literal,literal] {|}
FIRST([symbol_list,symbol_list] [|,|]): [id,id] [literal,literal] 
LOOP: 25, token: id, token_value: E
[verbose dump (every loop)]
parser state:
current token: id, value: E
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [id,STMT]
  [:,:]
  [symbol,symbol]
  [symbol,symbol]
  [symbol,symbol]
  [symbol,symbol]
  [symbol,symbol]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 4
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 5
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 7
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 8
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 9
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
check: shift symbol -> . [id,id] {;}
check: shift symbol -> . [id,id] {id}
check: shift symbol -> . [id,id] {literal}
check: shift symbol -> . [id,id] {|}
shifts: 4, reduces: 0, accepts: 0
shifting [id,E]
building new item: symbol -> [id,id] . {;}
building new item: symbol -> [id,id] . {id}
building new item: symbol -> [id,id] . {literal}
building new item: symbol -> [id,id] . {|}
closure post shift
LOOP: 26, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [id,STMT]
  [:,:]
  [symbol,symbol]
  [symbol,symbol]
  [symbol,symbol]
  [symbol,symbol]
  [symbol,symbol]
  [id,E]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 4
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 5
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 7
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 8
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 9
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 10
   kernel items:
    symbol -> [id,id] . {;}
    symbol -> [id,id] . {id}
    symbol -> [id,id] . {literal}
    symbol -> [id,id] . {|}
   nonkernel items:
check: reduce symbol -> [id,id] . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: symbol -> [id,id] . {;}
reduce: symbol -> 
reduce item: symbol -> [id,id] . {;}
building new item: symbol_list -> symbol . {;}
building new item: symbol_list -> symbol . symbol_list {;}
building new item: symbol_list -> symbol . {|}
building new item: symbol_list -> symbol . symbol_list {|}
closure post reduce
FIRST([;,;]): [;,;] 
closure creating: symbol_list -> . symbol {;}
closure creating: symbol_list -> . symbol symbol_list {;}
FIRST([|,|]): [|,|] 
closure creating: symbol_list -> . symbol {|}
closure creating: symbol_list -> . symbol symbol_list {|}
FIRST([;,;]): [;,;] 
closure creating: symbol -> . [id,id] {;}
closure creating: symbol -> . [literal,literal] {;}
FIRST([symbol_list,symbol_list] [;,;]): [id,id] [literal,literal] 
closure creating: symbol -> . [id,id] {id}
closure creating: symbol -> . [id,id] {literal}
closure creating: symbol -> . [literal,literal] {id}
closure creating: symbol -> . [literal,literal] {literal}
FIRST([|,|]): [|,|] 
closure creating: symbol -> . [id,id] {|}
closure creating: symbol -> . [literal,literal] {|}
FIRST([symbol_list,symbol_list] [|,|]): [id,id] [literal,literal] 
LOOP: 27, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [id,STMT]
  [:,:]
  [symbol,symbol]
  [symbol,symbol]
  [symbol,symbol]
  [symbol,symbol]
  [symbol,symbol]
  [symbol,symbol]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 4
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 5
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 7
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 8
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 9
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 10
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
check: reduce symbol_list -> symbol . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: symbol_list -> symbol . {;}
reduce: symbol_list -> 
reduce item: symbol_list -> symbol . {;}
building new item: symbol_list -> symbol symbol_list . {;}
building new item: symbol_list -> symbol symbol_list . {|}
closure post reduce
LOOP: 28, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [id,STMT]
  [:,:]
  [symbol,symbol]
  [symbol,symbol]
  [symbol,symbol]
  [symbol,symbol]
  [symbol,symbol]
  [symbol_list,symbol_list]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 4
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 5
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 7
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 8
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 9
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 10
   kernel items:
    symbol_list -> symbol symbol_list . {;}
    symbol_list -> symbol symbol_list . {|}
   nonkernel items:
check: reduce symbol_list -> symbol symbol_list . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: symbol_list -> symbol symbol_list . {;}
reduce: symbol_list -> 
reduce item: symbol_list -> symbol symbol_list . {;}
building new item: symbol_list -> symbol symbol_list . {;}
building new item: symbol_list -> symbol symbol_list . {|}
closure post reduce
LOOP: 29, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [id,STMT]
  [:,:]
  [symbol,symbol]
  [symbol,symbol]
  [symbol,symbol]
  [symbol,symbol]
  [symbol_list,symbol_list]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 4
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 5
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 7
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 8
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 9
   kernel items:
    symbol_list -> symbol symbol_list . {;}
    symbol_list -> symbol symbol_list . {|}
   nonkernel items:
check: reduce symbol_list -> symbol symbol_list . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: symbol_list -> symbol symbol_list . {;}
reduce: symbol_list -> 
reduce item: symbol_list -> symbol symbol_list . {;}
building new item: symbol_list -> symbol symbol_list . {;}
building new item: symbol_list -> symbol symbol_list . {|}
closure post reduce
LOOP: 30, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [id,STMT]
  [:,:]
  [symbol,symbol]
  [symbol,symbol]
  [symbol,symbol]
  [symbol_list,symbol_list]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 4
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 5
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 7
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 8
   kernel items:
    symbol_list -> symbol symbol_list . {;}
    symbol_list -> symbol symbol_list . {|}
   nonkernel items:
check: reduce symbol_list -> symbol symbol_list . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: symbol_list -> symbol symbol_list . {;}
reduce: symbol_list -> 
reduce item: symbol_list -> symbol symbol_list . {;}
building new item: symbol_list -> symbol symbol_list . {;}
building new item: symbol_list -> symbol symbol_list . {|}
closure post reduce
LOOP: 31, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [id,STMT]
  [:,:]
  [symbol,symbol]
  [symbol,symbol]
  [symbol_list,symbol_list]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 4
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 5
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 7
   kernel items:
    symbol_list -> symbol symbol_list . {;}
    symbol_list -> symbol symbol_list . {|}
   nonkernel items:
check: reduce symbol_list -> symbol symbol_list . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: symbol_list -> symbol symbol_list . {;}
reduce: symbol_list -> 
reduce item: symbol_list -> symbol symbol_list . {;}
building new item: symbol_list -> symbol symbol_list . {;}
building new item: symbol_list -> symbol symbol_list . {|}
closure post reduce
LOOP: 32, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [id,STMT]
  [:,:]
  [symbol,symbol]
  [symbol_list,symbol_list]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 4
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 5
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    symbol_list -> symbol symbol_list . {;}
    symbol_list -> symbol symbol_list . {|}
   nonkernel items:
check: reduce symbol_list -> symbol symbol_list . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: symbol_list -> symbol symbol_list . {;}
reduce: symbol_list -> 
reduce item: symbol_list -> symbol symbol_list . {;}
building new item: body -> symbol_list . {;}
building new item: body -> symbol_list . {|}
closure post reduce
LOOP: 33, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [id,STMT]
  [:,:]
  [symbol_list,symbol_list]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 4
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 5
   kernel items:
    body -> symbol_list . {;}
    body -> symbol_list . {|}
   nonkernel items:
check: reduce body -> symbol_list . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: body -> symbol_list . {;}
reduce: body -> 
reduce item: body -> symbol_list . {;}
building new item: body_list -> body . {;}
building new item: body_list -> body . [|,|] body_list {;}
closure post reduce
LOOP: 34, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [id,STMT]
  [:,:]
  [body,body]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 4
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 5
   kernel items:
    body_list -> body . {;}
    body_list -> body . [|,|] body_list {;}
   nonkernel items:
check: reduce body_list -> body . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: body_list -> body . {;}
reduce: body_list -> 
reduce item: body_list -> body . {;}
building new item: production -> [id,id] [:,:] body_list . [;,;] {$}
building new item: production -> [id,id] [:,:] body_list . [;,;] {id}
closure post reduce
LOOP: 35, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [id,STMT]
  [:,:]
  [body_list,body_list]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 4
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 5
   kernel items:
    production -> [id,id] [:,:] body_list . [;,;] {$}
    production -> [id,id] [:,:] body_list . [;,;] {id}
   nonkernel items:
check: shift production -> [id,id] [:,:] body_list . [;,;] {$}
check: shift production -> [id,id] [:,:] body_list . [;,;] {id}
shifts: 2, reduces: 0, accepts: 0
shifting [;,;]
building new item: production -> [id,id] [:,:] body_list [;,;] . {$}
building new item: production -> [id,id] [:,:] body_list [;,;] . {id}
closure post shift
LOOP: 36, token: id, token_value: E
[verbose dump (every loop)]
parser state:
current token: id, value: E
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [id,STMT]
  [:,:]
  [body_list,body_list]
  [;,;]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 4
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 5
   kernel items:
    production -> [id,id] [:,:] body_list . [;,;] {$}
    production -> [id,id] [:,:] body_list . [;,;] {id}
   nonkernel items:
  state 6
   kernel items:
    production -> [id,id] [:,:] body_list [;,;] . {$}
    production -> [id,id] [:,:] body_list [;,;] . {id}
   nonkernel items:
check: reduce production -> [id,id] [:,:] body_list [;,;] . {id}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: production -> [id,id] [:,:] body_list [;,;] . {$}
trying to reduce by: production -> [id,id] [:,:] body_list [;,;] . {id}
reduce: production -> 
reduce item: production -> [id,id] [:,:] body_list [;,;] . {id}
building new item: production_list -> production . {$}
building new item: production_list -> production . production_list {$}
closure post reduce
FIRST([$,$]): [$,$] 
closure creating: production_list -> . production {$}
closure creating: production_list -> . production production_list {$}
FIRST([$,$]): [$,$] 
closure creating: production -> . [id,id] [:,:] body_list [;,;] {$}
FIRST([production_list,production_list] [$,$]): [id,id] 
closure creating: production -> . [id,id] [:,:] body_list [;,;] {id}
LOOP: 37, token: id, token_value: E
[verbose dump (every loop)]
parser state:
current token: id, value: E
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [production,production]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production_list -> production . {$}
    production_list -> production . production_list {$}
   nonkernel items:
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
check: shift production -> . [id,id] [:,:] body_list [;,;] {$}
check: shift production -> . [id,id] [:,:] body_list [;,;] {id}
shifts: 2, reduces: 0, accepts: 0
shifting [id,E]
building new item: production -> [id,id] . [:,:] body_list [;,;] {$}
building new item: production -> [id,id] . [:,:] body_list [;,;] {id}
closure post shift
LOOP: 38, token: :, token_value: :
[verbose dump (every loop)]
parser state:
current token: :, value: :
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [production,production]
  [id,E]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production_list -> production . {$}
    production_list -> production . production_list {$}
   nonkernel items:
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 4
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
check: shift production -> [id,id] . [:,:] body_list [;,;] {$}
check: shift production -> [id,id] . [:,:] body_list [;,;] {id}
shifts: 2, reduces: 0, accepts: 0
shifting [:,:]
building new item: production -> [id,id] [:,:] . body_list [;,;] {$}
building new item: production -> [id,id] [:,:] . body_list [;,;] {id}
closure post shift
FIRST([;,;] [$,$]): [;,;] 
closure creating: body_list -> . body {;}
closure creating: body_list -> . body [|,|] body_list {;}
FIRST([;,;] [id,id]): [;,;] 
FIRST([;,;]): [;,;] 
closure creating: body -> . symbol_list {;}
FIRST([|,|] [body_list,body_list] [;,;]): [|,|] 
closure creating: body -> . symbol_list {|}
FIRST([;,;]): [;,;] 
closure creating: symbol_list -> . symbol {;}
closure creating: symbol_list -> . symbol symbol_list {;}
FIRST([|,|]): [|,|] 
closure creating: symbol_list -> . symbol {|}
closure creating: symbol_list -> . symbol symbol_list {|}
FIRST([;,;]): [;,;] 
closure creating: symbol -> . [id,id] {;}
closure creating: symbol -> . [literal,literal] {;}
FIRST([symbol_list,symbol_list] [;,;]): [id,id] [literal,literal] 
closure creating: symbol -> . [id,id] {id}
closure creating: symbol -> . [id,id] {literal}
closure creating: symbol -> . [literal,literal] {id}
closure creating: symbol -> . [literal,literal] {literal}
FIRST([|,|]): [|,|] 
closure creating: symbol -> . [id,id] {|}
closure creating: symbol -> . [literal,literal] {|}
FIRST([symbol_list,symbol_list] [|,|]): [id,id] [literal,literal] 
LOOP: 39, token: id, token_value: E
[verbose dump (every loop)]
parser state:
current token: id, value: E
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [production,production]
  [id,E]
  [:,:]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production_list -> production . {$}
    production_list -> production . production_list {$}
   nonkernel items:
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 4
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 5
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
check: shift symbol -> . [id,id] {;}
check: shift symbol -> . [id,id] {id}
check: shift symbol -> . [id,id] {literal}
check: shift symbol -> . [id,id] {|}
shifts: 4, reduces: 0, accepts: 0
shifting [id,E]
building new item: symbol -> [id,id] . {;}
building new item: symbol -> [id,id] . {id}
building new item: symbol -> [id,id] . {literal}
building new item: symbol -> [id,id] . {|}
closure post shift
LOOP: 40, token: literal, token_value: +
[verbose dump (every loop)]
parser state:
current token: literal, value: +
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [production,production]
  [id,E]
  [:,:]
  [id,E]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production_list -> production . {$}
    production_list -> production . production_list {$}
   nonkernel items:
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 4
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 5
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    symbol -> [id,id] . {;}
    symbol -> [id,id] . {id}
    symbol -> [id,id] . {literal}
    symbol -> [id,id] . {|}
   nonkernel items:
check: reduce symbol -> [id,id] . {literal}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: symbol -> [id,id] . {;}
trying to reduce by: symbol -> [id,id] . {id}
trying to reduce by: symbol -> [id,id] . {literal}
reduce: symbol -> 
reduce item: symbol -> [id,id] . {literal}
building new item: symbol_list -> symbol . {;}
building new item: symbol_list -> symbol . symbol_list {;}
building new item: symbol_list -> symbol . {|}
building new item: symbol_list -> symbol . symbol_list {|}
closure post reduce
FIRST([;,;]): [;,;] 
closure creating: symbol_list -> . symbol {;}
closure creating: symbol_list -> . symbol symbol_list {;}
FIRST([|,|]): [|,|] 
closure creating: symbol_list -> . symbol {|}
closure creating: symbol_list -> . symbol symbol_list {|}
FIRST([;,;]): [;,;] 
closure creating: symbol -> . [id,id] {;}
closure creating: symbol -> . [literal,literal] {;}
FIRST([symbol_list,symbol_list] [;,;]): [id,id] [literal,literal] 
closure creating: symbol -> . [id,id] {id}
closure creating: symbol -> . [id,id] {literal}
closure creating: symbol -> . [literal,literal] {id}
closure creating: symbol -> . [literal,literal] {literal}
FIRST([|,|]): [|,|] 
closure creating: symbol -> . [id,id] {|}
closure creating: symbol -> . [literal,literal] {|}
FIRST([symbol_list,symbol_list] [|,|]): [id,id] [literal,literal] 
LOOP: 41, token: literal, token_value: +
[verbose dump (every loop)]
parser state:
current token: literal, value: +
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [production,production]
  [id,E]
  [:,:]
  [symbol,symbol]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production_list -> production . {$}
    production_list -> production . production_list {$}
   nonkernel items:
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 4
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 5
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
check: shift symbol -> . [literal,literal] {;}
check: shift symbol -> . [literal,literal] {id}
check: shift symbol -> . [literal,literal] {literal}
check: shift symbol -> . [literal,literal] {|}
shifts: 4, reduces: 0, accepts: 0
shifting [literal,+]
building new item: symbol -> [literal,literal] . {;}
building new item: symbol -> [literal,literal] . {id}
building new item: symbol -> [literal,literal] . {literal}
building new item: symbol -> [literal,literal] . {|}
closure post shift
LOOP: 42, token: id, token_value: E
[verbose dump (every loop)]
parser state:
current token: id, value: E
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [production,production]
  [id,E]
  [:,:]
  [symbol,symbol]
  [literal,+]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production_list -> production . {$}
    production_list -> production . production_list {$}
   nonkernel items:
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 4
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 5
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 7
   kernel items:
    symbol -> [literal,literal] . {;}
    symbol -> [literal,literal] . {id}
    symbol -> [literal,literal] . {literal}
    symbol -> [literal,literal] . {|}
   nonkernel items:
check: reduce symbol -> [literal,literal] . {id}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: symbol -> [literal,literal] . {;}
trying to reduce by: symbol -> [literal,literal] . {id}
reduce: symbol -> 
reduce item: symbol -> [literal,literal] . {id}
building new item: symbol_list -> symbol . {;}
building new item: symbol_list -> symbol . symbol_list {;}
building new item: symbol_list -> symbol . {|}
building new item: symbol_list -> symbol . symbol_list {|}
closure post reduce
FIRST([;,;]): [;,;] 
closure creating: symbol_list -> . symbol {;}
closure creating: symbol_list -> . symbol symbol_list {;}
FIRST([|,|]): [|,|] 
closure creating: symbol_list -> . symbol {|}
closure creating: symbol_list -> . symbol symbol_list {|}
FIRST([;,;]): [;,;] 
closure creating: symbol -> . [id,id] {;}
closure creating: symbol -> . [literal,literal] {;}
FIRST([symbol_list,symbol_list] [;,;]): [id,id] [literal,literal] 
closure creating: symbol -> . [id,id] {id}
closure creating: symbol -> . [id,id] {literal}
closure creating: symbol -> . [literal,literal] {id}
closure creating: symbol -> . [literal,literal] {literal}
FIRST([|,|]): [|,|] 
closure creating: symbol -> . [id,id] {|}
closure creating: symbol -> . [literal,literal] {|}
FIRST([symbol_list,symbol_list] [|,|]): [id,id] [literal,literal] 
LOOP: 43, token: id, token_value: E
[verbose dump (every loop)]
parser state:
current token: id, value: E
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [production,production]
  [id,E]
  [:,:]
  [symbol,symbol]
  [symbol,symbol]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production_list -> production . {$}
    production_list -> production . production_list {$}
   nonkernel items:
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 4
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 5
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 7
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
check: shift symbol -> . [id,id] {;}
check: shift symbol -> . [id,id] {id}
check: shift symbol -> . [id,id] {literal}
check: shift symbol -> . [id,id] {|}
shifts: 4, reduces: 0, accepts: 0
shifting [id,E]
building new item: symbol -> [id,id] . {;}
building new item: symbol -> [id,id] . {id}
building new item: symbol -> [id,id] . {literal}
building new item: symbol -> [id,id] . {|}
closure post shift
LOOP: 44, token: |, token_value: |
[verbose dump (every loop)]
parser state:
current token: |, value: |
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [production,production]
  [id,E]
  [:,:]
  [symbol,symbol]
  [symbol,symbol]
  [id,E]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production_list -> production . {$}
    production_list -> production . production_list {$}
   nonkernel items:
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 4
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 5
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 7
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 8
   kernel items:
    symbol -> [id,id] . {;}
    symbol -> [id,id] . {id}
    symbol -> [id,id] . {literal}
    symbol -> [id,id] . {|}
   nonkernel items:
check: reduce symbol -> [id,id] . {|}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: symbol -> [id,id] . {;}
trying to reduce by: symbol -> [id,id] . {id}
trying to reduce by: symbol -> [id,id] . {literal}
trying to reduce by: symbol -> [id,id] . {|}
reduce: symbol -> 
reduce item: symbol -> [id,id] . {|}
building new item: symbol_list -> symbol . {;}
building new item: symbol_list -> symbol . symbol_list {;}
building new item: symbol_list -> symbol . {|}
building new item: symbol_list -> symbol . symbol_list {|}
closure post reduce
FIRST([;,;]): [;,;] 
closure creating: symbol_list -> . symbol {;}
closure creating: symbol_list -> . symbol symbol_list {;}
FIRST([|,|]): [|,|] 
closure creating: symbol_list -> . symbol {|}
closure creating: symbol_list -> . symbol symbol_list {|}
FIRST([;,;]): [;,;] 
closure creating: symbol -> . [id,id] {;}
closure creating: symbol -> . [literal,literal] {;}
FIRST([symbol_list,symbol_list] [;,;]): [id,id] [literal,literal] 
closure creating: symbol -> . [id,id] {id}
closure creating: symbol -> . [id,id] {literal}
closure creating: symbol -> . [literal,literal] {id}
closure creating: symbol -> . [literal,literal] {literal}
FIRST([|,|]): [|,|] 
closure creating: symbol -> . [id,id] {|}
closure creating: symbol -> . [literal,literal] {|}
FIRST([symbol_list,symbol_list] [|,|]): [id,id] [literal,literal] 
LOOP: 45, token: |, token_value: |
[verbose dump (every loop)]
parser state:
current token: |, value: |
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [production,production]
  [id,E]
  [:,:]
  [symbol,symbol]
  [symbol,symbol]
  [symbol,symbol]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production_list -> production . {$}
    production_list -> production . production_list {$}
   nonkernel items:
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 4
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 5
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 7
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 8
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
check: reduce symbol_list -> symbol . {|}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: symbol_list -> symbol . {;}
trying to reduce by: symbol_list -> symbol . symbol_list {;}
trying to reduce by: symbol_list -> symbol . {|}
reduce: symbol_list -> 
reduce item: symbol_list -> symbol . {|}
building new item: symbol_list -> symbol symbol_list . {;}
building new item: symbol_list -> symbol symbol_list . {|}
closure post reduce
LOOP: 46, token: |, token_value: |
[verbose dump (every loop)]
parser state:
current token: |, value: |
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [production,production]
  [id,E]
  [:,:]
  [symbol,symbol]
  [symbol,symbol]
  [symbol_list,symbol_list]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production_list -> production . {$}
    production_list -> production . production_list {$}
   nonkernel items:
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 4
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 5
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 7
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 8
   kernel items:
    symbol_list -> symbol symbol_list . {;}
    symbol_list -> symbol symbol_list . {|}
   nonkernel items:
check: reduce symbol_list -> symbol symbol_list . {|}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: symbol_list -> symbol symbol_list . {;}
trying to reduce by: symbol_list -> symbol symbol_list . {|}
reduce: symbol_list -> 
reduce item: symbol_list -> symbol symbol_list . {|}
building new item: symbol_list -> symbol symbol_list . {;}
building new item: symbol_list -> symbol symbol_list . {|}
closure post reduce
LOOP: 47, token: |, token_value: |
[verbose dump (every loop)]
parser state:
current token: |, value: |
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [production,production]
  [id,E]
  [:,:]
  [symbol,symbol]
  [symbol_list,symbol_list]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production_list -> production . {$}
    production_list -> production . production_list {$}
   nonkernel items:
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 4
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 5
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 7
   kernel items:
    symbol_list -> symbol symbol_list . {;}
    symbol_list -> symbol symbol_list . {|}
   nonkernel items:
check: reduce symbol_list -> symbol symbol_list . {|}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: symbol_list -> symbol symbol_list . {;}
trying to reduce by: symbol_list -> symbol symbol_list . {|}
reduce: symbol_list -> 
reduce item: symbol_list -> symbol symbol_list . {|}
building new item: body -> symbol_list . {;}
building new item: body -> symbol_list . {|}
closure post reduce
LOOP: 48, token: |, token_value: |
[verbose dump (every loop)]
parser state:
current token: |, value: |
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [production,production]
  [id,E]
  [:,:]
  [symbol_list,symbol_list]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production_list -> production . {$}
    production_list -> production . production_list {$}
   nonkernel items:
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 4
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 5
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    body -> symbol_list . {;}
    body -> symbol_list . {|}
   nonkernel items:
check: reduce body -> symbol_list . {|}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: body -> symbol_list . {;}
trying to reduce by: body -> symbol_list . {|}
reduce: body -> 
reduce item: body -> symbol_list . {|}
building new item: body_list -> body . {;}
building new item: body_list -> body . [|,|] body_list {;}
closure post reduce
LOOP: 49, token: |, token_value: |
[verbose dump (every loop)]
parser state:
current token: |, value: |
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [production,production]
  [id,E]
  [:,:]
  [body,body]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production_list -> production . {$}
    production_list -> production . production_list {$}
   nonkernel items:
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 4
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 5
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    body_list -> body . {;}
    body_list -> body . [|,|] body_list {;}
   nonkernel items:
check: shift body_list -> body . [|,|] body_list {;}
shifts: 1, reduces: 0, accepts: 0
shifting [|,|]
building new item: body_list -> body [|,|] . body_list {;}
closure post shift
FIRST([;,;]): [;,;] 
closure creating: body_list -> . body {;}
closure creating: body_list -> . body [|,|] body_list {;}
FIRST([;,;]): [;,;] 
closure creating: body -> . symbol_list {;}
FIRST([|,|] [body_list,body_list] [;,;]): [|,|] 
closure creating: body -> . symbol_list {|}
FIRST([;,;]): [;,;] 
closure creating: symbol_list -> . symbol {;}
closure creating: symbol_list -> . symbol symbol_list {;}
FIRST([|,|]): [|,|] 
closure creating: symbol_list -> . symbol {|}
closure creating: symbol_list -> . symbol symbol_list {|}
FIRST([;,;]): [;,;] 
closure creating: symbol -> . [id,id] {;}
closure creating: symbol -> . [literal,literal] {;}
FIRST([symbol_list,symbol_list] [;,;]): [id,id] [literal,literal] 
closure creating: symbol -> . [id,id] {id}
closure creating: symbol -> . [id,id] {literal}
closure creating: symbol -> . [literal,literal] {id}
closure creating: symbol -> . [literal,literal] {literal}
FIRST([|,|]): [|,|] 
closure creating: symbol -> . [id,id] {|}
closure creating: symbol -> . [literal,literal] {|}
FIRST([symbol_list,symbol_list] [|,|]): [id,id] [literal,literal] 
LOOP: 50, token: id, token_value: num
[verbose dump (every loop)]
parser state:
current token: id, value: num
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [production,production]
  [id,E]
  [:,:]
  [body,body]
  [|,|]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production_list -> production . {$}
    production_list -> production . production_list {$}
   nonkernel items:
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 4
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 5
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    body_list -> body . {;}
    body_list -> body . [|,|] body_list {;}
   nonkernel items:
  state 7
   kernel items:
    body_list -> body [|,|] . body_list {;}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
check: shift symbol -> . [id,id] {;}
check: shift symbol -> . [id,id] {id}
check: shift symbol -> . [id,id] {literal}
check: shift symbol -> . [id,id] {|}
shifts: 4, reduces: 0, accepts: 0
shifting [id,num]
building new item: symbol -> [id,id] . {;}
building new item: symbol -> [id,id] . {id}
building new item: symbol -> [id,id] . {literal}
building new item: symbol -> [id,id] . {|}
closure post shift
LOOP: 51, token: |, token_value: |
[verbose dump (every loop)]
parser state:
current token: |, value: |
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [production,production]
  [id,E]
  [:,:]
  [body,body]
  [|,|]
  [id,num]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production_list -> production . {$}
    production_list -> production . production_list {$}
   nonkernel items:
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 4
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 5
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    body_list -> body . {;}
    body_list -> body . [|,|] body_list {;}
   nonkernel items:
  state 7
   kernel items:
    body_list -> body [|,|] . body_list {;}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 8
   kernel items:
    symbol -> [id,id] . {;}
    symbol -> [id,id] . {id}
    symbol -> [id,id] . {literal}
    symbol -> [id,id] . {|}
   nonkernel items:
check: reduce symbol -> [id,id] . {|}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: symbol -> [id,id] . {;}
trying to reduce by: symbol -> [id,id] . {id}
trying to reduce by: symbol -> [id,id] . {literal}
trying to reduce by: symbol -> [id,id] . {|}
reduce: symbol -> 
reduce item: symbol -> [id,id] . {|}
building new item: symbol_list -> symbol . {;}
building new item: symbol_list -> symbol . symbol_list {;}
building new item: symbol_list -> symbol . {|}
building new item: symbol_list -> symbol . symbol_list {|}
closure post reduce
FIRST([;,;]): [;,;] 
closure creating: symbol_list -> . symbol {;}
closure creating: symbol_list -> . symbol symbol_list {;}
FIRST([|,|]): [|,|] 
closure creating: symbol_list -> . symbol {|}
closure creating: symbol_list -> . symbol symbol_list {|}
FIRST([;,;]): [;,;] 
closure creating: symbol -> . [id,id] {;}
closure creating: symbol -> . [literal,literal] {;}
FIRST([symbol_list,symbol_list] [;,;]): [id,id] [literal,literal] 
closure creating: symbol -> . [id,id] {id}
closure creating: symbol -> . [id,id] {literal}
closure creating: symbol -> . [literal,literal] {id}
closure creating: symbol -> . [literal,literal] {literal}
FIRST([|,|]): [|,|] 
closure creating: symbol -> . [id,id] {|}
closure creating: symbol -> . [literal,literal] {|}
FIRST([symbol_list,symbol_list] [|,|]): [id,id] [literal,literal] 
LOOP: 52, token: |, token_value: |
[verbose dump (every loop)]
parser state:
current token: |, value: |
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [production,production]
  [id,E]
  [:,:]
  [body,body]
  [|,|]
  [symbol,symbol]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production_list -> production . {$}
    production_list -> production . production_list {$}
   nonkernel items:
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 4
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 5
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    body_list -> body . {;}
    body_list -> body . [|,|] body_list {;}
   nonkernel items:
  state 7
   kernel items:
    body_list -> body [|,|] . body_list {;}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 8
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
check: reduce symbol_list -> symbol . {|}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: symbol_list -> symbol . {;}
trying to reduce by: symbol_list -> symbol . symbol_list {;}
trying to reduce by: symbol_list -> symbol . {|}
reduce: symbol_list -> 
reduce item: symbol_list -> symbol . {|}
building new item: body -> symbol_list . {;}
building new item: body -> symbol_list . {|}
closure post reduce
LOOP: 53, token: |, token_value: |
[verbose dump (every loop)]
parser state:
current token: |, value: |
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [production,production]
  [id,E]
  [:,:]
  [body,body]
  [|,|]
  [symbol_list,symbol_list]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production_list -> production . {$}
    production_list -> production . production_list {$}
   nonkernel items:
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 4
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 5
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    body_list -> body . {;}
    body_list -> body . [|,|] body_list {;}
   nonkernel items:
  state 7
   kernel items:
    body_list -> body [|,|] . body_list {;}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 8
   kernel items:
    body -> symbol_list . {;}
    body -> symbol_list . {|}
   nonkernel items:
check: reduce body -> symbol_list . {|}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: body -> symbol_list . {;}
trying to reduce by: body -> symbol_list . {|}
reduce: body -> 
reduce item: body -> symbol_list . {|}
building new item: body_list -> body . {;}
building new item: body_list -> body . [|,|] body_list {;}
closure post reduce
LOOP: 54, token: |, token_value: |
[verbose dump (every loop)]
parser state:
current token: |, value: |
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [production,production]
  [id,E]
  [:,:]
  [body,body]
  [|,|]
  [body,body]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production_list -> production . {$}
    production_list -> production . production_list {$}
   nonkernel items:
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 4
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 5
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    body_list -> body . {;}
    body_list -> body . [|,|] body_list {;}
   nonkernel items:
  state 7
   kernel items:
    body_list -> body [|,|] . body_list {;}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 8
   kernel items:
    body_list -> body . {;}
    body_list -> body . [|,|] body_list {;}
   nonkernel items:
check: shift body_list -> body . [|,|] body_list {;}
shifts: 1, reduces: 0, accepts: 0
shifting [|,|]
building new item: body_list -> body [|,|] . body_list {;}
closure post shift
FIRST([;,;]): [;,;] 
closure creating: body_list -> . body {;}
closure creating: body_list -> . body [|,|] body_list {;}
FIRST([;,;]): [;,;] 
closure creating: body -> . symbol_list {;}
FIRST([|,|] [body_list,body_list] [;,;]): [|,|] 
closure creating: body -> . symbol_list {|}
FIRST([;,;]): [;,;] 
closure creating: symbol_list -> . symbol {;}
closure creating: symbol_list -> . symbol symbol_list {;}
FIRST([|,|]): [|,|] 
closure creating: symbol_list -> . symbol {|}
closure creating: symbol_list -> . symbol symbol_list {|}
FIRST([;,;]): [;,;] 
closure creating: symbol -> . [id,id] {;}
closure creating: symbol -> . [literal,literal] {;}
FIRST([symbol_list,symbol_list] [;,;]): [id,id] [literal,literal] 
closure creating: symbol -> . [id,id] {id}
closure creating: symbol -> . [id,id] {literal}
closure creating: symbol -> . [literal,literal] {id}
closure creating: symbol -> . [literal,literal] {literal}
FIRST([|,|]): [|,|] 
closure creating: symbol -> . [id,id] {|}
closure creating: symbol -> . [literal,literal] {|}
FIRST([symbol_list,symbol_list] [|,|]): [id,id] [literal,literal] 
LOOP: 55, token: id, token_value: id
[verbose dump (every loop)]
parser state:
current token: id, value: id
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [production,production]
  [id,E]
  [:,:]
  [body,body]
  [|,|]
  [body,body]
  [|,|]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production_list -> production . {$}
    production_list -> production . production_list {$}
   nonkernel items:
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 4
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 5
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    body_list -> body . {;}
    body_list -> body . [|,|] body_list {;}
   nonkernel items:
  state 7
   kernel items:
    body_list -> body [|,|] . body_list {;}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 8
   kernel items:
    body_list -> body . {;}
    body_list -> body . [|,|] body_list {;}
   nonkernel items:
  state 9
   kernel items:
    body_list -> body [|,|] . body_list {;}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
check: shift symbol -> . [id,id] {;}
check: shift symbol -> . [id,id] {id}
check: shift symbol -> . [id,id] {literal}
check: shift symbol -> . [id,id] {|}
shifts: 4, reduces: 0, accepts: 0
shifting [id,id]
building new item: symbol -> [id,id] . {;}
building new item: symbol -> [id,id] . {id}
building new item: symbol -> [id,id] . {literal}
building new item: symbol -> [id,id] . {|}
closure post shift
LOOP: 56, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [production,production]
  [id,E]
  [:,:]
  [body,body]
  [|,|]
  [body,body]
  [|,|]
  [id,id]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production_list -> production . {$}
    production_list -> production . production_list {$}
   nonkernel items:
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 4
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 5
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    body_list -> body . {;}
    body_list -> body . [|,|] body_list {;}
   nonkernel items:
  state 7
   kernel items:
    body_list -> body [|,|] . body_list {;}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 8
   kernel items:
    body_list -> body . {;}
    body_list -> body . [|,|] body_list {;}
   nonkernel items:
  state 9
   kernel items:
    body_list -> body [|,|] . body_list {;}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 10
   kernel items:
    symbol -> [id,id] . {;}
    symbol -> [id,id] . {id}
    symbol -> [id,id] . {literal}
    symbol -> [id,id] . {|}
   nonkernel items:
check: reduce symbol -> [id,id] . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: symbol -> [id,id] . {;}
reduce: symbol -> 
reduce item: symbol -> [id,id] . {;}
building new item: symbol_list -> symbol . {;}
building new item: symbol_list -> symbol . symbol_list {;}
building new item: symbol_list -> symbol . {|}
building new item: symbol_list -> symbol . symbol_list {|}
closure post reduce
FIRST([;,;]): [;,;] 
closure creating: symbol_list -> . symbol {;}
closure creating: symbol_list -> . symbol symbol_list {;}
FIRST([|,|]): [|,|] 
closure creating: symbol_list -> . symbol {|}
closure creating: symbol_list -> . symbol symbol_list {|}
FIRST([;,;]): [;,;] 
closure creating: symbol -> . [id,id] {;}
closure creating: symbol -> . [literal,literal] {;}
FIRST([symbol_list,symbol_list] [;,;]): [id,id] [literal,literal] 
closure creating: symbol -> . [id,id] {id}
closure creating: symbol -> . [id,id] {literal}
closure creating: symbol -> . [literal,literal] {id}
closure creating: symbol -> . [literal,literal] {literal}
FIRST([|,|]): [|,|] 
closure creating: symbol -> . [id,id] {|}
closure creating: symbol -> . [literal,literal] {|}
FIRST([symbol_list,symbol_list] [|,|]): [id,id] [literal,literal] 
LOOP: 57, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [production,production]
  [id,E]
  [:,:]
  [body,body]
  [|,|]
  [body,body]
  [|,|]
  [symbol,symbol]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production_list -> production . {$}
    production_list -> production . production_list {$}
   nonkernel items:
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 4
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 5
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    body_list -> body . {;}
    body_list -> body . [|,|] body_list {;}
   nonkernel items:
  state 7
   kernel items:
    body_list -> body [|,|] . body_list {;}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 8
   kernel items:
    body_list -> body . {;}
    body_list -> body . [|,|] body_list {;}
   nonkernel items:
  state 9
   kernel items:
    body_list -> body [|,|] . body_list {;}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 10
   kernel items:
    symbol_list -> symbol . {;}
    symbol_list -> symbol . symbol_list {;}
    symbol_list -> symbol . {|}
    symbol_list -> symbol . symbol_list {|}
   nonkernel items:
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
check: reduce symbol_list -> symbol . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: symbol_list -> symbol . {;}
reduce: symbol_list -> 
reduce item: symbol_list -> symbol . {;}
building new item: body -> symbol_list . {;}
building new item: body -> symbol_list . {|}
closure post reduce
LOOP: 58, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [production,production]
  [id,E]
  [:,:]
  [body,body]
  [|,|]
  [body,body]
  [|,|]
  [symbol_list,symbol_list]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production_list -> production . {$}
    production_list -> production . production_list {$}
   nonkernel items:
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 4
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 5
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    body_list -> body . {;}
    body_list -> body . [|,|] body_list {;}
   nonkernel items:
  state 7
   kernel items:
    body_list -> body [|,|] . body_list {;}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 8
   kernel items:
    body_list -> body . {;}
    body_list -> body . [|,|] body_list {;}
   nonkernel items:
  state 9
   kernel items:
    body_list -> body [|,|] . body_list {;}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 10
   kernel items:
    body -> symbol_list . {;}
    body -> symbol_list . {|}
   nonkernel items:
check: reduce body -> symbol_list . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: body -> symbol_list . {;}
reduce: body -> 
reduce item: body -> symbol_list . {;}
building new item: body_list -> body . {;}
building new item: body_list -> body . [|,|] body_list {;}
closure post reduce
LOOP: 59, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [production,production]
  [id,E]
  [:,:]
  [body,body]
  [|,|]
  [body,body]
  [|,|]
  [body,body]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production_list -> production . {$}
    production_list -> production . production_list {$}
   nonkernel items:
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 4
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 5
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    body_list -> body . {;}
    body_list -> body . [|,|] body_list {;}
   nonkernel items:
  state 7
   kernel items:
    body_list -> body [|,|] . body_list {;}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 8
   kernel items:
    body_list -> body . {;}
    body_list -> body . [|,|] body_list {;}
   nonkernel items:
  state 9
   kernel items:
    body_list -> body [|,|] . body_list {;}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 10
   kernel items:
    body_list -> body . {;}
    body_list -> body . [|,|] body_list {;}
   nonkernel items:
check: reduce body_list -> body . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: body_list -> body . {;}
reduce: body_list -> 
reduce item: body_list -> body . {;}
building new item: body_list -> body [|,|] body_list . {;}
closure post reduce
LOOP: 60, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [production,production]
  [id,E]
  [:,:]
  [body,body]
  [|,|]
  [body,body]
  [|,|]
  [body_list,body_list]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production_list -> production . {$}
    production_list -> production . production_list {$}
   nonkernel items:
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 4
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 5
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    body_list -> body . {;}
    body_list -> body . [|,|] body_list {;}
   nonkernel items:
  state 7
   kernel items:
    body_list -> body [|,|] . body_list {;}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 8
   kernel items:
    body_list -> body . {;}
    body_list -> body . [|,|] body_list {;}
   nonkernel items:
  state 9
   kernel items:
    body_list -> body [|,|] . body_list {;}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 10
   kernel items:
    body_list -> body [|,|] body_list . {;}
   nonkernel items:
check: reduce body_list -> body [|,|] body_list . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: body_list -> body [|,|] body_list . {;}
reduce: body_list -> 
reduce item: body_list -> body [|,|] body_list . {;}
building new item: body_list -> body [|,|] body_list . {;}
closure post reduce
LOOP: 61, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [production,production]
  [id,E]
  [:,:]
  [body,body]
  [|,|]
  [body_list,body_list]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production_list -> production . {$}
    production_list -> production . production_list {$}
   nonkernel items:
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 4
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 5
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    body_list -> body . {;}
    body_list -> body . [|,|] body_list {;}
   nonkernel items:
  state 7
   kernel items:
    body_list -> body [|,|] . body_list {;}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 8
   kernel items:
    body_list -> body [|,|] body_list . {;}
   nonkernel items:
check: reduce body_list -> body [|,|] body_list . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: body_list -> body [|,|] body_list . {;}
reduce: body_list -> 
reduce item: body_list -> body [|,|] body_list . {;}
building new item: production -> [id,id] [:,:] body_list . [;,;] {$}
building new item: production -> [id,id] [:,:] body_list . [;,;] {id}
closure post reduce
LOOP: 62, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [production,production]
  [id,E]
  [:,:]
  [body_list,body_list]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production_list -> production . {$}
    production_list -> production . production_list {$}
   nonkernel items:
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 4
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 5
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    production -> [id,id] [:,:] body_list . [;,;] {$}
    production -> [id,id] [:,:] body_list . [;,;] {id}
   nonkernel items:
check: shift production -> [id,id] [:,:] body_list . [;,;] {$}
check: shift production -> [id,id] [:,:] body_list . [;,;] {id}
shifts: 2, reduces: 0, accepts: 0
shifting [;,;]
building new item: production -> [id,id] [:,:] body_list [;,;] . {$}
building new item: production -> [id,id] [:,:] body_list [;,;] . {id}
closure post shift
LOOP: 63, token: $, token_value: $
[verbose dump (every loop)]
parser state:
current token: $, value: $
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [production,production]
  [id,E]
  [:,:]
  [body_list,body_list]
  [;,;]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production_list -> production . {$}
    production_list -> production . production_list {$}
   nonkernel items:
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 4
   kernel items:
    production -> [id,id] . [:,:] body_list [;,;] {$}
    production -> [id,id] . [:,:] body_list [;,;] {id}
   nonkernel items:
  state 5
   kernel items:
    production -> [id,id] [:,:] . body_list [;,;] {$}
    production -> [id,id] [:,:] . body_list [;,;] {id}
   nonkernel items:
    body_list -> . body {;}
    body_list -> . body [|,|] body_list {;}
    body -> . symbol_list {;}
    body -> . symbol_list {|}
    symbol_list -> . symbol {;}
    symbol_list -> . symbol symbol_list {;}
    symbol_list -> . symbol {|}
    symbol_list -> . symbol symbol_list {|}
    symbol -> . [id,id] {;}
    symbol -> . [literal,literal] {;}
    symbol -> . [id,id] {id}
    symbol -> . [id,id] {literal}
    symbol -> . [literal,literal] {id}
    symbol -> . [literal,literal] {literal}
    symbol -> . [id,id] {|}
    symbol -> . [literal,literal] {|}
  state 6
   kernel items:
    production -> [id,id] [:,:] body_list . [;,;] {$}
    production -> [id,id] [:,:] body_list . [;,;] {id}
   nonkernel items:
  state 7
   kernel items:
    production -> [id,id] [:,:] body_list [;,;] . {$}
    production -> [id,id] [:,:] body_list [;,;] . {id}
   nonkernel items:
check: reduce production -> [id,id] [:,:] body_list [;,;] . {$}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: production -> [id,id] [:,:] body_list [;,;] . {$}
reduce: production -> 
reduce item: production -> [id,id] [:,:] body_list [;,;] . {$}
building new item: production_list -> production . {$}
building new item: production_list -> production . production_list {$}
closure post reduce
FIRST([$,$]): [$,$] 
closure creating: production_list -> . production {$}
closure creating: production_list -> . production production_list {$}
FIRST([$,$]): [$,$] 
closure creating: production -> . [id,id] [:,:] body_list [;,;] {$}
FIRST([production_list,production_list] [$,$]): [id,id] 
closure creating: production -> . [id,id] [:,:] body_list [;,;] {id}
LOOP: 64, token: $, token_value: $
[verbose dump (every loop)]
parser state:
current token: $, value: $
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [production,production]
  [production,production]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production_list -> production . {$}
    production_list -> production . production_list {$}
   nonkernel items:
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 4
   kernel items:
    production_list -> production . {$}
    production_list -> production . production_list {$}
   nonkernel items:
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
check: reduce production_list -> production . {$}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: production_list -> production . {$}
reduce: production_list -> 
reduce item: production_list -> production . {$}
building new item: production_list -> production production_list . {$}
closure post reduce
LOOP: 65, token: $, token_value: $
[verbose dump (every loop)]
parser state:
current token: $, value: $
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [production,production]
  [production_list,production_list]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    production_list -> production . {$}
    production_list -> production . production_list {$}
   nonkernel items:
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 4
   kernel items:
    production_list -> production production_list . {$}
   nonkernel items:
check: reduce production_list -> production production_list . {$}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: production_list -> production production_list . {$}
reduce: production_list -> 
reduce item: production_list -> production production_list . {$}
building new item: grammar -> production_list . {$}
closure post reduce
LOOP: 66, token: $, token_value: $
[verbose dump (every loop)]
parser state:
current token: $, value: $
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [production_list,production_list]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    grammar -> production_list . {$}
   nonkernel items:
check: reduce grammar -> production_list . {$}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: grammar -> production_list . {$}
reduce: grammar -> 
reduce item: grammar -> production_list . {$}
building new item: tokenizer_and_grammar -> tokenizer [%%,%%] grammar . {$}
closure post reduce
LOOP: 67, token: $, token_value: $
[verbose dump (every loop)]
parser state:
current token: $, value: $
 symbol stack:
  [tokenizer,tokenizer]
  [%%,%%]
  [grammar,grammar]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    tokenizer_and_grammar -> tokenizer . [%%,%%] grammar {$}
   nonkernel items:
  state 2
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] . grammar {$}
   nonkernel items:
    grammar -> . production_list {$}
    production_list -> . production {$}
    production_list -> . production production_list {$}
    production -> . [id,id] [:,:] body_list [;,;] {$}
    production -> . [id,id] [:,:] body_list [;,;] {id}
  state 3
   kernel items:
    tokenizer_and_grammar -> tokenizer [%%,%%] grammar . {$}
   nonkernel items:
check: reduce tokenizer_and_grammar -> tokenizer [%%,%%] grammar . {$}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: tokenizer_and_grammar -> tokenizer [%%,%%] grammar . {$}
reduce: tokenizer_and_grammar -> 
reduce item: tokenizer_and_grammar -> tokenizer [%%,%%] grammar . {$}
building new item: START -> tokenizer_and_grammar . {$}
closure post reduce
LOOP: 68, token: $, token_value: $
[verbose dump (every loop)]
parser state:
current token: $, value: $
 symbol stack:
  [tokenizer_and_grammar,tokenizer_and_grammar]
 state stack:
  state 0
   kernel items:
    START -> . tokenizer_and_grammar {$}
   nonkernel items:
    tokenizer_and_grammar -> . tokenizer [%%,%%] grammar {$}
    tokenizer -> . token_line_list {%%}
    token_line_list -> . token_line {%%}
    token_line_list -> . token_line token_line_list {%%}
    token_line -> . [%token,%token] token_list {%%}
    token_line -> . [%start,%start] [id,id] {%%}
    token_line -> . [%token,%token] token_list {%start}
    token_line -> . [%token,%token] token_list {%token}
    token_line -> . [%start,%start] [id,id] {%start}
    token_line -> . [%start,%start] [id,id] {%token}
  state 1
   kernel items:
    START -> tokenizer_and_grammar . {$}
   nonkernel items:
check: accept START -> tokenizer_and_grammar . {$}
shifts: 0, reduces: 0, accepts: 1
ACCEPT!
LOOP: 0, token: if, token_value: if
check: shift STMT -> . [if,if] E [then,then] E [else,else] E {$}
shifts: 1, reduces: 0, accepts: 0
shifting [if,if]
building new item: STMT -> [if,if] . E [then,then] E [else,else] E {$}
LOOP: 1, token: num, token_value: 0
check: shift E -> . [num,num] {then}
check: shift E -> . [num,num] {+}
shifts: 2, reduces: 0, accepts: 0
shifting [num,0]
building new item: E -> [num,num] . {then}
building new item: E -> [num,num] . {+}
LOOP: 2, token: +, token_value: +
check: reduce E -> [num,num] . {+}
shifts: 0, reduces: 1, accepts: 0
reduce: E -> 
reduce item: E -> [num,num] . {+}
building new item: STMT -> [if,if] E . [then,then] E [else,else] E {$}
building new item: E -> E . [+,+] E {then}
building new item: E -> E . [+,+] E {+}
LOOP: 3, token: +, token_value: +
check: shift E -> E . [+,+] E {then}
check: shift E -> E . [+,+] E {+}
shifts: 2, reduces: 0, accepts: 0
shifting [+,+]
building new item: E -> E [+,+] . E {then}
building new item: E -> E [+,+] . E {+}
LOOP: 4, token: num, token_value: 1
check: shift E -> . [num,num] {then}
check: shift E -> . [num,num] {+}
shifts: 2, reduces: 0, accepts: 0
shifting [num,1]
building new item: E -> [num,num] . {then}
building new item: E -> [num,num] . {+}
LOOP: 5, token: then, token_value: then
check: reduce E -> [num,num] . {then}
shifts: 0, reduces: 1, accepts: 0
reduce: E -> 
reduce item: E -> [num,num] . {then}
building new item: E -> E [+,+] E . {then}
building new item: E -> E [+,+] E . {+}
building new item: E -> E . [+,+] E {then}
building new item: E -> E . [+,+] E {+}
LOOP: 6, token: then, token_value: then
check: reduce E -> E [+,+] E . {then}
shifts: 0, reduces: 1, accepts: 0
reduce: E -> 
reduce item: E -> E [+,+] E . {then}
building new item: STMT -> [if,if] E . [then,then] E [else,else] E {$}
building new item: E -> E . [+,+] E {then}
building new item: E -> E . [+,+] E {+}
LOOP: 7, token: then, token_value: then
check: shift STMT -> [if,if] E . [then,then] E [else,else] E {$}
shifts: 1, reduces: 0, accepts: 0
shifting [then,then]
building new item: STMT -> [if,if] E [then,then] . E [else,else] E {$}
LOOP: 8, token: id, token_value: x
check: shift E -> . [id,id] {else}
check: shift E -> . [id,id] {+}
shifts: 2, reduces: 0, accepts: 0
shifting [id,x]
building new item: E -> [id,id] . {else}
building new item: E -> [id,id] . {+}
LOOP: 9, token: +, token_value: +
check: reduce E -> [id,id] . {+}
shifts: 0, reduces: 1, accepts: 0
reduce: E -> 
reduce item: E -> [id,id] . {+}
building new item: STMT -> [if,if] E [then,then] E . [else,else] E {$}
building new item: E -> E . [+,+] E {else}
building new item: E -> E . [+,+] E {+}
LOOP: 10, token: +, token_value: +
check: shift E -> E . [+,+] E {else}
check: shift E -> E . [+,+] E {+}
shifts: 2, reduces: 0, accepts: 0
shifting [+,+]
building new item: E -> E [+,+] . E {else}
building new item: E -> E [+,+] . E {+}
LOOP: 11, token: id, token_value: y
check: shift E -> . [id,id] {else}
check: shift E -> . [id,id] {+}
shifts: 2, reduces: 0, accepts: 0
shifting [id,y]
building new item: E -> [id,id] . {else}
building new item: E -> [id,id] . {+}
LOOP: 12, token: else, token_value: else
check: reduce E -> [id,id] . {else}
shifts: 0, reduces: 1, accepts: 0
reduce: E -> 
reduce item: E -> [id,id] . {else}
building new item: E -> E [+,+] E . {else}
building new item: E -> E [+,+] E . {+}
building new item: E -> E . [+,+] E {else}
building new item: E -> E . [+,+] E {+}
LOOP: 13, token: else, token_value: else
check: reduce E -> E [+,+] E . {else}
shifts: 0, reduces: 1, accepts: 0
reduce: E -> 
reduce item: E -> E [+,+] E . {else}
building new item: STMT -> [if,if] E [then,then] E . [else,else] E {$}
building new item: E -> E . [+,+] E {else}
building new item: E -> E . [+,+] E {+}
LOOP: 14, token: else, token_value: else
check: shift STMT -> [if,if] E [then,then] E . [else,else] E {$}
shifts: 1, reduces: 0, accepts: 0
shifting [else,else]
building new item: STMT -> [if,if] E [then,then] E [else,else] . E {$}
LOOP: 15, token: id, token_value: y
check: shift E -> . [id,id] {$}
check: shift E -> . [id,id] {+}
shifts: 2, reduces: 0, accepts: 0
shifting [id,y]
building new item: E -> [id,id] . {$}
building new item: E -> [id,id] . {+}
LOOP: 16, token: +, token_value: +
check: reduce E -> [id,id] . {+}
shifts: 0, reduces: 1, accepts: 0
reduce: E -> 
reduce item: E -> [id,id] . {+}
building new item: STMT -> [if,if] E [then,then] E [else,else] E . {$}
building new item: E -> E . [+,+] E {$}
building new item: E -> E . [+,+] E {+}
LOOP: 17, token: +, token_value: +
check: shift E -> E . [+,+] E {$}
check: shift E -> E . [+,+] E {+}
shifts: 2, reduces: 0, accepts: 0
shifting [+,+]
building new item: E -> E [+,+] . E {$}
building new item: E -> E [+,+] . E {+}
LOOP: 18, token: id, token_value: z
check: shift E -> . [id,id] {$}
check: shift E -> . [id,id] {+}
shifts: 2, reduces: 0, accepts: 0
shifting [id,z]
building new item: E -> [id,id] . {$}
building new item: E -> [id,id] . {+}
LOOP: 19, token: $, token_value: $
check: reduce E -> [id,id] . {$}
shifts: 0, reduces: 1, accepts: 0
reduce: E -> 
reduce item: E -> [id,id] . {$}
building new item: E -> E [+,+] E . {$}
building new item: E -> E [+,+] E . {+}
building new item: E -> E . [+,+] E {$}
building new item: E -> E . [+,+] E {+}
LOOP: 20, token: $, token_value: $
check: reduce E -> E [+,+] E . {$}
shifts: 0, reduces: 1, accepts: 0
reduce: E -> 
reduce item: E -> E [+,+] E . {$}
building new item: STMT -> [if,if] E [then,then] E [else,else] E . {$}
building new item: E -> E . [+,+] E {$}
building new item: E -> E . [+,+] E {+}
LOOP: 21, token: $, token_value: $
check: reduce STMT -> [if,if] E [then,then] E [else,else] E . {$}
shifts: 0, reduces: 1, accepts: 0
reduce: STMT -> 
reduce item: STMT -> [if,if] E [then,then] E [else,else] E . {$}
building new item: START -> STMT . {$}
LOOP: 22, token: $, token_value: $
check: accept START -> STMT . {$}
shifts: 0, reduces: 0, accepts: 1
ACCEPT!
if 0 + 1 then x + y else y + z  <- STMT
 if  <- [if,if]
 0 + 1  <- E
  0  <- E
   0  <- [num,0]
  +  <- [+,+]
  1  <- E
   1  <- [num,1]
 then  <- [then,then]
 x + y  <- E
  x  <- E
   x  <- [id,x]
  +  <- [+,+]
  y  <- E
   y  <- [id,y]
 else  <- [else,else]
 y + z  <- E
  y  <- E
   y  <- [id,y]
  +  <- [+,+]
  z  <- E
   z  <- [id,z]
