[starting the parse]
LOOP: 0, token: if, token_value: if
shifting '[if,if]'
LOOP: 1, token: num, token_value: 0
shifting '[num,0]'
LOOP: 2, token: +, token_value: +
reduce: E -> 0 
LOOP: 3, token: +, token_value: +
shifting '[+,+]'
LOOP: 4, token: num, token_value: 1
shifting '[num,1]'
LOOP: 5, token: then, token_value: then
reduce: E -> 1 
LOOP: 6, token: then, token_value: then
reduce: E -> 0 + 1 
LOOP: 7, token: then, token_value: then
shifting '[then,then]'
LOOP: 8, token: id, token_value: x
shifting '[id,x]'
LOOP: 9, token: *, token_value: *
reduce: E -> x 
LOOP: 10, token: *, token_value: *
shifting '[*,*]'
LOOP: 11, token: id, token_value: y
shifting '[id,y]'
LOOP: 12, token: else, token_value: else
reduce: E -> y 
LOOP: 13, token: else, token_value: else
reduce: E -> x * y 
LOOP: 14, token: else, token_value: else
shifting '[else,else]'
LOOP: 15, token: id, token_value: y
shifting '[id,y]'
LOOP: 16, token: /, token_value: /
reduce: E -> y 
LOOP: 17, token: /, token_value: /
shifting '[/,/]'
LOOP: 18, token: id, token_value: z
shifting '[id,z]'
LOOP: 19, token: $, token_value: $
reduce: E -> z 
LOOP: 20, token: $, token_value: $
reduce: E -> y / z 
LOOP: 21, token: $, token_value: $
ACCEPT!
y / z  <- E
 y  <- E
  y  <- [id,y]
 /  <- [/,/]
 z  <- E
  z  <- [id,z]
