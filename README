Parser experiment

This is a library to help users parse text. Given a grammar
specification, it will generate a parser at runtime.

The parser supports LR(1) grammars. With the experimental support for
extending the grammar from within files it is parsing, I suppose it
probably supports more than just LR(1) grammars.

Unlike tools like bison or yacc, this library will generate parsers at
runtime. It will also allow the user to load a grammar and make
modifications, including adding or removing productions from the
grammar.

The current version has experimental support for extending the syntax
on the fly.

Some possible uses I'm imagining:

- user writes a small program to load a C grammar into the parser
  generator, uses parser to syntax check files, doesn't need to deal
  with a full compiler

- compiler writer uses parser generator library to load the grammar
  for the default language and then makes changes to the grammar based
  on command line switches (ex: removes custom features when -ansi is
  passed in)

- new syntax is added for new types. new syntax for expressions with
  these types, new initializers, etc.

- new syntax is added on the fly... a possible example:

  foo()
  {
    {
      # insert a new expression body, to be used immediately
      # (the semantics of this is to be defined elsewhere)
      add-production { E -> E ** E }

      # use the new expression
      print 2 ** 16
    }

    # this should be a syntax error
    print 2 ** 16
  }

- user wants to parse fragments of a language, so they load the full
  grammar and then point the start state at the appropriate production
