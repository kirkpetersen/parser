loading tests/c2.grammar
running
closure for initial state
LOOP: 0, token: int, token_value: int
[verbose dump (every loop)]
parser state:
current token: int, value: int
 symbol stack:
 state stack (kernel items of top state only):
  state 0
   kernel items:
    START -> . translation_unit {$}
check: shift type_specifier -> . [int,int] {(}
check: shift type_specifier -> . [int,int] {*}
check: shift type_specifier -> . [int,int] {id}
check: shift type_specifier -> . [int,int] {TYPE_NAME}
check: shift type_specifier -> . [int,int] {auto}
check: shift type_specifier -> . [int,int] {bool}
check: shift type_specifier -> . [int,int] {char}
check: shift type_specifier -> . [int,int] {complex}
check: shift type_specifier -> . [int,int] {const}
check: shift type_specifier -> . [int,int] {double}
check: shift type_specifier -> . [int,int] {enum}
check: shift type_specifier -> . [int,int] {extern}
check: shift type_specifier -> . [int,int] {float}
check: shift type_specifier -> . [int,int] {imaginary}
check: shift type_specifier -> . [int,int] {inline}
check: shift type_specifier -> . [int,int] {int}
check: shift type_specifier -> . [int,int] {long}
check: shift type_specifier -> . [int,int] {register}
check: shift type_specifier -> . [int,int] {restrict}
check: shift type_specifier -> . [int,int] {short}
check: shift type_specifier -> . [int,int] {signed}
check: shift type_specifier -> . [int,int] {static}
check: shift type_specifier -> . [int,int] {struct}
check: shift type_specifier -> . [int,int] {typedef}
check: shift type_specifier -> . [int,int] {union}
check: shift type_specifier -> . [int,int] {unsigned}
check: shift type_specifier -> . [int,int] {void}
check: shift type_specifier -> . [int,int] {volatile}
check: shift type_specifier -> . [int,int] {;}
shifts: 29, reduces: 0, accepts: 0
shifting [int,int]
building new item: type_specifier -> [int,int] . {(}
building new item: type_specifier -> [int,int] . {*}
building new item: type_specifier -> [int,int] . {id}
building new item: type_specifier -> [int,int] . {TYPE_NAME}
building new item: type_specifier -> [int,int] . {auto}
building new item: type_specifier -> [int,int] . {bool}
building new item: type_specifier -> [int,int] . {char}
building new item: type_specifier -> [int,int] . {complex}
building new item: type_specifier -> [int,int] . {const}
building new item: type_specifier -> [int,int] . {double}
building new item: type_specifier -> [int,int] . {enum}
building new item: type_specifier -> [int,int] . {extern}
building new item: type_specifier -> [int,int] . {float}
building new item: type_specifier -> [int,int] . {imaginary}
building new item: type_specifier -> [int,int] . {inline}
building new item: type_specifier -> [int,int] . {int}
building new item: type_specifier -> [int,int] . {long}
building new item: type_specifier -> [int,int] . {register}
building new item: type_specifier -> [int,int] . {restrict}
building new item: type_specifier -> [int,int] . {short}
building new item: type_specifier -> [int,int] . {signed}
building new item: type_specifier -> [int,int] . {static}
building new item: type_specifier -> [int,int] . {struct}
building new item: type_specifier -> [int,int] . {typedef}
building new item: type_specifier -> [int,int] . {union}
building new item: type_specifier -> [int,int] . {unsigned}
building new item: type_specifier -> [int,int] . {void}
building new item: type_specifier -> [int,int] . {volatile}
building new item: type_specifier -> [int,int] . {;}
closure post shift
LOOP: 1, token: id, token_value: foo
[verbose dump (every loop)]
parser state:
current token: id, value: foo
 symbol stack:
  [int,int]
 state stack (kernel items of top state only):
  state 1
   kernel items:
    type_specifier -> [int,int] . {(}
    type_specifier -> [int,int] . {*}
    type_specifier -> [int,int] . {id}
    type_specifier -> [int,int] . {TYPE_NAME}
    type_specifier -> [int,int] . {auto}
    type_specifier -> [int,int] . {bool}
    type_specifier -> [int,int] . {char}
    type_specifier -> [int,int] . {complex}
    type_specifier -> [int,int] . {const}
    type_specifier -> [int,int] . {double}
    type_specifier -> [int,int] . {enum}
    type_specifier -> [int,int] . {extern}
    type_specifier -> [int,int] . {float}
    type_specifier -> [int,int] . {imaginary}
    type_specifier -> [int,int] . {inline}
    type_specifier -> [int,int] . {int}
    type_specifier -> [int,int] . {long}
    type_specifier -> [int,int] . {register}
    type_specifier -> [int,int] . {restrict}
    type_specifier -> [int,int] . {short}
    type_specifier -> [int,int] . {signed}
    type_specifier -> [int,int] . {static}
    type_specifier -> [int,int] . {struct}
    type_specifier -> [int,int] . {typedef}
    type_specifier -> [int,int] . {union}
    type_specifier -> [int,int] . {unsigned}
    type_specifier -> [int,int] . {void}
    type_specifier -> [int,int] . {volatile}
    type_specifier -> [int,int] . {;}
check: reduce type_specifier -> [int,int] . {id}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: type_specifier -> [int,int] . {(}
trying to reduce by: type_specifier -> [int,int] . {*}
trying to reduce by: type_specifier -> [int,int] . {id}
reduce: type_specifier -> int 
reduce item: type_specifier -> [int,int] . {id}
building new item: declaration_specifiers -> type_specifier . {(}
building new item: declaration_specifiers -> type_specifier . {*}
building new item: declaration_specifiers -> type_specifier . {id}
building new item: declaration_specifiers -> type_specifier . declaration_specifiers {(}
building new item: declaration_specifiers -> type_specifier . declaration_specifiers {*}
building new item: declaration_specifiers -> type_specifier . declaration_specifiers {id}
building new item: declaration_specifiers -> type_specifier . {;}
building new item: declaration_specifiers -> type_specifier . declaration_specifiers {;}
closure post reduce
LOOP: 2, token: id, token_value: foo
[verbose dump (every loop)]
parser state:
current token: id, value: foo
 symbol stack:
  [type_specifier,type_specifier]
 state stack (kernel items of top state only):
  state 1
   kernel items:
    declaration_specifiers -> type_specifier . {(}
    declaration_specifiers -> type_specifier . {*}
    declaration_specifiers -> type_specifier . {id}
    declaration_specifiers -> type_specifier . declaration_specifiers {(}
    declaration_specifiers -> type_specifier . declaration_specifiers {*}
    declaration_specifiers -> type_specifier . declaration_specifiers {id}
    declaration_specifiers -> type_specifier . {;}
    declaration_specifiers -> type_specifier . declaration_specifiers {;}
check: reduce declaration_specifiers -> type_specifier . {id}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: declaration_specifiers -> type_specifier . {(}
trying to reduce by: declaration_specifiers -> type_specifier . {*}
trying to reduce by: declaration_specifiers -> type_specifier . {id}
reduce: declaration_specifiers -> int 
reduce item: declaration_specifiers -> type_specifier . {id}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {$}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {$}
building new item: declaration -> declaration_specifiers . [;,;] {$}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {$}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {TYPE_NAME}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {TYPE_NAME}
building new item: declaration -> declaration_specifiers . [;,;] {TYPE_NAME}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {TYPE_NAME}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {auto}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {auto}
building new item: declaration -> declaration_specifiers . [;,;] {auto}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {auto}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {bool}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {bool}
building new item: declaration -> declaration_specifiers . [;,;] {bool}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {bool}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {char}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {char}
building new item: declaration -> declaration_specifiers . [;,;] {char}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {char}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {complex}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {complex}
building new item: declaration -> declaration_specifiers . [;,;] {complex}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {complex}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {const}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {const}
building new item: declaration -> declaration_specifiers . [;,;] {const}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {const}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {double}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {double}
building new item: declaration -> declaration_specifiers . [;,;] {double}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {double}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {enum}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {enum}
building new item: declaration -> declaration_specifiers . [;,;] {enum}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {enum}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {extern}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {extern}
building new item: declaration -> declaration_specifiers . [;,;] {extern}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {extern}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {float}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {float}
building new item: declaration -> declaration_specifiers . [;,;] {float}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {float}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {imaginary}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {imaginary}
building new item: declaration -> declaration_specifiers . [;,;] {imaginary}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {imaginary}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {inline}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {inline}
building new item: declaration -> declaration_specifiers . [;,;] {inline}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {inline}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {int}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {int}
building new item: declaration -> declaration_specifiers . [;,;] {int}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {int}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {long}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {long}
building new item: declaration -> declaration_specifiers . [;,;] {long}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {long}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {register}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {register}
building new item: declaration -> declaration_specifiers . [;,;] {register}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {register}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {restrict}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {restrict}
building new item: declaration -> declaration_specifiers . [;,;] {restrict}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {restrict}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {short}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {short}
building new item: declaration -> declaration_specifiers . [;,;] {short}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {short}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {signed}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {signed}
building new item: declaration -> declaration_specifiers . [;,;] {signed}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {signed}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {static}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {static}
building new item: declaration -> declaration_specifiers . [;,;] {static}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {static}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {struct}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {struct}
building new item: declaration -> declaration_specifiers . [;,;] {struct}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {struct}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {typedef}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {typedef}
building new item: declaration -> declaration_specifiers . [;,;] {typedef}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {typedef}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {union}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {union}
building new item: declaration -> declaration_specifiers . [;,;] {union}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {union}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {unsigned}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {unsigned}
building new item: declaration -> declaration_specifiers . [;,;] {unsigned}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {unsigned}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {void}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {void}
building new item: declaration -> declaration_specifiers . [;,;] {void}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {void}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {volatile}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {volatile}
building new item: declaration -> declaration_specifiers . [;,;] {volatile}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {volatile}
closure post reduce
LOOP: 3, token: id, token_value: foo
[verbose dump (every loop)]
parser state:
current token: id, value: foo
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
 state stack (kernel items of top state only):
  state 1
   kernel items:
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {$}
    function_definition -> declaration_specifiers . declarator compound_statement {$}
    declaration -> declaration_specifiers . [;,;] {$}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {$}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {TYPE_NAME}
    function_definition -> declaration_specifiers . declarator compound_statement {TYPE_NAME}
    declaration -> declaration_specifiers . [;,;] {TYPE_NAME}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {TYPE_NAME}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {auto}
    function_definition -> declaration_specifiers . declarator compound_statement {auto}
    declaration -> declaration_specifiers . [;,;] {auto}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {auto}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {bool}
    function_definition -> declaration_specifiers . declarator compound_statement {bool}
    declaration -> declaration_specifiers . [;,;] {bool}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {bool}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {char}
    function_definition -> declaration_specifiers . declarator compound_statement {char}
    declaration -> declaration_specifiers . [;,;] {char}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {char}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {complex}
    function_definition -> declaration_specifiers . declarator compound_statement {complex}
    declaration -> declaration_specifiers . [;,;] {complex}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {complex}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {const}
    function_definition -> declaration_specifiers . declarator compound_statement {const}
    declaration -> declaration_specifiers . [;,;] {const}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {const}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {double}
    function_definition -> declaration_specifiers . declarator compound_statement {double}
    declaration -> declaration_specifiers . [;,;] {double}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {double}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {enum}
    function_definition -> declaration_specifiers . declarator compound_statement {enum}
    declaration -> declaration_specifiers . [;,;] {enum}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {enum}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {extern}
    function_definition -> declaration_specifiers . declarator compound_statement {extern}
    declaration -> declaration_specifiers . [;,;] {extern}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {extern}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {float}
    function_definition -> declaration_specifiers . declarator compound_statement {float}
    declaration -> declaration_specifiers . [;,;] {float}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {float}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {imaginary}
    function_definition -> declaration_specifiers . declarator compound_statement {imaginary}
    declaration -> declaration_specifiers . [;,;] {imaginary}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {imaginary}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {inline}
    function_definition -> declaration_specifiers . declarator compound_statement {inline}
    declaration -> declaration_specifiers . [;,;] {inline}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {inline}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {int}
    function_definition -> declaration_specifiers . declarator compound_statement {int}
    declaration -> declaration_specifiers . [;,;] {int}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {int}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {long}
    function_definition -> declaration_specifiers . declarator compound_statement {long}
    declaration -> declaration_specifiers . [;,;] {long}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {long}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {register}
    function_definition -> declaration_specifiers . declarator compound_statement {register}
    declaration -> declaration_specifiers . [;,;] {register}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {register}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {restrict}
    function_definition -> declaration_specifiers . declarator compound_statement {restrict}
    declaration -> declaration_specifiers . [;,;] {restrict}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {restrict}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {short}
    function_definition -> declaration_specifiers . declarator compound_statement {short}
    declaration -> declaration_specifiers . [;,;] {short}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {short}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {signed}
    function_definition -> declaration_specifiers . declarator compound_statement {signed}
    declaration -> declaration_specifiers . [;,;] {signed}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {signed}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {static}
    function_definition -> declaration_specifiers . declarator compound_statement {static}
    declaration -> declaration_specifiers . [;,;] {static}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {static}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {struct}
    function_definition -> declaration_specifiers . declarator compound_statement {struct}
    declaration -> declaration_specifiers . [;,;] {struct}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {struct}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {typedef}
    function_definition -> declaration_specifiers . declarator compound_statement {typedef}
    declaration -> declaration_specifiers . [;,;] {typedef}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {typedef}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {union}
    function_definition -> declaration_specifiers . declarator compound_statement {union}
    declaration -> declaration_specifiers . [;,;] {union}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {union}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {unsigned}
    function_definition -> declaration_specifiers . declarator compound_statement {unsigned}
    declaration -> declaration_specifiers . [;,;] {unsigned}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {unsigned}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {void}
    function_definition -> declaration_specifiers . declarator compound_statement {void}
    declaration -> declaration_specifiers . [;,;] {void}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {void}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {volatile}
    function_definition -> declaration_specifiers . declarator compound_statement {volatile}
    declaration -> declaration_specifiers . [;,;] {volatile}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {volatile}
check: shift direct_declarator -> . [id,id] {TYPE_NAME}
check: shift direct_declarator -> . [id,id] {auto}
check: shift direct_declarator -> . [id,id] {bool}
check: shift direct_declarator -> . [id,id] {char}
check: shift direct_declarator -> . [id,id] {complex}
check: shift direct_declarator -> . [id,id] {const}
check: shift direct_declarator -> . [id,id] {double}
check: shift direct_declarator -> . [id,id] {enum}
check: shift direct_declarator -> . [id,id] {extern}
check: shift direct_declarator -> . [id,id] {float}
check: shift direct_declarator -> . [id,id] {imaginary}
check: shift direct_declarator -> . [id,id] {inline}
check: shift direct_declarator -> . [id,id] {int}
check: shift direct_declarator -> . [id,id] {long}
check: shift direct_declarator -> . [id,id] {register}
check: shift direct_declarator -> . [id,id] {restrict}
check: shift direct_declarator -> . [id,id] {short}
check: shift direct_declarator -> . [id,id] {signed}
check: shift direct_declarator -> . [id,id] {static}
check: shift direct_declarator -> . [id,id] {struct}
check: shift direct_declarator -> . [id,id] {typedef}
check: shift direct_declarator -> . [id,id] {union}
check: shift direct_declarator -> . [id,id] {unsigned}
check: shift direct_declarator -> . [id,id] {void}
check: shift direct_declarator -> . [id,id] {volatile}
check: shift direct_declarator -> . [id,id] {{}
check: shift direct_declarator -> . [id,id] {[}
check: shift direct_declarator -> . [id,id] {(}
check: shift direct_declarator -> . [id,id] {;}
check: shift direct_declarator -> . [id,id] {=}
check: shift direct_declarator -> . [id,id] {,}
shifts: 31, reduces: 0, accepts: 0
shifting [id,foo]
building new item: direct_declarator -> [id,id] . {TYPE_NAME}
building new item: direct_declarator -> [id,id] . {auto}
building new item: direct_declarator -> [id,id] . {bool}
building new item: direct_declarator -> [id,id] . {char}
building new item: direct_declarator -> [id,id] . {complex}
building new item: direct_declarator -> [id,id] . {const}
building new item: direct_declarator -> [id,id] . {double}
building new item: direct_declarator -> [id,id] . {enum}
building new item: direct_declarator -> [id,id] . {extern}
building new item: direct_declarator -> [id,id] . {float}
building new item: direct_declarator -> [id,id] . {imaginary}
building new item: direct_declarator -> [id,id] . {inline}
building new item: direct_declarator -> [id,id] . {int}
building new item: direct_declarator -> [id,id] . {long}
building new item: direct_declarator -> [id,id] . {register}
building new item: direct_declarator -> [id,id] . {restrict}
building new item: direct_declarator -> [id,id] . {short}
building new item: direct_declarator -> [id,id] . {signed}
building new item: direct_declarator -> [id,id] . {static}
building new item: direct_declarator -> [id,id] . {struct}
building new item: direct_declarator -> [id,id] . {typedef}
building new item: direct_declarator -> [id,id] . {union}
building new item: direct_declarator -> [id,id] . {unsigned}
building new item: direct_declarator -> [id,id] . {void}
building new item: direct_declarator -> [id,id] . {volatile}
building new item: direct_declarator -> [id,id] . {{}
building new item: direct_declarator -> [id,id] . {[}
building new item: direct_declarator -> [id,id] . {(}
building new item: direct_declarator -> [id,id] . {;}
building new item: direct_declarator -> [id,id] . {=}
building new item: direct_declarator -> [id,id] . {,}
closure post shift
LOOP: 4, token: (, token_value: (
[verbose dump (every loop)]
parser state:
current token: (, value: (
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [id,foo]
 state stack (kernel items of top state only):
  state 2
   kernel items:
    direct_declarator -> [id,id] . {TYPE_NAME}
    direct_declarator -> [id,id] . {auto}
    direct_declarator -> [id,id] . {bool}
    direct_declarator -> [id,id] . {char}
    direct_declarator -> [id,id] . {complex}
    direct_declarator -> [id,id] . {const}
    direct_declarator -> [id,id] . {double}
    direct_declarator -> [id,id] . {enum}
    direct_declarator -> [id,id] . {extern}
    direct_declarator -> [id,id] . {float}
    direct_declarator -> [id,id] . {imaginary}
    direct_declarator -> [id,id] . {inline}
    direct_declarator -> [id,id] . {int}
    direct_declarator -> [id,id] . {long}
    direct_declarator -> [id,id] . {register}
    direct_declarator -> [id,id] . {restrict}
    direct_declarator -> [id,id] . {short}
    direct_declarator -> [id,id] . {signed}
    direct_declarator -> [id,id] . {static}
    direct_declarator -> [id,id] . {struct}
    direct_declarator -> [id,id] . {typedef}
    direct_declarator -> [id,id] . {union}
    direct_declarator -> [id,id] . {unsigned}
    direct_declarator -> [id,id] . {void}
    direct_declarator -> [id,id] . {volatile}
    direct_declarator -> [id,id] . {{}
    direct_declarator -> [id,id] . {[}
    direct_declarator -> [id,id] . {(}
    direct_declarator -> [id,id] . {;}
    direct_declarator -> [id,id] . {=}
    direct_declarator -> [id,id] . {,}
check: reduce direct_declarator -> [id,id] . {(}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: direct_declarator -> [id,id] . {TYPE_NAME}
trying to reduce by: direct_declarator -> [id,id] . {auto}
trying to reduce by: direct_declarator -> [id,id] . {bool}
trying to reduce by: direct_declarator -> [id,id] . {char}
trying to reduce by: direct_declarator -> [id,id] . {complex}
trying to reduce by: direct_declarator -> [id,id] . {const}
trying to reduce by: direct_declarator -> [id,id] . {double}
trying to reduce by: direct_declarator -> [id,id] . {enum}
trying to reduce by: direct_declarator -> [id,id] . {extern}
trying to reduce by: direct_declarator -> [id,id] . {float}
trying to reduce by: direct_declarator -> [id,id] . {imaginary}
trying to reduce by: direct_declarator -> [id,id] . {inline}
trying to reduce by: direct_declarator -> [id,id] . {int}
trying to reduce by: direct_declarator -> [id,id] . {long}
trying to reduce by: direct_declarator -> [id,id] . {register}
trying to reduce by: direct_declarator -> [id,id] . {restrict}
trying to reduce by: direct_declarator -> [id,id] . {short}
trying to reduce by: direct_declarator -> [id,id] . {signed}
trying to reduce by: direct_declarator -> [id,id] . {static}
trying to reduce by: direct_declarator -> [id,id] . {struct}
trying to reduce by: direct_declarator -> [id,id] . {typedef}
trying to reduce by: direct_declarator -> [id,id] . {union}
trying to reduce by: direct_declarator -> [id,id] . {unsigned}
trying to reduce by: direct_declarator -> [id,id] . {void}
trying to reduce by: direct_declarator -> [id,id] . {volatile}
trying to reduce by: direct_declarator -> [id,id] . {{}
trying to reduce by: direct_declarator -> [id,id] . {[}
trying to reduce by: direct_declarator -> [id,id] . {(}
reduce: direct_declarator -> foo 
reduce item: direct_declarator -> [id,id] . {(}
building new item: declarator -> direct_declarator . {TYPE_NAME}
building new item: declarator -> direct_declarator . {auto}
building new item: declarator -> direct_declarator . {bool}
building new item: declarator -> direct_declarator . {char}
building new item: declarator -> direct_declarator . {complex}
building new item: declarator -> direct_declarator . {const}
building new item: declarator -> direct_declarator . {double}
building new item: declarator -> direct_declarator . {enum}
building new item: declarator -> direct_declarator . {extern}
building new item: declarator -> direct_declarator . {float}
building new item: declarator -> direct_declarator . {imaginary}
building new item: declarator -> direct_declarator . {inline}
building new item: declarator -> direct_declarator . {int}
building new item: declarator -> direct_declarator . {long}
building new item: declarator -> direct_declarator . {register}
building new item: declarator -> direct_declarator . {restrict}
building new item: declarator -> direct_declarator . {short}
building new item: declarator -> direct_declarator . {signed}
building new item: declarator -> direct_declarator . {static}
building new item: declarator -> direct_declarator . {struct}
building new item: declarator -> direct_declarator . {typedef}
building new item: declarator -> direct_declarator . {union}
building new item: declarator -> direct_declarator . {unsigned}
building new item: declarator -> direct_declarator . {void}
building new item: declarator -> direct_declarator . {volatile}
building new item: declarator -> direct_declarator . {{}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {auto}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {auto}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {auto}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {bool}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {bool}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {bool}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {char}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {char}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {char}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {char}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {char}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {char}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {char}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {char}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {char}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {char}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {char}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {complex}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {complex}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {complex}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {const}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {const}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {const}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {const}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {const}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {const}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {const}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {const}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {const}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {const}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {const}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {double}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {double}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {double}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {double}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {double}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {double}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {double}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {double}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {double}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {double}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {double}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {enum}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {enum}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {enum}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {extern}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {extern}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {extern}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {float}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {float}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {float}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {float}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {float}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {float}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {float}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {float}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {float}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {float}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {float}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {imaginary}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {imaginary}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {inline}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {inline}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {inline}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {int}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {int}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {int}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {int}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {int}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {int}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {int}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {int}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {int}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {int}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {int}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {long}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {long}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {long}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {long}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {long}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {long}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {long}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {long}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {long}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {long}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {long}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {register}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {register}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {register}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {register}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {register}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {register}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {register}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {register}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {register}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {register}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {register}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {restrict}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {restrict}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {short}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {short}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {short}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {short}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {short}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {short}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {short}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {short}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {short}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {short}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {short}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {signed}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {signed}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {signed}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {static}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {static}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {static}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {static}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {static}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {static}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {static}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {static}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {static}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {static}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {static}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {struct}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {struct}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {struct}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {typedef}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {typedef}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {union}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {union}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {union}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {union}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {union}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {union}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {union}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {union}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {union}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {union}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {union}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {unsigned}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {unsigned}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {void}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {void}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {void}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {void}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {void}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {void}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {void}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {void}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {void}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {void}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {void}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {volatile}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {volatile}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {{}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {{}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {{}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {{}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {{}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {{}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {{}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {{}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {{}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {{}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {{}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {[}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {[}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {[}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {(}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {(}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {(}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {(}
building new item: declarator -> direct_declarator . {;}
building new item: declarator -> direct_declarator . {=}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {;}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {;}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {;}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {;}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {;}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {;}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {;}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {;}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {;}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {;}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {;}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {=}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {=}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {=}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {=}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {=}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {=}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {=}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {=}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {=}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {=}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {=}
building new item: declarator -> direct_declarator . {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {,}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {,}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {,}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {,}
closure post reduce
LOOP: 5, token: (, token_value: (
[verbose dump (every loop)]
parser state:
current token: (, value: (
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
 state stack (kernel items of top state only):
  state 2
   kernel items:
    declarator -> direct_declarator . {TYPE_NAME}
    declarator -> direct_declarator . {auto}
    declarator -> direct_declarator . {bool}
    declarator -> direct_declarator . {char}
    declarator -> direct_declarator . {complex}
    declarator -> direct_declarator . {const}
    declarator -> direct_declarator . {double}
    declarator -> direct_declarator . {enum}
    declarator -> direct_declarator . {extern}
    declarator -> direct_declarator . {float}
    declarator -> direct_declarator . {imaginary}
    declarator -> direct_declarator . {inline}
    declarator -> direct_declarator . {int}
    declarator -> direct_declarator . {long}
    declarator -> direct_declarator . {register}
    declarator -> direct_declarator . {restrict}
    declarator -> direct_declarator . {short}
    declarator -> direct_declarator . {signed}
    declarator -> direct_declarator . {static}
    declarator -> direct_declarator . {struct}
    declarator -> direct_declarator . {typedef}
    declarator -> direct_declarator . {union}
    declarator -> direct_declarator . {unsigned}
    declarator -> direct_declarator . {void}
    declarator -> direct_declarator . {volatile}
    declarator -> direct_declarator . {{}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {TYPE_NAME}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {TYPE_NAME}
    direct_declarator -> direct_declarator . [(,(] [),)] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {auto}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {auto}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {auto}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {auto}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {auto}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {auto}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {auto}
    direct_declarator -> direct_declarator . [[,[] [],]] {auto}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {auto}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {auto}
    direct_declarator -> direct_declarator . [(,(] [),)] {auto}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {bool}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {bool}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {bool}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {bool}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {bool}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {bool}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {bool}
    direct_declarator -> direct_declarator . [[,[] [],]] {bool}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {bool}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {bool}
    direct_declarator -> direct_declarator . [(,(] [),)] {bool}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {char}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {char}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {char}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {char}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {char}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {char}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {char}
    direct_declarator -> direct_declarator . [[,[] [],]] {char}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {char}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {char}
    direct_declarator -> direct_declarator . [(,(] [),)] {char}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {complex}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {complex}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {complex}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {complex}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {complex}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {complex}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {complex}
    direct_declarator -> direct_declarator . [[,[] [],]] {complex}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {complex}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {complex}
    direct_declarator -> direct_declarator . [(,(] [),)] {complex}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {const}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {const}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {const}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {const}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {const}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {const}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {const}
    direct_declarator -> direct_declarator . [[,[] [],]] {const}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {const}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {const}
    direct_declarator -> direct_declarator . [(,(] [),)] {const}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {double}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {double}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {double}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {double}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {double}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {double}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {double}
    direct_declarator -> direct_declarator . [[,[] [],]] {double}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {double}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {double}
    direct_declarator -> direct_declarator . [(,(] [),)] {double}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {enum}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {enum}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {enum}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {enum}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {enum}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {enum}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {enum}
    direct_declarator -> direct_declarator . [[,[] [],]] {enum}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {enum}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {enum}
    direct_declarator -> direct_declarator . [(,(] [),)] {enum}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {extern}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {extern}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {extern}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {extern}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {extern}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {extern}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {extern}
    direct_declarator -> direct_declarator . [[,[] [],]] {extern}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {extern}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {extern}
    direct_declarator -> direct_declarator . [(,(] [),)] {extern}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {float}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {float}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {float}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {float}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {float}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {float}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {float}
    direct_declarator -> direct_declarator . [[,[] [],]] {float}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {float}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {float}
    direct_declarator -> direct_declarator . [(,(] [),)] {float}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {imaginary}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {imaginary}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {imaginary}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {imaginary}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {imaginary}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {imaginary}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {imaginary}
    direct_declarator -> direct_declarator . [[,[] [],]] {imaginary}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {imaginary}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {imaginary}
    direct_declarator -> direct_declarator . [(,(] [),)] {imaginary}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {inline}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {inline}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {inline}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {inline}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {inline}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {inline}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {inline}
    direct_declarator -> direct_declarator . [[,[] [],]] {inline}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {inline}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {inline}
    direct_declarator -> direct_declarator . [(,(] [),)] {inline}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {int}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {int}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {int}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {int}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {int}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {int}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {int}
    direct_declarator -> direct_declarator . [[,[] [],]] {int}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {int}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {int}
    direct_declarator -> direct_declarator . [(,(] [),)] {int}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {long}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {long}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {long}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {long}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {long}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {long}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {long}
    direct_declarator -> direct_declarator . [[,[] [],]] {long}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {long}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {long}
    direct_declarator -> direct_declarator . [(,(] [),)] {long}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {register}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {register}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {register}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {register}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {register}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {register}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {register}
    direct_declarator -> direct_declarator . [[,[] [],]] {register}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {register}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {register}
    direct_declarator -> direct_declarator . [(,(] [),)] {register}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {restrict}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {restrict}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {restrict}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {restrict}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {restrict}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {restrict}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {restrict}
    direct_declarator -> direct_declarator . [[,[] [],]] {restrict}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {restrict}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {restrict}
    direct_declarator -> direct_declarator . [(,(] [),)] {restrict}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {short}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {short}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {short}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {short}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {short}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {short}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {short}
    direct_declarator -> direct_declarator . [[,[] [],]] {short}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {short}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {short}
    direct_declarator -> direct_declarator . [(,(] [),)] {short}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {signed}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {signed}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {signed}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {signed}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {signed}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {signed}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {signed}
    direct_declarator -> direct_declarator . [[,[] [],]] {signed}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {signed}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {signed}
    direct_declarator -> direct_declarator . [(,(] [),)] {signed}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {static}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {static}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {static}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {static}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {static}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {static}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {static}
    direct_declarator -> direct_declarator . [[,[] [],]] {static}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {static}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {static}
    direct_declarator -> direct_declarator . [(,(] [),)] {static}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {struct}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {struct}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {struct}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {struct}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {struct}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {struct}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {struct}
    direct_declarator -> direct_declarator . [[,[] [],]] {struct}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {struct}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {struct}
    direct_declarator -> direct_declarator . [(,(] [),)] {struct}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {typedef}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {typedef}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {typedef}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {typedef}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {typedef}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {typedef}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {typedef}
    direct_declarator -> direct_declarator . [[,[] [],]] {typedef}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {typedef}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {typedef}
    direct_declarator -> direct_declarator . [(,(] [),)] {typedef}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {union}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {union}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {union}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {union}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {union}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {union}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {union}
    direct_declarator -> direct_declarator . [[,[] [],]] {union}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {union}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {union}
    direct_declarator -> direct_declarator . [(,(] [),)] {union}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {unsigned}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {unsigned}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {unsigned}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {unsigned}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {unsigned}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {unsigned}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {unsigned}
    direct_declarator -> direct_declarator . [[,[] [],]] {unsigned}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {unsigned}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {unsigned}
    direct_declarator -> direct_declarator . [(,(] [),)] {unsigned}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {void}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {void}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {void}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {void}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {void}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {void}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {void}
    direct_declarator -> direct_declarator . [[,[] [],]] {void}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {void}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {void}
    direct_declarator -> direct_declarator . [(,(] [),)] {void}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {volatile}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {volatile}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {volatile}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {volatile}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {volatile}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {volatile}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {volatile}
    direct_declarator -> direct_declarator . [[,[] [],]] {volatile}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {volatile}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {volatile}
    direct_declarator -> direct_declarator . [(,(] [),)] {volatile}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {{}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {{}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {{}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {{}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {{}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {{}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {{}
    direct_declarator -> direct_declarator . [[,[] [],]] {{}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {{}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {{}
    direct_declarator -> direct_declarator . [(,(] [),)] {{}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {[}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {[}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {[}
    direct_declarator -> direct_declarator . [[,[] [],]] {[}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {[}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {[}
    direct_declarator -> direct_declarator . [(,(] [),)] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {(}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {(}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {(}
    direct_declarator -> direct_declarator . [[,[] [],]] {(}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {(}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {(}
    direct_declarator -> direct_declarator . [(,(] [),)] {(}
    declarator -> direct_declarator . {;}
    declarator -> direct_declarator . {=}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {;}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {;}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {;}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {;}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {;}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {;}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {;}
    direct_declarator -> direct_declarator . [[,[] [],]] {;}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {;}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {;}
    direct_declarator -> direct_declarator . [(,(] [),)] {;}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {=}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {=}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {=}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {=}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {=}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {=}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {=}
    direct_declarator -> direct_declarator . [[,[] [],]] {=}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {=}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {=}
    direct_declarator -> direct_declarator . [(,(] [),)] {=}
    declarator -> direct_declarator . {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {,}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {,}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {,}
    direct_declarator -> direct_declarator . [[,[] [],]] {,}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {,}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {,}
    direct_declarator -> direct_declarator . [(,(] [),)] {,}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {TYPE_NAME}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {TYPE_NAME}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {TYPE_NAME}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {auto}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {auto}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {auto}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {bool}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {bool}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {bool}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {char}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {char}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {char}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {complex}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {complex}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {complex}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {const}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {const}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {const}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {double}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {double}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {double}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {enum}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {enum}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {enum}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {extern}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {extern}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {extern}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {float}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {float}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {float}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {imaginary}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {imaginary}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {imaginary}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {inline}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {inline}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {inline}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {int}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {int}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {int}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {long}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {long}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {long}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {register}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {register}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {register}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {restrict}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {restrict}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {restrict}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {short}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {short}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {short}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {signed}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {signed}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {signed}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {static}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {static}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {static}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {struct}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {struct}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {struct}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {typedef}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {typedef}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {typedef}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {union}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {union}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {union}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {unsigned}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {unsigned}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {unsigned}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {void}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {void}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {void}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {volatile}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {volatile}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {volatile}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {{}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {{}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {{}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {[}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {[}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {[}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {(}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {(}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {(}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {;}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {;}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {;}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {=}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {=}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {=}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {,}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {,}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {,}
shifts: 93, reduces: 0, accepts: 0
shifting [(,(]
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {auto}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {auto}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {auto}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {bool}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {bool}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {bool}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {char}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {char}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {char}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {complex}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {complex}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {complex}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {const}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {const}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {const}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {double}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {double}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {double}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {enum}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {enum}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {enum}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {extern}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {extern}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {extern}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {float}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {float}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {float}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {imaginary}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {imaginary}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {imaginary}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {inline}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {inline}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {inline}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {int}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {int}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {int}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {long}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {long}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {long}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {register}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {register}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {register}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {restrict}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {restrict}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {restrict}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {short}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {short}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {short}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {signed}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {signed}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {signed}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {static}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {static}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {static}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {struct}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {struct}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {struct}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {typedef}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {typedef}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {typedef}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {union}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {union}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {union}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {unsigned}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {unsigned}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {unsigned}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {void}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {void}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {void}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {volatile}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {volatile}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {volatile}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {{}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {{}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {{}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {[}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {[}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {[}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {(}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {(}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {(}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {;}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {;}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {;}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {=}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {=}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {=}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {,}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {,}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {,}
closure post shift
LOOP: 6, token: int, token_value: int
[verbose dump (every loop)]
parser state:
current token: int, value: int
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
 state stack (kernel items of top state only):
  state 3
   kernel items:
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {TYPE_NAME}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {TYPE_NAME}
    direct_declarator -> direct_declarator [(,(] . [),)] {TYPE_NAME}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {auto}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {auto}
    direct_declarator -> direct_declarator [(,(] . [),)] {auto}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {bool}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {bool}
    direct_declarator -> direct_declarator [(,(] . [),)] {bool}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {char}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {char}
    direct_declarator -> direct_declarator [(,(] . [),)] {char}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {complex}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {complex}
    direct_declarator -> direct_declarator [(,(] . [),)] {complex}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {const}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {const}
    direct_declarator -> direct_declarator [(,(] . [),)] {const}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {double}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {double}
    direct_declarator -> direct_declarator [(,(] . [),)] {double}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {enum}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {enum}
    direct_declarator -> direct_declarator [(,(] . [),)] {enum}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {extern}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {extern}
    direct_declarator -> direct_declarator [(,(] . [),)] {extern}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {float}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {float}
    direct_declarator -> direct_declarator [(,(] . [),)] {float}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {imaginary}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {imaginary}
    direct_declarator -> direct_declarator [(,(] . [),)] {imaginary}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {inline}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {inline}
    direct_declarator -> direct_declarator [(,(] . [),)] {inline}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {int}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {int}
    direct_declarator -> direct_declarator [(,(] . [),)] {int}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {long}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {long}
    direct_declarator -> direct_declarator [(,(] . [),)] {long}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {register}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {register}
    direct_declarator -> direct_declarator [(,(] . [),)] {register}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {restrict}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {restrict}
    direct_declarator -> direct_declarator [(,(] . [),)] {restrict}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {short}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {short}
    direct_declarator -> direct_declarator [(,(] . [),)] {short}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {signed}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {signed}
    direct_declarator -> direct_declarator [(,(] . [),)] {signed}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {static}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {static}
    direct_declarator -> direct_declarator [(,(] . [),)] {static}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {struct}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {struct}
    direct_declarator -> direct_declarator [(,(] . [),)] {struct}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {typedef}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {typedef}
    direct_declarator -> direct_declarator [(,(] . [),)] {typedef}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {union}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {union}
    direct_declarator -> direct_declarator [(,(] . [),)] {union}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {unsigned}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {unsigned}
    direct_declarator -> direct_declarator [(,(] . [),)] {unsigned}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {void}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {void}
    direct_declarator -> direct_declarator [(,(] . [),)] {void}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {volatile}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {volatile}
    direct_declarator -> direct_declarator [(,(] . [),)] {volatile}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {{}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {{}
    direct_declarator -> direct_declarator [(,(] . [),)] {{}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {[}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {[}
    direct_declarator -> direct_declarator [(,(] . [),)] {[}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {(}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {(}
    direct_declarator -> direct_declarator [(,(] . [),)] {(}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {;}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {;}
    direct_declarator -> direct_declarator [(,(] . [),)] {;}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {=}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {=}
    direct_declarator -> direct_declarator [(,(] . [),)] {=}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {,}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {,}
    direct_declarator -> direct_declarator [(,(] . [),)] {,}
check: shift type_specifier -> . [int,int] {(}
check: shift type_specifier -> . [int,int] {*}
check: shift type_specifier -> . [int,int] {id}
check: shift type_specifier -> . [int,int] {TYPE_NAME}
check: shift type_specifier -> . [int,int] {auto}
check: shift type_specifier -> . [int,int] {bool}
check: shift type_specifier -> . [int,int] {char}
check: shift type_specifier -> . [int,int] {complex}
check: shift type_specifier -> . [int,int] {const}
check: shift type_specifier -> . [int,int] {double}
check: shift type_specifier -> . [int,int] {enum}
check: shift type_specifier -> . [int,int] {extern}
check: shift type_specifier -> . [int,int] {float}
check: shift type_specifier -> . [int,int] {imaginary}
check: shift type_specifier -> . [int,int] {inline}
check: shift type_specifier -> . [int,int] {int}
check: shift type_specifier -> . [int,int] {long}
check: shift type_specifier -> . [int,int] {register}
check: shift type_specifier -> . [int,int] {restrict}
check: shift type_specifier -> . [int,int] {short}
check: shift type_specifier -> . [int,int] {signed}
check: shift type_specifier -> . [int,int] {static}
check: shift type_specifier -> . [int,int] {struct}
check: shift type_specifier -> . [int,int] {typedef}
check: shift type_specifier -> . [int,int] {union}
check: shift type_specifier -> . [int,int] {unsigned}
check: shift type_specifier -> . [int,int] {void}
check: shift type_specifier -> . [int,int] {volatile}
check: shift type_specifier -> . [int,int] {[}
check: shift type_specifier -> . [int,int] {)}
check: shift type_specifier -> . [int,int] {,}
shifts: 31, reduces: 0, accepts: 0
shifting [int,int]
building new item: type_specifier -> [int,int] . {(}
building new item: type_specifier -> [int,int] . {*}
building new item: type_specifier -> [int,int] . {id}
building new item: type_specifier -> [int,int] . {TYPE_NAME}
building new item: type_specifier -> [int,int] . {auto}
building new item: type_specifier -> [int,int] . {bool}
building new item: type_specifier -> [int,int] . {char}
building new item: type_specifier -> [int,int] . {complex}
building new item: type_specifier -> [int,int] . {const}
building new item: type_specifier -> [int,int] . {double}
building new item: type_specifier -> [int,int] . {enum}
building new item: type_specifier -> [int,int] . {extern}
building new item: type_specifier -> [int,int] . {float}
building new item: type_specifier -> [int,int] . {imaginary}
building new item: type_specifier -> [int,int] . {inline}
building new item: type_specifier -> [int,int] . {int}
building new item: type_specifier -> [int,int] . {long}
building new item: type_specifier -> [int,int] . {register}
building new item: type_specifier -> [int,int] . {restrict}
building new item: type_specifier -> [int,int] . {short}
building new item: type_specifier -> [int,int] . {signed}
building new item: type_specifier -> [int,int] . {static}
building new item: type_specifier -> [int,int] . {struct}
building new item: type_specifier -> [int,int] . {typedef}
building new item: type_specifier -> [int,int] . {union}
building new item: type_specifier -> [int,int] . {unsigned}
building new item: type_specifier -> [int,int] . {void}
building new item: type_specifier -> [int,int] . {volatile}
building new item: type_specifier -> [int,int] . {[}
building new item: type_specifier -> [int,int] . {)}
building new item: type_specifier -> [int,int] . {,}
closure post shift
LOOP: 7, token: id, token_value: x
[verbose dump (every loop)]
parser state:
current token: id, value: x
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [int,int]
 state stack (kernel items of top state only):
  state 4
   kernel items:
    type_specifier -> [int,int] . {(}
    type_specifier -> [int,int] . {*}
    type_specifier -> [int,int] . {id}
    type_specifier -> [int,int] . {TYPE_NAME}
    type_specifier -> [int,int] . {auto}
    type_specifier -> [int,int] . {bool}
    type_specifier -> [int,int] . {char}
    type_specifier -> [int,int] . {complex}
    type_specifier -> [int,int] . {const}
    type_specifier -> [int,int] . {double}
    type_specifier -> [int,int] . {enum}
    type_specifier -> [int,int] . {extern}
    type_specifier -> [int,int] . {float}
    type_specifier -> [int,int] . {imaginary}
    type_specifier -> [int,int] . {inline}
    type_specifier -> [int,int] . {int}
    type_specifier -> [int,int] . {long}
    type_specifier -> [int,int] . {register}
    type_specifier -> [int,int] . {restrict}
    type_specifier -> [int,int] . {short}
    type_specifier -> [int,int] . {signed}
    type_specifier -> [int,int] . {static}
    type_specifier -> [int,int] . {struct}
    type_specifier -> [int,int] . {typedef}
    type_specifier -> [int,int] . {union}
    type_specifier -> [int,int] . {unsigned}
    type_specifier -> [int,int] . {void}
    type_specifier -> [int,int] . {volatile}
    type_specifier -> [int,int] . {[}
    type_specifier -> [int,int] . {)}
    type_specifier -> [int,int] . {,}
check: reduce type_specifier -> [int,int] . {id}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: type_specifier -> [int,int] . {(}
trying to reduce by: type_specifier -> [int,int] . {*}
trying to reduce by: type_specifier -> [int,int] . {id}
reduce: type_specifier -> int 
reduce item: type_specifier -> [int,int] . {id}
building new item: declaration_specifiers -> type_specifier . {(}
building new item: declaration_specifiers -> type_specifier . {*}
building new item: declaration_specifiers -> type_specifier . {id}
building new item: declaration_specifiers -> type_specifier . declaration_specifiers {(}
building new item: declaration_specifiers -> type_specifier . declaration_specifiers {*}
building new item: declaration_specifiers -> type_specifier . declaration_specifiers {id}
building new item: declaration_specifiers -> type_specifier . {[}
building new item: declaration_specifiers -> type_specifier . declaration_specifiers {[}
building new item: declaration_specifiers -> type_specifier . {)}
building new item: declaration_specifiers -> type_specifier . declaration_specifiers {)}
building new item: declaration_specifiers -> type_specifier . {,}
building new item: declaration_specifiers -> type_specifier . declaration_specifiers {,}
closure post reduce
LOOP: 8, token: id, token_value: x
[verbose dump (every loop)]
parser state:
current token: id, value: x
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [type_specifier,type_specifier]
 state stack (kernel items of top state only):
  state 4
   kernel items:
    declaration_specifiers -> type_specifier . {(}
    declaration_specifiers -> type_specifier . {*}
    declaration_specifiers -> type_specifier . {id}
    declaration_specifiers -> type_specifier . declaration_specifiers {(}
    declaration_specifiers -> type_specifier . declaration_specifiers {*}
    declaration_specifiers -> type_specifier . declaration_specifiers {id}
    declaration_specifiers -> type_specifier . {[}
    declaration_specifiers -> type_specifier . declaration_specifiers {[}
    declaration_specifiers -> type_specifier . {)}
    declaration_specifiers -> type_specifier . declaration_specifiers {)}
    declaration_specifiers -> type_specifier . {,}
    declaration_specifiers -> type_specifier . declaration_specifiers {,}
check: reduce declaration_specifiers -> type_specifier . {id}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: declaration_specifiers -> type_specifier . {(}
trying to reduce by: declaration_specifiers -> type_specifier . {*}
trying to reduce by: declaration_specifiers -> type_specifier . {id}
reduce: declaration_specifiers -> int 
reduce item: declaration_specifiers -> type_specifier . {id}
building new item: parameter_declaration -> declaration_specifiers . declarator {)}
building new item: parameter_declaration -> declaration_specifiers . abstract_declarator {)}
building new item: parameter_declaration -> declaration_specifiers . {)}
building new item: parameter_declaration -> declaration_specifiers . declarator {,}
building new item: parameter_declaration -> declaration_specifiers . abstract_declarator {,}
building new item: parameter_declaration -> declaration_specifiers . {,}
closure post reduce
LOOP: 9, token: id, token_value: x
[verbose dump (every loop)]
parser state:
current token: id, value: x
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [declaration_specifiers,declaration_specifiers]
 state stack (kernel items of top state only):
  state 4
   kernel items:
    parameter_declaration -> declaration_specifiers . declarator {)}
    parameter_declaration -> declaration_specifiers . abstract_declarator {)}
    parameter_declaration -> declaration_specifiers . {)}
    parameter_declaration -> declaration_specifiers . declarator {,}
    parameter_declaration -> declaration_specifiers . abstract_declarator {,}
    parameter_declaration -> declaration_specifiers . {,}
check: shift direct_declarator -> . [id,id] {)}
check: shift direct_declarator -> . [id,id] {,}
check: shift direct_declarator -> . [id,id] {[}
check: shift direct_declarator -> . [id,id] {(}
shifts: 4, reduces: 0, accepts: 0
shifting [id,x]
building new item: direct_declarator -> [id,id] . {)}
building new item: direct_declarator -> [id,id] . {,}
building new item: direct_declarator -> [id,id] . {[}
building new item: direct_declarator -> [id,id] . {(}
closure post shift
LOOP: 10, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [declaration_specifiers,declaration_specifiers]
  [id,x]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    direct_declarator -> [id,id] . {)}
    direct_declarator -> [id,id] . {,}
    direct_declarator -> [id,id] . {[}
    direct_declarator -> [id,id] . {(}
check: reduce direct_declarator -> [id,id] . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: direct_declarator -> [id,id] . {)}
reduce: direct_declarator -> x 
reduce item: direct_declarator -> [id,id] . {)}
building new item: declarator -> direct_declarator . {)}
building new item: declarator -> direct_declarator . {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {)}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {)}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {)}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {)}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {)}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {)}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {)}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {)}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {)}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {)}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {)}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {,}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {,}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {,}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {[}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {[}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {[}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {(}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {(}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {(}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {(}
closure post reduce
LOOP: 11, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    declarator -> direct_declarator . {)}
    declarator -> direct_declarator . {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {)}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {)}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {)}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {)}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {)}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {)}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {)}
    direct_declarator -> direct_declarator . [[,[] [],]] {)}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {)}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {)}
    direct_declarator -> direct_declarator . [(,(] [),)] {)}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {,}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {,}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {,}
    direct_declarator -> direct_declarator . [[,[] [],]] {,}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {,}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {,}
    direct_declarator -> direct_declarator . [(,(] [),)] {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {[}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {[}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {[}
    direct_declarator -> direct_declarator . [[,[] [],]] {[}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {[}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {[}
    direct_declarator -> direct_declarator . [(,(] [),)] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {(}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {(}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {(}
    direct_declarator -> direct_declarator . [[,[] [],]] {(}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {(}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {(}
    direct_declarator -> direct_declarator . [(,(] [),)] {(}
check: reduce declarator -> direct_declarator . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: declarator -> direct_declarator . {)}
reduce: declarator -> x 
reduce item: declarator -> direct_declarator . {)}
building new item: parameter_declaration -> declaration_specifiers declarator . {)}
building new item: parameter_declaration -> declaration_specifiers declarator . {,}
closure post reduce
LOOP: 12, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    parameter_declaration -> declaration_specifiers declarator . {)}
    parameter_declaration -> declaration_specifiers declarator . {,}
check: reduce parameter_declaration -> declaration_specifiers declarator . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: parameter_declaration -> declaration_specifiers declarator . {)}
reduce: parameter_declaration -> int x 
reduce item: parameter_declaration -> declaration_specifiers declarator . {)}
building new item: parameter_list -> parameter_declaration . {)}
building new item: parameter_list -> parameter_declaration . {,}
closure post reduce
LOOP: 13, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [parameter_declaration,parameter_declaration]
 state stack (kernel items of top state only):
  state 4
   kernel items:
    parameter_list -> parameter_declaration . {)}
    parameter_list -> parameter_declaration . {,}
check: reduce parameter_list -> parameter_declaration . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: parameter_list -> parameter_declaration . {)}
reduce: parameter_list -> int x 
reduce item: parameter_list -> parameter_declaration . {)}
building new item: parameter_type_list -> parameter_list . {)}
building new item: parameter_type_list -> parameter_list . [,,,] [...,...] {)}
building new item: parameter_list -> parameter_list . [,,,] parameter_declaration {)}
building new item: parameter_list -> parameter_list . [,,,] parameter_declaration {,}
closure post reduce
LOOP: 14, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [parameter_list,parameter_list]
 state stack (kernel items of top state only):
  state 4
   kernel items:
    parameter_type_list -> parameter_list . {)}
    parameter_type_list -> parameter_list . [,,,] [...,...] {)}
    parameter_list -> parameter_list . [,,,] parameter_declaration {)}
    parameter_list -> parameter_list . [,,,] parameter_declaration {,}
check: reduce parameter_type_list -> parameter_list . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: parameter_type_list -> parameter_list . {)}
reduce: parameter_type_list -> int x 
reduce item: parameter_type_list -> parameter_list . {)}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {auto}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {bool}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {char}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {complex}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {const}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {double}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {enum}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {extern}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {float}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {imaginary}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {inline}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {int}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {long}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {register}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {restrict}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {short}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {signed}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {static}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {struct}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {typedef}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {union}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {unsigned}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {void}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {volatile}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {{}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {[}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {(}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {;}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {=}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {,}
closure post reduce
LOOP: 15, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [parameter_type_list,parameter_type_list]
 state stack (kernel items of top state only):
  state 4
   kernel items:
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {TYPE_NAME}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {auto}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {bool}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {char}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {complex}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {const}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {double}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {enum}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {extern}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {float}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {imaginary}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {inline}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {int}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {long}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {register}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {restrict}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {short}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {signed}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {static}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {struct}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {typedef}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {union}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {unsigned}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {void}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {volatile}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {{}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {[}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {(}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {;}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {=}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {,}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {TYPE_NAME}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {auto}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {bool}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {char}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {complex}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {const}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {double}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {enum}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {extern}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {float}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {imaginary}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {inline}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {int}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {long}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {register}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {restrict}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {short}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {signed}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {static}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {struct}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {typedef}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {union}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {unsigned}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {void}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {volatile}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {{}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {[}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {(}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {;}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {=}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {,}
shifts: 31, reduces: 0, accepts: 0
shifting [),)]
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {TYPE_NAME}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {auto}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {bool}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {char}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {complex}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {const}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {double}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {enum}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {extern}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {float}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {imaginary}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {inline}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {int}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {long}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {register}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {restrict}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {short}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {signed}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {static}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {struct}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {typedef}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {union}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {unsigned}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {void}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {volatile}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {{}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {[}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {(}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {;}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {=}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {,}
closure post shift
LOOP: 16, token: {, token_value: {
[verbose dump (every loop)]
parser state:
current token: {, value: {
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [parameter_type_list,parameter_type_list]
  [),)]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {TYPE_NAME}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {auto}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {bool}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {char}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {complex}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {const}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {double}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {enum}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {extern}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {float}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {imaginary}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {inline}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {int}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {long}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {register}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {restrict}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {short}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {signed}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {static}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {struct}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {typedef}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {union}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {unsigned}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {void}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {volatile}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {{}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {[}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {(}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {;}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {=}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {,}
check: reduce direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {{}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {TYPE_NAME}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {auto}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {bool}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {char}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {complex}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {const}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {double}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {enum}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {extern}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {float}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {imaginary}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {inline}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {int}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {long}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {register}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {restrict}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {short}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {signed}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {static}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {struct}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {typedef}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {union}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {unsigned}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {void}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {volatile}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {{}
reduce: direct_declarator -> foo ( int x ) 
reduce item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {{}
building new item: declarator -> direct_declarator . {TYPE_NAME}
building new item: declarator -> direct_declarator . {auto}
building new item: declarator -> direct_declarator . {bool}
building new item: declarator -> direct_declarator . {char}
building new item: declarator -> direct_declarator . {complex}
building new item: declarator -> direct_declarator . {const}
building new item: declarator -> direct_declarator . {double}
building new item: declarator -> direct_declarator . {enum}
building new item: declarator -> direct_declarator . {extern}
building new item: declarator -> direct_declarator . {float}
building new item: declarator -> direct_declarator . {imaginary}
building new item: declarator -> direct_declarator . {inline}
building new item: declarator -> direct_declarator . {int}
building new item: declarator -> direct_declarator . {long}
building new item: declarator -> direct_declarator . {register}
building new item: declarator -> direct_declarator . {restrict}
building new item: declarator -> direct_declarator . {short}
building new item: declarator -> direct_declarator . {signed}
building new item: declarator -> direct_declarator . {static}
building new item: declarator -> direct_declarator . {struct}
building new item: declarator -> direct_declarator . {typedef}
building new item: declarator -> direct_declarator . {union}
building new item: declarator -> direct_declarator . {unsigned}
building new item: declarator -> direct_declarator . {void}
building new item: declarator -> direct_declarator . {volatile}
building new item: declarator -> direct_declarator . {{}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {auto}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {auto}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {auto}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {bool}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {bool}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {bool}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {char}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {char}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {char}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {char}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {char}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {char}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {char}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {char}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {char}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {char}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {char}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {complex}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {complex}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {complex}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {const}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {const}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {const}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {const}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {const}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {const}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {const}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {const}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {const}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {const}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {const}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {double}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {double}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {double}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {double}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {double}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {double}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {double}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {double}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {double}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {double}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {double}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {enum}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {enum}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {enum}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {extern}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {extern}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {extern}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {float}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {float}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {float}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {float}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {float}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {float}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {float}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {float}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {float}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {float}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {float}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {imaginary}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {imaginary}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {inline}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {inline}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {inline}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {int}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {int}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {int}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {int}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {int}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {int}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {int}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {int}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {int}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {int}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {int}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {long}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {long}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {long}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {long}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {long}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {long}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {long}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {long}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {long}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {long}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {long}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {register}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {register}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {register}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {register}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {register}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {register}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {register}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {register}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {register}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {register}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {register}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {restrict}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {restrict}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {short}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {short}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {short}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {short}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {short}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {short}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {short}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {short}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {short}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {short}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {short}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {signed}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {signed}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {signed}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {static}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {static}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {static}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {static}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {static}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {static}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {static}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {static}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {static}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {static}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {static}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {struct}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {struct}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {struct}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {typedef}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {typedef}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {union}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {union}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {union}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {union}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {union}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {union}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {union}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {union}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {union}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {union}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {union}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {unsigned}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {unsigned}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {void}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {void}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {void}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {void}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {void}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {void}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {void}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {void}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {void}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {void}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {void}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {volatile}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {volatile}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {{}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {{}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {{}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {{}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {{}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {{}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {{}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {{}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {{}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {{}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {{}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {[}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {[}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {[}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {(}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {(}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {(}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {(}
building new item: declarator -> direct_declarator . {;}
building new item: declarator -> direct_declarator . {=}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {;}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {;}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {;}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {;}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {;}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {;}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {;}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {;}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {;}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {;}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {;}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {=}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {=}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {=}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {=}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {=}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {=}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {=}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {=}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {=}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {=}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {=}
building new item: declarator -> direct_declarator . {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {,}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {,}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {,}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {,}
closure post reduce
LOOP: 17, token: {, token_value: {
[verbose dump (every loop)]
parser state:
current token: {, value: {
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
 state stack (kernel items of top state only):
  state 2
   kernel items:
    declarator -> direct_declarator . {TYPE_NAME}
    declarator -> direct_declarator . {auto}
    declarator -> direct_declarator . {bool}
    declarator -> direct_declarator . {char}
    declarator -> direct_declarator . {complex}
    declarator -> direct_declarator . {const}
    declarator -> direct_declarator . {double}
    declarator -> direct_declarator . {enum}
    declarator -> direct_declarator . {extern}
    declarator -> direct_declarator . {float}
    declarator -> direct_declarator . {imaginary}
    declarator -> direct_declarator . {inline}
    declarator -> direct_declarator . {int}
    declarator -> direct_declarator . {long}
    declarator -> direct_declarator . {register}
    declarator -> direct_declarator . {restrict}
    declarator -> direct_declarator . {short}
    declarator -> direct_declarator . {signed}
    declarator -> direct_declarator . {static}
    declarator -> direct_declarator . {struct}
    declarator -> direct_declarator . {typedef}
    declarator -> direct_declarator . {union}
    declarator -> direct_declarator . {unsigned}
    declarator -> direct_declarator . {void}
    declarator -> direct_declarator . {volatile}
    declarator -> direct_declarator . {{}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {TYPE_NAME}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {TYPE_NAME}
    direct_declarator -> direct_declarator . [(,(] [),)] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {auto}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {auto}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {auto}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {auto}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {auto}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {auto}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {auto}
    direct_declarator -> direct_declarator . [[,[] [],]] {auto}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {auto}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {auto}
    direct_declarator -> direct_declarator . [(,(] [),)] {auto}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {bool}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {bool}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {bool}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {bool}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {bool}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {bool}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {bool}
    direct_declarator -> direct_declarator . [[,[] [],]] {bool}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {bool}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {bool}
    direct_declarator -> direct_declarator . [(,(] [),)] {bool}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {char}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {char}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {char}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {char}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {char}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {char}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {char}
    direct_declarator -> direct_declarator . [[,[] [],]] {char}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {char}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {char}
    direct_declarator -> direct_declarator . [(,(] [),)] {char}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {complex}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {complex}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {complex}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {complex}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {complex}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {complex}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {complex}
    direct_declarator -> direct_declarator . [[,[] [],]] {complex}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {complex}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {complex}
    direct_declarator -> direct_declarator . [(,(] [),)] {complex}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {const}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {const}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {const}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {const}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {const}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {const}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {const}
    direct_declarator -> direct_declarator . [[,[] [],]] {const}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {const}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {const}
    direct_declarator -> direct_declarator . [(,(] [),)] {const}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {double}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {double}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {double}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {double}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {double}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {double}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {double}
    direct_declarator -> direct_declarator . [[,[] [],]] {double}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {double}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {double}
    direct_declarator -> direct_declarator . [(,(] [),)] {double}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {enum}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {enum}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {enum}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {enum}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {enum}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {enum}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {enum}
    direct_declarator -> direct_declarator . [[,[] [],]] {enum}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {enum}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {enum}
    direct_declarator -> direct_declarator . [(,(] [),)] {enum}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {extern}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {extern}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {extern}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {extern}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {extern}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {extern}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {extern}
    direct_declarator -> direct_declarator . [[,[] [],]] {extern}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {extern}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {extern}
    direct_declarator -> direct_declarator . [(,(] [),)] {extern}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {float}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {float}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {float}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {float}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {float}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {float}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {float}
    direct_declarator -> direct_declarator . [[,[] [],]] {float}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {float}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {float}
    direct_declarator -> direct_declarator . [(,(] [),)] {float}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {imaginary}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {imaginary}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {imaginary}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {imaginary}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {imaginary}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {imaginary}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {imaginary}
    direct_declarator -> direct_declarator . [[,[] [],]] {imaginary}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {imaginary}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {imaginary}
    direct_declarator -> direct_declarator . [(,(] [),)] {imaginary}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {inline}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {inline}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {inline}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {inline}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {inline}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {inline}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {inline}
    direct_declarator -> direct_declarator . [[,[] [],]] {inline}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {inline}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {inline}
    direct_declarator -> direct_declarator . [(,(] [),)] {inline}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {int}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {int}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {int}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {int}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {int}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {int}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {int}
    direct_declarator -> direct_declarator . [[,[] [],]] {int}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {int}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {int}
    direct_declarator -> direct_declarator . [(,(] [),)] {int}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {long}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {long}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {long}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {long}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {long}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {long}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {long}
    direct_declarator -> direct_declarator . [[,[] [],]] {long}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {long}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {long}
    direct_declarator -> direct_declarator . [(,(] [),)] {long}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {register}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {register}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {register}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {register}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {register}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {register}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {register}
    direct_declarator -> direct_declarator . [[,[] [],]] {register}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {register}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {register}
    direct_declarator -> direct_declarator . [(,(] [),)] {register}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {restrict}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {restrict}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {restrict}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {restrict}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {restrict}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {restrict}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {restrict}
    direct_declarator -> direct_declarator . [[,[] [],]] {restrict}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {restrict}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {restrict}
    direct_declarator -> direct_declarator . [(,(] [),)] {restrict}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {short}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {short}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {short}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {short}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {short}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {short}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {short}
    direct_declarator -> direct_declarator . [[,[] [],]] {short}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {short}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {short}
    direct_declarator -> direct_declarator . [(,(] [),)] {short}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {signed}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {signed}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {signed}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {signed}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {signed}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {signed}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {signed}
    direct_declarator -> direct_declarator . [[,[] [],]] {signed}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {signed}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {signed}
    direct_declarator -> direct_declarator . [(,(] [),)] {signed}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {static}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {static}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {static}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {static}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {static}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {static}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {static}
    direct_declarator -> direct_declarator . [[,[] [],]] {static}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {static}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {static}
    direct_declarator -> direct_declarator . [(,(] [),)] {static}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {struct}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {struct}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {struct}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {struct}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {struct}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {struct}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {struct}
    direct_declarator -> direct_declarator . [[,[] [],]] {struct}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {struct}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {struct}
    direct_declarator -> direct_declarator . [(,(] [),)] {struct}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {typedef}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {typedef}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {typedef}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {typedef}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {typedef}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {typedef}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {typedef}
    direct_declarator -> direct_declarator . [[,[] [],]] {typedef}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {typedef}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {typedef}
    direct_declarator -> direct_declarator . [(,(] [),)] {typedef}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {union}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {union}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {union}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {union}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {union}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {union}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {union}
    direct_declarator -> direct_declarator . [[,[] [],]] {union}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {union}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {union}
    direct_declarator -> direct_declarator . [(,(] [),)] {union}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {unsigned}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {unsigned}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {unsigned}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {unsigned}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {unsigned}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {unsigned}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {unsigned}
    direct_declarator -> direct_declarator . [[,[] [],]] {unsigned}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {unsigned}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {unsigned}
    direct_declarator -> direct_declarator . [(,(] [),)] {unsigned}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {void}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {void}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {void}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {void}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {void}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {void}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {void}
    direct_declarator -> direct_declarator . [[,[] [],]] {void}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {void}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {void}
    direct_declarator -> direct_declarator . [(,(] [),)] {void}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {volatile}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {volatile}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {volatile}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {volatile}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {volatile}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {volatile}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {volatile}
    direct_declarator -> direct_declarator . [[,[] [],]] {volatile}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {volatile}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {volatile}
    direct_declarator -> direct_declarator . [(,(] [),)] {volatile}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {{}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {{}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {{}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {{}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {{}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {{}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {{}
    direct_declarator -> direct_declarator . [[,[] [],]] {{}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {{}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {{}
    direct_declarator -> direct_declarator . [(,(] [),)] {{}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {[}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {[}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {[}
    direct_declarator -> direct_declarator . [[,[] [],]] {[}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {[}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {[}
    direct_declarator -> direct_declarator . [(,(] [),)] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {(}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {(}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {(}
    direct_declarator -> direct_declarator . [[,[] [],]] {(}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {(}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {(}
    direct_declarator -> direct_declarator . [(,(] [),)] {(}
    declarator -> direct_declarator . {;}
    declarator -> direct_declarator . {=}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {;}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {;}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {;}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {;}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {;}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {;}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {;}
    direct_declarator -> direct_declarator . [[,[] [],]] {;}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {;}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {;}
    direct_declarator -> direct_declarator . [(,(] [),)] {;}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {=}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {=}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {=}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {=}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {=}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {=}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {=}
    direct_declarator -> direct_declarator . [[,[] [],]] {=}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {=}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {=}
    direct_declarator -> direct_declarator . [(,(] [),)] {=}
    declarator -> direct_declarator . {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {,}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {,}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {,}
    direct_declarator -> direct_declarator . [[,[] [],]] {,}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {,}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {,}
    direct_declarator -> direct_declarator . [(,(] [),)] {,}
check: reduce declarator -> direct_declarator . {{}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: declarator -> direct_declarator . {TYPE_NAME}
trying to reduce by: declarator -> direct_declarator . {auto}
trying to reduce by: declarator -> direct_declarator . {bool}
trying to reduce by: declarator -> direct_declarator . {char}
trying to reduce by: declarator -> direct_declarator . {complex}
trying to reduce by: declarator -> direct_declarator . {const}
trying to reduce by: declarator -> direct_declarator . {double}
trying to reduce by: declarator -> direct_declarator . {enum}
trying to reduce by: declarator -> direct_declarator . {extern}
trying to reduce by: declarator -> direct_declarator . {float}
trying to reduce by: declarator -> direct_declarator . {imaginary}
trying to reduce by: declarator -> direct_declarator . {inline}
trying to reduce by: declarator -> direct_declarator . {int}
trying to reduce by: declarator -> direct_declarator . {long}
trying to reduce by: declarator -> direct_declarator . {register}
trying to reduce by: declarator -> direct_declarator . {restrict}
trying to reduce by: declarator -> direct_declarator . {short}
trying to reduce by: declarator -> direct_declarator . {signed}
trying to reduce by: declarator -> direct_declarator . {static}
trying to reduce by: declarator -> direct_declarator . {struct}
trying to reduce by: declarator -> direct_declarator . {typedef}
trying to reduce by: declarator -> direct_declarator . {union}
trying to reduce by: declarator -> direct_declarator . {unsigned}
trying to reduce by: declarator -> direct_declarator . {void}
trying to reduce by: declarator -> direct_declarator . {volatile}
trying to reduce by: declarator -> direct_declarator . {{}
reduce: declarator -> foo ( int x ) 
reduce item: declarator -> direct_declarator . {{}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {$}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {$}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {TYPE_NAME}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {TYPE_NAME}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {auto}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {auto}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {bool}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {bool}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {char}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {char}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {complex}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {complex}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {const}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {const}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {double}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {double}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {enum}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {enum}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {extern}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {extern}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {float}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {float}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {imaginary}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {imaginary}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {inline}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {inline}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {int}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {int}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {long}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {long}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {register}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {register}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {restrict}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {restrict}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {short}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {short}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {signed}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {signed}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {static}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {static}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {struct}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {struct}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {typedef}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {typedef}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {union}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {union}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {unsigned}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {unsigned}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {void}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {void}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {volatile}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {volatile}
building new item: init_declarator -> declarator . {;}
building new item: init_declarator -> declarator . [=,=] initializer {;}
building new item: init_declarator -> declarator . {,}
building new item: init_declarator -> declarator . [=,=] initializer {,}
closure post reduce
LOOP: 18, token: {, token_value: {
[verbose dump (every loop)]
parser state:
current token: {, value: {
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
 state stack (kernel items of top state only):
  state 2
   kernel items:
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {$}
    function_definition -> declaration_specifiers declarator . compound_statement {$}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {TYPE_NAME}
    function_definition -> declaration_specifiers declarator . compound_statement {TYPE_NAME}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {auto}
    function_definition -> declaration_specifiers declarator . compound_statement {auto}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {bool}
    function_definition -> declaration_specifiers declarator . compound_statement {bool}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {char}
    function_definition -> declaration_specifiers declarator . compound_statement {char}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {complex}
    function_definition -> declaration_specifiers declarator . compound_statement {complex}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {const}
    function_definition -> declaration_specifiers declarator . compound_statement {const}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {double}
    function_definition -> declaration_specifiers declarator . compound_statement {double}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {enum}
    function_definition -> declaration_specifiers declarator . compound_statement {enum}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {extern}
    function_definition -> declaration_specifiers declarator . compound_statement {extern}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {float}
    function_definition -> declaration_specifiers declarator . compound_statement {float}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {imaginary}
    function_definition -> declaration_specifiers declarator . compound_statement {imaginary}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {inline}
    function_definition -> declaration_specifiers declarator . compound_statement {inline}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {int}
    function_definition -> declaration_specifiers declarator . compound_statement {int}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {long}
    function_definition -> declaration_specifiers declarator . compound_statement {long}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {register}
    function_definition -> declaration_specifiers declarator . compound_statement {register}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {restrict}
    function_definition -> declaration_specifiers declarator . compound_statement {restrict}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {short}
    function_definition -> declaration_specifiers declarator . compound_statement {short}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {signed}
    function_definition -> declaration_specifiers declarator . compound_statement {signed}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {static}
    function_definition -> declaration_specifiers declarator . compound_statement {static}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {struct}
    function_definition -> declaration_specifiers declarator . compound_statement {struct}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {typedef}
    function_definition -> declaration_specifiers declarator . compound_statement {typedef}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {union}
    function_definition -> declaration_specifiers declarator . compound_statement {union}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {unsigned}
    function_definition -> declaration_specifiers declarator . compound_statement {unsigned}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {void}
    function_definition -> declaration_specifiers declarator . compound_statement {void}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {volatile}
    function_definition -> declaration_specifiers declarator . compound_statement {volatile}
    init_declarator -> declarator . {;}
    init_declarator -> declarator . [=,=] initializer {;}
    init_declarator -> declarator . {,}
    init_declarator -> declarator . [=,=] initializer {,}
check: shift compound_statement -> . [{,{] [},}] {$}
check: shift compound_statement -> . [{,{] block_item_list [},}] {$}
check: shift compound_statement -> . [{,{] [},}] {TYPE_NAME}
check: shift compound_statement -> . [{,{] block_item_list [},}] {TYPE_NAME}
check: shift compound_statement -> . [{,{] [},}] {auto}
check: shift compound_statement -> . [{,{] block_item_list [},}] {auto}
check: shift compound_statement -> . [{,{] [},}] {bool}
check: shift compound_statement -> . [{,{] block_item_list [},}] {bool}
check: shift compound_statement -> . [{,{] [},}] {char}
check: shift compound_statement -> . [{,{] block_item_list [},}] {char}
check: shift compound_statement -> . [{,{] [},}] {complex}
check: shift compound_statement -> . [{,{] block_item_list [},}] {complex}
check: shift compound_statement -> . [{,{] [},}] {const}
check: shift compound_statement -> . [{,{] block_item_list [},}] {const}
check: shift compound_statement -> . [{,{] [},}] {double}
check: shift compound_statement -> . [{,{] block_item_list [},}] {double}
check: shift compound_statement -> . [{,{] [},}] {enum}
check: shift compound_statement -> . [{,{] block_item_list [},}] {enum}
check: shift compound_statement -> . [{,{] [},}] {extern}
check: shift compound_statement -> . [{,{] block_item_list [},}] {extern}
check: shift compound_statement -> . [{,{] [},}] {float}
check: shift compound_statement -> . [{,{] block_item_list [},}] {float}
check: shift compound_statement -> . [{,{] [},}] {imaginary}
check: shift compound_statement -> . [{,{] block_item_list [},}] {imaginary}
check: shift compound_statement -> . [{,{] [},}] {inline}
check: shift compound_statement -> . [{,{] block_item_list [},}] {inline}
check: shift compound_statement -> . [{,{] [},}] {int}
check: shift compound_statement -> . [{,{] block_item_list [},}] {int}
check: shift compound_statement -> . [{,{] [},}] {long}
check: shift compound_statement -> . [{,{] block_item_list [},}] {long}
check: shift compound_statement -> . [{,{] [},}] {register}
check: shift compound_statement -> . [{,{] block_item_list [},}] {register}
check: shift compound_statement -> . [{,{] [},}] {restrict}
check: shift compound_statement -> . [{,{] block_item_list [},}] {restrict}
check: shift compound_statement -> . [{,{] [},}] {short}
check: shift compound_statement -> . [{,{] block_item_list [},}] {short}
check: shift compound_statement -> . [{,{] [},}] {signed}
check: shift compound_statement -> . [{,{] block_item_list [},}] {signed}
check: shift compound_statement -> . [{,{] [},}] {static}
check: shift compound_statement -> . [{,{] block_item_list [},}] {static}
check: shift compound_statement -> . [{,{] [},}] {struct}
check: shift compound_statement -> . [{,{] block_item_list [},}] {struct}
check: shift compound_statement -> . [{,{] [},}] {typedef}
check: shift compound_statement -> . [{,{] block_item_list [},}] {typedef}
check: shift compound_statement -> . [{,{] [},}] {union}
check: shift compound_statement -> . [{,{] block_item_list [},}] {union}
check: shift compound_statement -> . [{,{] [},}] {unsigned}
check: shift compound_statement -> . [{,{] block_item_list [},}] {unsigned}
check: shift compound_statement -> . [{,{] [},}] {void}
check: shift compound_statement -> . [{,{] block_item_list [},}] {void}
check: shift compound_statement -> . [{,{] [},}] {volatile}
check: shift compound_statement -> . [{,{] block_item_list [},}] {volatile}
shifts: 52, reduces: 0, accepts: 0
shifting [{,{]
building new item: compound_statement -> [{,{] . [},}] {$}
building new item: compound_statement -> [{,{] . block_item_list [},}] {$}
building new item: compound_statement -> [{,{] . [},}] {TYPE_NAME}
building new item: compound_statement -> [{,{] . block_item_list [},}] {TYPE_NAME}
building new item: compound_statement -> [{,{] . [},}] {auto}
building new item: compound_statement -> [{,{] . block_item_list [},}] {auto}
building new item: compound_statement -> [{,{] . [},}] {bool}
building new item: compound_statement -> [{,{] . block_item_list [},}] {bool}
building new item: compound_statement -> [{,{] . [},}] {char}
building new item: compound_statement -> [{,{] . block_item_list [},}] {char}
building new item: compound_statement -> [{,{] . [},}] {complex}
building new item: compound_statement -> [{,{] . block_item_list [},}] {complex}
building new item: compound_statement -> [{,{] . [},}] {const}
building new item: compound_statement -> [{,{] . block_item_list [},}] {const}
building new item: compound_statement -> [{,{] . [},}] {double}
building new item: compound_statement -> [{,{] . block_item_list [},}] {double}
building new item: compound_statement -> [{,{] . [},}] {enum}
building new item: compound_statement -> [{,{] . block_item_list [},}] {enum}
building new item: compound_statement -> [{,{] . [},}] {extern}
building new item: compound_statement -> [{,{] . block_item_list [},}] {extern}
building new item: compound_statement -> [{,{] . [},}] {float}
building new item: compound_statement -> [{,{] . block_item_list [},}] {float}
building new item: compound_statement -> [{,{] . [},}] {imaginary}
building new item: compound_statement -> [{,{] . block_item_list [},}] {imaginary}
building new item: compound_statement -> [{,{] . [},}] {inline}
building new item: compound_statement -> [{,{] . block_item_list [},}] {inline}
building new item: compound_statement -> [{,{] . [},}] {int}
building new item: compound_statement -> [{,{] . block_item_list [},}] {int}
building new item: compound_statement -> [{,{] . [},}] {long}
building new item: compound_statement -> [{,{] . block_item_list [},}] {long}
building new item: compound_statement -> [{,{] . [},}] {register}
building new item: compound_statement -> [{,{] . block_item_list [},}] {register}
building new item: compound_statement -> [{,{] . [},}] {restrict}
building new item: compound_statement -> [{,{] . block_item_list [},}] {restrict}
building new item: compound_statement -> [{,{] . [},}] {short}
building new item: compound_statement -> [{,{] . block_item_list [},}] {short}
building new item: compound_statement -> [{,{] . [},}] {signed}
building new item: compound_statement -> [{,{] . block_item_list [},}] {signed}
building new item: compound_statement -> [{,{] . [},}] {static}
building new item: compound_statement -> [{,{] . block_item_list [},}] {static}
building new item: compound_statement -> [{,{] . [},}] {struct}
building new item: compound_statement -> [{,{] . block_item_list [},}] {struct}
building new item: compound_statement -> [{,{] . [},}] {typedef}
building new item: compound_statement -> [{,{] . block_item_list [},}] {typedef}
building new item: compound_statement -> [{,{] . [},}] {union}
building new item: compound_statement -> [{,{] . block_item_list [},}] {union}
building new item: compound_statement -> [{,{] . [},}] {unsigned}
building new item: compound_statement -> [{,{] . block_item_list [},}] {unsigned}
building new item: compound_statement -> [{,{] . [},}] {void}
building new item: compound_statement -> [{,{] . block_item_list [},}] {void}
building new item: compound_statement -> [{,{] . [},}] {volatile}
building new item: compound_statement -> [{,{] . block_item_list [},}] {volatile}
closure post shift
LOOP: 19, token: return, token_value: return
[verbose dump (every loop)]
parser state:
current token: return, value: return
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
 state stack (kernel items of top state only):
  state 3
   kernel items:
    compound_statement -> [{,{] . [},}] {$}
    compound_statement -> [{,{] . block_item_list [},}] {$}
    compound_statement -> [{,{] . [},}] {TYPE_NAME}
    compound_statement -> [{,{] . block_item_list [},}] {TYPE_NAME}
    compound_statement -> [{,{] . [},}] {auto}
    compound_statement -> [{,{] . block_item_list [},}] {auto}
    compound_statement -> [{,{] . [},}] {bool}
    compound_statement -> [{,{] . block_item_list [},}] {bool}
    compound_statement -> [{,{] . [},}] {char}
    compound_statement -> [{,{] . block_item_list [},}] {char}
    compound_statement -> [{,{] . [},}] {complex}
    compound_statement -> [{,{] . block_item_list [},}] {complex}
    compound_statement -> [{,{] . [},}] {const}
    compound_statement -> [{,{] . block_item_list [},}] {const}
    compound_statement -> [{,{] . [},}] {double}
    compound_statement -> [{,{] . block_item_list [},}] {double}
    compound_statement -> [{,{] . [},}] {enum}
    compound_statement -> [{,{] . block_item_list [},}] {enum}
    compound_statement -> [{,{] . [},}] {extern}
    compound_statement -> [{,{] . block_item_list [},}] {extern}
    compound_statement -> [{,{] . [},}] {float}
    compound_statement -> [{,{] . block_item_list [},}] {float}
    compound_statement -> [{,{] . [},}] {imaginary}
    compound_statement -> [{,{] . block_item_list [},}] {imaginary}
    compound_statement -> [{,{] . [},}] {inline}
    compound_statement -> [{,{] . block_item_list [},}] {inline}
    compound_statement -> [{,{] . [},}] {int}
    compound_statement -> [{,{] . block_item_list [},}] {int}
    compound_statement -> [{,{] . [},}] {long}
    compound_statement -> [{,{] . block_item_list [},}] {long}
    compound_statement -> [{,{] . [},}] {register}
    compound_statement -> [{,{] . block_item_list [},}] {register}
    compound_statement -> [{,{] . [},}] {restrict}
    compound_statement -> [{,{] . block_item_list [},}] {restrict}
    compound_statement -> [{,{] . [},}] {short}
    compound_statement -> [{,{] . block_item_list [},}] {short}
    compound_statement -> [{,{] . [},}] {signed}
    compound_statement -> [{,{] . block_item_list [},}] {signed}
    compound_statement -> [{,{] . [},}] {static}
    compound_statement -> [{,{] . block_item_list [},}] {static}
    compound_statement -> [{,{] . [},}] {struct}
    compound_statement -> [{,{] . block_item_list [},}] {struct}
    compound_statement -> [{,{] . [},}] {typedef}
    compound_statement -> [{,{] . block_item_list [},}] {typedef}
    compound_statement -> [{,{] . [},}] {union}
    compound_statement -> [{,{] . block_item_list [},}] {union}
    compound_statement -> [{,{] . [},}] {unsigned}
    compound_statement -> [{,{] . block_item_list [},}] {unsigned}
    compound_statement -> [{,{] . [},}] {void}
    compound_statement -> [{,{] . block_item_list [},}] {void}
    compound_statement -> [{,{] . [},}] {volatile}
    compound_statement -> [{,{] . block_item_list [},}] {volatile}
check: shift jump_statement -> . [return,return] [;,;] {}}
check: shift jump_statement -> . [return,return] expression [;,;] {}}
check: shift jump_statement -> . [return,return] [;,;] {!}
check: shift jump_statement -> . [return,return] expression [;,;] {!}
check: shift jump_statement -> . [return,return] [;,;] {&}
check: shift jump_statement -> . [return,return] expression [;,;] {&}
check: shift jump_statement -> . [return,return] [;,;] {(}
check: shift jump_statement -> . [return,return] expression [;,;] {(}
check: shift jump_statement -> . [return,return] [;,;] {*}
check: shift jump_statement -> . [return,return] expression [;,;] {*}
check: shift jump_statement -> . [return,return] [;,;] {+}
check: shift jump_statement -> . [return,return] expression [;,;] {+}
check: shift jump_statement -> . [return,return] [;,;] {-}
check: shift jump_statement -> . [return,return] expression [;,;] {-}
check: shift jump_statement -> . [return,return] [;,;] {;}
check: shift jump_statement -> . [return,return] expression [;,;] {;}
check: shift jump_statement -> . [return,return] [;,;] {DEC_OP}
check: shift jump_statement -> . [return,return] expression [;,;] {DEC_OP}
check: shift jump_statement -> . [return,return] [;,;] {INC_OP}
check: shift jump_statement -> . [return,return] expression [;,;] {INC_OP}
check: shift jump_statement -> . [return,return] [;,;] {TYPE_NAME}
check: shift jump_statement -> . [return,return] expression [;,;] {TYPE_NAME}
check: shift jump_statement -> . [return,return] [;,;] {auto}
check: shift jump_statement -> . [return,return] expression [;,;] {auto}
check: shift jump_statement -> . [return,return] [;,;] {bool}
check: shift jump_statement -> . [return,return] expression [;,;] {bool}
check: shift jump_statement -> . [return,return] [;,;] {break}
check: shift jump_statement -> . [return,return] expression [;,;] {break}
check: shift jump_statement -> . [return,return] [;,;] {case}
check: shift jump_statement -> . [return,return] expression [;,;] {case}
check: shift jump_statement -> . [return,return] [;,;] {char}
check: shift jump_statement -> . [return,return] expression [;,;] {char}
check: shift jump_statement -> . [return,return] [;,;] {complex}
check: shift jump_statement -> . [return,return] expression [;,;] {complex}
check: shift jump_statement -> . [return,return] [;,;] {const}
check: shift jump_statement -> . [return,return] expression [;,;] {const}
check: shift jump_statement -> . [return,return] [;,;] {continue}
check: shift jump_statement -> . [return,return] expression [;,;] {continue}
check: shift jump_statement -> . [return,return] [;,;] {default}
check: shift jump_statement -> . [return,return] expression [;,;] {default}
check: shift jump_statement -> . [return,return] [;,;] {do}
check: shift jump_statement -> . [return,return] expression [;,;] {do}
check: shift jump_statement -> . [return,return] [;,;] {double}
check: shift jump_statement -> . [return,return] expression [;,;] {double}
check: shift jump_statement -> . [return,return] [;,;] {enum}
check: shift jump_statement -> . [return,return] expression [;,;] {enum}
check: shift jump_statement -> . [return,return] [;,;] {extern}
check: shift jump_statement -> . [return,return] expression [;,;] {extern}
check: shift jump_statement -> . [return,return] [;,;] {float}
check: shift jump_statement -> . [return,return] expression [;,;] {float}
check: shift jump_statement -> . [return,return] [;,;] {for}
check: shift jump_statement -> . [return,return] expression [;,;] {for}
check: shift jump_statement -> . [return,return] [;,;] {goto}
check: shift jump_statement -> . [return,return] expression [;,;] {goto}
check: shift jump_statement -> . [return,return] [;,;] {id}
check: shift jump_statement -> . [return,return] expression [;,;] {id}
check: shift jump_statement -> . [return,return] [;,;] {if}
check: shift jump_statement -> . [return,return] expression [;,;] {if}
check: shift jump_statement -> . [return,return] [;,;] {imaginary}
check: shift jump_statement -> . [return,return] expression [;,;] {imaginary}
check: shift jump_statement -> . [return,return] [;,;] {inline}
check: shift jump_statement -> . [return,return] expression [;,;] {inline}
check: shift jump_statement -> . [return,return] [;,;] {int}
check: shift jump_statement -> . [return,return] expression [;,;] {int}
check: shift jump_statement -> . [return,return] [;,;] {long}
check: shift jump_statement -> . [return,return] expression [;,;] {long}
check: shift jump_statement -> . [return,return] [;,;] {num}
check: shift jump_statement -> . [return,return] expression [;,;] {num}
check: shift jump_statement -> . [return,return] [;,;] {register}
check: shift jump_statement -> . [return,return] expression [;,;] {register}
check: shift jump_statement -> . [return,return] [;,;] {restrict}
check: shift jump_statement -> . [return,return] expression [;,;] {restrict}
check: shift jump_statement -> . [return,return] [;,;] {return}
check: shift jump_statement -> . [return,return] expression [;,;] {return}
check: shift jump_statement -> . [return,return] [;,;] {short}
check: shift jump_statement -> . [return,return] expression [;,;] {short}
check: shift jump_statement -> . [return,return] [;,;] {signed}
check: shift jump_statement -> . [return,return] expression [;,;] {signed}
check: shift jump_statement -> . [return,return] [;,;] {sizeof}
check: shift jump_statement -> . [return,return] expression [;,;] {sizeof}
check: shift jump_statement -> . [return,return] [;,;] {static}
check: shift jump_statement -> . [return,return] expression [;,;] {static}
check: shift jump_statement -> . [return,return] [;,;] {string}
check: shift jump_statement -> . [return,return] expression [;,;] {string}
check: shift jump_statement -> . [return,return] [;,;] {struct}
check: shift jump_statement -> . [return,return] expression [;,;] {struct}
check: shift jump_statement -> . [return,return] [;,;] {switch}
check: shift jump_statement -> . [return,return] expression [;,;] {switch}
check: shift jump_statement -> . [return,return] [;,;] {typedef}
check: shift jump_statement -> . [return,return] expression [;,;] {typedef}
check: shift jump_statement -> . [return,return] [;,;] {union}
check: shift jump_statement -> . [return,return] expression [;,;] {union}
check: shift jump_statement -> . [return,return] [;,;] {unsigned}
check: shift jump_statement -> . [return,return] expression [;,;] {unsigned}
check: shift jump_statement -> . [return,return] [;,;] {void}
check: shift jump_statement -> . [return,return] expression [;,;] {void}
check: shift jump_statement -> . [return,return] [;,;] {volatile}
check: shift jump_statement -> . [return,return] expression [;,;] {volatile}
check: shift jump_statement -> . [return,return] [;,;] {while}
check: shift jump_statement -> . [return,return] expression [;,;] {while}
check: shift jump_statement -> . [return,return] [;,;] {{}
check: shift jump_statement -> . [return,return] expression [;,;] {{}
check: shift jump_statement -> . [return,return] [;,;] {~}
check: shift jump_statement -> . [return,return] expression [;,;] {~}
shifts: 104, reduces: 0, accepts: 0
shifting [return,return]
building new item: jump_statement -> [return,return] . [;,;] {}}
building new item: jump_statement -> [return,return] . expression [;,;] {}}
building new item: jump_statement -> [return,return] . [;,;] {!}
building new item: jump_statement -> [return,return] . expression [;,;] {!}
building new item: jump_statement -> [return,return] . [;,;] {&}
building new item: jump_statement -> [return,return] . expression [;,;] {&}
building new item: jump_statement -> [return,return] . [;,;] {(}
building new item: jump_statement -> [return,return] . expression [;,;] {(}
building new item: jump_statement -> [return,return] . [;,;] {*}
building new item: jump_statement -> [return,return] . expression [;,;] {*}
building new item: jump_statement -> [return,return] . [;,;] {+}
building new item: jump_statement -> [return,return] . expression [;,;] {+}
building new item: jump_statement -> [return,return] . [;,;] {-}
building new item: jump_statement -> [return,return] . expression [;,;] {-}
building new item: jump_statement -> [return,return] . [;,;] {;}
building new item: jump_statement -> [return,return] . expression [;,;] {;}
building new item: jump_statement -> [return,return] . [;,;] {DEC_OP}
building new item: jump_statement -> [return,return] . expression [;,;] {DEC_OP}
building new item: jump_statement -> [return,return] . [;,;] {INC_OP}
building new item: jump_statement -> [return,return] . expression [;,;] {INC_OP}
building new item: jump_statement -> [return,return] . [;,;] {TYPE_NAME}
building new item: jump_statement -> [return,return] . expression [;,;] {TYPE_NAME}
building new item: jump_statement -> [return,return] . [;,;] {auto}
building new item: jump_statement -> [return,return] . expression [;,;] {auto}
building new item: jump_statement -> [return,return] . [;,;] {bool}
building new item: jump_statement -> [return,return] . expression [;,;] {bool}
building new item: jump_statement -> [return,return] . [;,;] {break}
building new item: jump_statement -> [return,return] . expression [;,;] {break}
building new item: jump_statement -> [return,return] . [;,;] {case}
building new item: jump_statement -> [return,return] . expression [;,;] {case}
building new item: jump_statement -> [return,return] . [;,;] {char}
building new item: jump_statement -> [return,return] . expression [;,;] {char}
building new item: jump_statement -> [return,return] . [;,;] {complex}
building new item: jump_statement -> [return,return] . expression [;,;] {complex}
building new item: jump_statement -> [return,return] . [;,;] {const}
building new item: jump_statement -> [return,return] . expression [;,;] {const}
building new item: jump_statement -> [return,return] . [;,;] {continue}
building new item: jump_statement -> [return,return] . expression [;,;] {continue}
building new item: jump_statement -> [return,return] . [;,;] {default}
building new item: jump_statement -> [return,return] . expression [;,;] {default}
building new item: jump_statement -> [return,return] . [;,;] {do}
building new item: jump_statement -> [return,return] . expression [;,;] {do}
building new item: jump_statement -> [return,return] . [;,;] {double}
building new item: jump_statement -> [return,return] . expression [;,;] {double}
building new item: jump_statement -> [return,return] . [;,;] {enum}
building new item: jump_statement -> [return,return] . expression [;,;] {enum}
building new item: jump_statement -> [return,return] . [;,;] {extern}
building new item: jump_statement -> [return,return] . expression [;,;] {extern}
building new item: jump_statement -> [return,return] . [;,;] {float}
building new item: jump_statement -> [return,return] . expression [;,;] {float}
building new item: jump_statement -> [return,return] . [;,;] {for}
building new item: jump_statement -> [return,return] . expression [;,;] {for}
building new item: jump_statement -> [return,return] . [;,;] {goto}
building new item: jump_statement -> [return,return] . expression [;,;] {goto}
building new item: jump_statement -> [return,return] . [;,;] {id}
building new item: jump_statement -> [return,return] . expression [;,;] {id}
building new item: jump_statement -> [return,return] . [;,;] {if}
building new item: jump_statement -> [return,return] . expression [;,;] {if}
building new item: jump_statement -> [return,return] . [;,;] {imaginary}
building new item: jump_statement -> [return,return] . expression [;,;] {imaginary}
building new item: jump_statement -> [return,return] . [;,;] {inline}
building new item: jump_statement -> [return,return] . expression [;,;] {inline}
building new item: jump_statement -> [return,return] . [;,;] {int}
building new item: jump_statement -> [return,return] . expression [;,;] {int}
building new item: jump_statement -> [return,return] . [;,;] {long}
building new item: jump_statement -> [return,return] . expression [;,;] {long}
building new item: jump_statement -> [return,return] . [;,;] {num}
building new item: jump_statement -> [return,return] . expression [;,;] {num}
building new item: jump_statement -> [return,return] . [;,;] {register}
building new item: jump_statement -> [return,return] . expression [;,;] {register}
building new item: jump_statement -> [return,return] . [;,;] {restrict}
building new item: jump_statement -> [return,return] . expression [;,;] {restrict}
building new item: jump_statement -> [return,return] . [;,;] {return}
building new item: jump_statement -> [return,return] . expression [;,;] {return}
building new item: jump_statement -> [return,return] . [;,;] {short}
building new item: jump_statement -> [return,return] . expression [;,;] {short}
building new item: jump_statement -> [return,return] . [;,;] {signed}
building new item: jump_statement -> [return,return] . expression [;,;] {signed}
building new item: jump_statement -> [return,return] . [;,;] {sizeof}
building new item: jump_statement -> [return,return] . expression [;,;] {sizeof}
building new item: jump_statement -> [return,return] . [;,;] {static}
building new item: jump_statement -> [return,return] . expression [;,;] {static}
building new item: jump_statement -> [return,return] . [;,;] {string}
building new item: jump_statement -> [return,return] . expression [;,;] {string}
building new item: jump_statement -> [return,return] . [;,;] {struct}
building new item: jump_statement -> [return,return] . expression [;,;] {struct}
building new item: jump_statement -> [return,return] . [;,;] {switch}
building new item: jump_statement -> [return,return] . expression [;,;] {switch}
building new item: jump_statement -> [return,return] . [;,;] {typedef}
building new item: jump_statement -> [return,return] . expression [;,;] {typedef}
building new item: jump_statement -> [return,return] . [;,;] {union}
building new item: jump_statement -> [return,return] . expression [;,;] {union}
building new item: jump_statement -> [return,return] . [;,;] {unsigned}
building new item: jump_statement -> [return,return] . expression [;,;] {unsigned}
building new item: jump_statement -> [return,return] . [;,;] {void}
building new item: jump_statement -> [return,return] . expression [;,;] {void}
building new item: jump_statement -> [return,return] . [;,;] {volatile}
building new item: jump_statement -> [return,return] . expression [;,;] {volatile}
building new item: jump_statement -> [return,return] . [;,;] {while}
building new item: jump_statement -> [return,return] . expression [;,;] {while}
building new item: jump_statement -> [return,return] . [;,;] {{}
building new item: jump_statement -> [return,return] . expression [;,;] {{}
building new item: jump_statement -> [return,return] . [;,;] {~}
building new item: jump_statement -> [return,return] . expression [;,;] {~}
closure post shift
LOOP: 20, token: id, token_value: x
[verbose dump (every loop)]
parser state:
current token: id, value: x
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [return,return]
 state stack (kernel items of top state only):
  state 4
   kernel items:
    jump_statement -> [return,return] . [;,;] {}}
    jump_statement -> [return,return] . expression [;,;] {}}
    jump_statement -> [return,return] . [;,;] {!}
    jump_statement -> [return,return] . expression [;,;] {!}
    jump_statement -> [return,return] . [;,;] {&}
    jump_statement -> [return,return] . expression [;,;] {&}
    jump_statement -> [return,return] . [;,;] {(}
    jump_statement -> [return,return] . expression [;,;] {(}
    jump_statement -> [return,return] . [;,;] {*}
    jump_statement -> [return,return] . expression [;,;] {*}
    jump_statement -> [return,return] . [;,;] {+}
    jump_statement -> [return,return] . expression [;,;] {+}
    jump_statement -> [return,return] . [;,;] {-}
    jump_statement -> [return,return] . expression [;,;] {-}
    jump_statement -> [return,return] . [;,;] {;}
    jump_statement -> [return,return] . expression [;,;] {;}
    jump_statement -> [return,return] . [;,;] {DEC_OP}
    jump_statement -> [return,return] . expression [;,;] {DEC_OP}
    jump_statement -> [return,return] . [;,;] {INC_OP}
    jump_statement -> [return,return] . expression [;,;] {INC_OP}
    jump_statement -> [return,return] . [;,;] {TYPE_NAME}
    jump_statement -> [return,return] . expression [;,;] {TYPE_NAME}
    jump_statement -> [return,return] . [;,;] {auto}
    jump_statement -> [return,return] . expression [;,;] {auto}
    jump_statement -> [return,return] . [;,;] {bool}
    jump_statement -> [return,return] . expression [;,;] {bool}
    jump_statement -> [return,return] . [;,;] {break}
    jump_statement -> [return,return] . expression [;,;] {break}
    jump_statement -> [return,return] . [;,;] {case}
    jump_statement -> [return,return] . expression [;,;] {case}
    jump_statement -> [return,return] . [;,;] {char}
    jump_statement -> [return,return] . expression [;,;] {char}
    jump_statement -> [return,return] . [;,;] {complex}
    jump_statement -> [return,return] . expression [;,;] {complex}
    jump_statement -> [return,return] . [;,;] {const}
    jump_statement -> [return,return] . expression [;,;] {const}
    jump_statement -> [return,return] . [;,;] {continue}
    jump_statement -> [return,return] . expression [;,;] {continue}
    jump_statement -> [return,return] . [;,;] {default}
    jump_statement -> [return,return] . expression [;,;] {default}
    jump_statement -> [return,return] . [;,;] {do}
    jump_statement -> [return,return] . expression [;,;] {do}
    jump_statement -> [return,return] . [;,;] {double}
    jump_statement -> [return,return] . expression [;,;] {double}
    jump_statement -> [return,return] . [;,;] {enum}
    jump_statement -> [return,return] . expression [;,;] {enum}
    jump_statement -> [return,return] . [;,;] {extern}
    jump_statement -> [return,return] . expression [;,;] {extern}
    jump_statement -> [return,return] . [;,;] {float}
    jump_statement -> [return,return] . expression [;,;] {float}
    jump_statement -> [return,return] . [;,;] {for}
    jump_statement -> [return,return] . expression [;,;] {for}
    jump_statement -> [return,return] . [;,;] {goto}
    jump_statement -> [return,return] . expression [;,;] {goto}
    jump_statement -> [return,return] . [;,;] {id}
    jump_statement -> [return,return] . expression [;,;] {id}
    jump_statement -> [return,return] . [;,;] {if}
    jump_statement -> [return,return] . expression [;,;] {if}
    jump_statement -> [return,return] . [;,;] {imaginary}
    jump_statement -> [return,return] . expression [;,;] {imaginary}
    jump_statement -> [return,return] . [;,;] {inline}
    jump_statement -> [return,return] . expression [;,;] {inline}
    jump_statement -> [return,return] . [;,;] {int}
    jump_statement -> [return,return] . expression [;,;] {int}
    jump_statement -> [return,return] . [;,;] {long}
    jump_statement -> [return,return] . expression [;,;] {long}
    jump_statement -> [return,return] . [;,;] {num}
    jump_statement -> [return,return] . expression [;,;] {num}
    jump_statement -> [return,return] . [;,;] {register}
    jump_statement -> [return,return] . expression [;,;] {register}
    jump_statement -> [return,return] . [;,;] {restrict}
    jump_statement -> [return,return] . expression [;,;] {restrict}
    jump_statement -> [return,return] . [;,;] {return}
    jump_statement -> [return,return] . expression [;,;] {return}
    jump_statement -> [return,return] . [;,;] {short}
    jump_statement -> [return,return] . expression [;,;] {short}
    jump_statement -> [return,return] . [;,;] {signed}
    jump_statement -> [return,return] . expression [;,;] {signed}
    jump_statement -> [return,return] . [;,;] {sizeof}
    jump_statement -> [return,return] . expression [;,;] {sizeof}
    jump_statement -> [return,return] . [;,;] {static}
    jump_statement -> [return,return] . expression [;,;] {static}
    jump_statement -> [return,return] . [;,;] {string}
    jump_statement -> [return,return] . expression [;,;] {string}
    jump_statement -> [return,return] . [;,;] {struct}
    jump_statement -> [return,return] . expression [;,;] {struct}
    jump_statement -> [return,return] . [;,;] {switch}
    jump_statement -> [return,return] . expression [;,;] {switch}
    jump_statement -> [return,return] . [;,;] {typedef}
    jump_statement -> [return,return] . expression [;,;] {typedef}
    jump_statement -> [return,return] . [;,;] {union}
    jump_statement -> [return,return] . expression [;,;] {union}
    jump_statement -> [return,return] . [;,;] {unsigned}
    jump_statement -> [return,return] . expression [;,;] {unsigned}
    jump_statement -> [return,return] . [;,;] {void}
    jump_statement -> [return,return] . expression [;,;] {void}
    jump_statement -> [return,return] . [;,;] {volatile}
    jump_statement -> [return,return] . expression [;,;] {volatile}
    jump_statement -> [return,return] . [;,;] {while}
    jump_statement -> [return,return] . expression [;,;] {while}
    jump_statement -> [return,return] . [;,;] {{}
    jump_statement -> [return,return] . expression [;,;] {{}
    jump_statement -> [return,return] . [;,;] {~}
    jump_statement -> [return,return] . expression [;,;] {~}
check: shift primary_expression -> . [id,id] {=}
check: shift primary_expression -> . [id,id] {ADD_ASSIGN}
check: shift primary_expression -> . [id,id] {AND_ASSIGN}
check: shift primary_expression -> . [id,id] {DIV_ASSIGN}
check: shift primary_expression -> . [id,id] {LEFT_ASSIGN}
check: shift primary_expression -> . [id,id] {MOD_ASSIGN}
check: shift primary_expression -> . [id,id] {MUL_ASSIGN}
check: shift primary_expression -> . [id,id] {OR_ASSIGN}
check: shift primary_expression -> . [id,id] {RIGHT_ASSIGN}
check: shift primary_expression -> . [id,id] {SUB_ASSIGN}
check: shift primary_expression -> . [id,id] {XOR_ASSIGN}
check: shift primary_expression -> . [id,id] {[}
check: shift primary_expression -> . [id,id] {(}
check: shift primary_expression -> . [id,id] {.}
check: shift primary_expression -> . [id,id] {PTR_OP}
check: shift primary_expression -> . [id,id] {INC_OP}
check: shift primary_expression -> . [id,id] {DEC_OP}
check: shift primary_expression -> . [id,id] {;}
check: shift primary_expression -> . [id,id] {?}
check: shift primary_expression -> . [id,id] {*}
check: shift primary_expression -> . [id,id] {/}
check: shift primary_expression -> . [id,id] {%}
check: shift primary_expression -> . [id,id] {+}
check: shift primary_expression -> . [id,id] {-}
check: shift primary_expression -> . [id,id] {LEFT_OP}
check: shift primary_expression -> . [id,id] {RIGHT_OP}
check: shift primary_expression -> . [id,id] {<}
check: shift primary_expression -> . [id,id] {>}
check: shift primary_expression -> . [id,id] {LE_OP}
check: shift primary_expression -> . [id,id] {GE_OP}
check: shift primary_expression -> . [id,id] {EQ_OP}
check: shift primary_expression -> . [id,id] {NE_OP}
check: shift primary_expression -> . [id,id] {&}
check: shift primary_expression -> . [id,id] {^}
check: shift primary_expression -> . [id,id] {|}
check: shift primary_expression -> . [id,id] {AND_OP}
check: shift primary_expression -> . [id,id] {OR_OP}
check: shift primary_expression -> . [id,id] {,}
shifts: 38, reduces: 0, accepts: 0
shifting [id,x]
building new item: primary_expression -> [id,id] . {=}
building new item: primary_expression -> [id,id] . {ADD_ASSIGN}
building new item: primary_expression -> [id,id] . {AND_ASSIGN}
building new item: primary_expression -> [id,id] . {DIV_ASSIGN}
building new item: primary_expression -> [id,id] . {LEFT_ASSIGN}
building new item: primary_expression -> [id,id] . {MOD_ASSIGN}
building new item: primary_expression -> [id,id] . {MUL_ASSIGN}
building new item: primary_expression -> [id,id] . {OR_ASSIGN}
building new item: primary_expression -> [id,id] . {RIGHT_ASSIGN}
building new item: primary_expression -> [id,id] . {SUB_ASSIGN}
building new item: primary_expression -> [id,id] . {XOR_ASSIGN}
building new item: primary_expression -> [id,id] . {[}
building new item: primary_expression -> [id,id] . {(}
building new item: primary_expression -> [id,id] . {.}
building new item: primary_expression -> [id,id] . {PTR_OP}
building new item: primary_expression -> [id,id] . {INC_OP}
building new item: primary_expression -> [id,id] . {DEC_OP}
building new item: primary_expression -> [id,id] . {;}
building new item: primary_expression -> [id,id] . {?}
building new item: primary_expression -> [id,id] . {*}
building new item: primary_expression -> [id,id] . {/}
building new item: primary_expression -> [id,id] . {%}
building new item: primary_expression -> [id,id] . {+}
building new item: primary_expression -> [id,id] . {-}
building new item: primary_expression -> [id,id] . {LEFT_OP}
building new item: primary_expression -> [id,id] . {RIGHT_OP}
building new item: primary_expression -> [id,id] . {<}
building new item: primary_expression -> [id,id] . {>}
building new item: primary_expression -> [id,id] . {LE_OP}
building new item: primary_expression -> [id,id] . {GE_OP}
building new item: primary_expression -> [id,id] . {EQ_OP}
building new item: primary_expression -> [id,id] . {NE_OP}
building new item: primary_expression -> [id,id] . {&}
building new item: primary_expression -> [id,id] . {^}
building new item: primary_expression -> [id,id] . {|}
building new item: primary_expression -> [id,id] . {AND_OP}
building new item: primary_expression -> [id,id] . {OR_OP}
building new item: primary_expression -> [id,id] . {,}
closure post shift
LOOP: 21, token: *, token_value: *
[verbose dump (every loop)]
parser state:
current token: *, value: *
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [return,return]
  [id,x]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    primary_expression -> [id,id] . {=}
    primary_expression -> [id,id] . {ADD_ASSIGN}
    primary_expression -> [id,id] . {AND_ASSIGN}
    primary_expression -> [id,id] . {DIV_ASSIGN}
    primary_expression -> [id,id] . {LEFT_ASSIGN}
    primary_expression -> [id,id] . {MOD_ASSIGN}
    primary_expression -> [id,id] . {MUL_ASSIGN}
    primary_expression -> [id,id] . {OR_ASSIGN}
    primary_expression -> [id,id] . {RIGHT_ASSIGN}
    primary_expression -> [id,id] . {SUB_ASSIGN}
    primary_expression -> [id,id] . {XOR_ASSIGN}
    primary_expression -> [id,id] . {[}
    primary_expression -> [id,id] . {(}
    primary_expression -> [id,id] . {.}
    primary_expression -> [id,id] . {PTR_OP}
    primary_expression -> [id,id] . {INC_OP}
    primary_expression -> [id,id] . {DEC_OP}
    primary_expression -> [id,id] . {;}
    primary_expression -> [id,id] . {?}
    primary_expression -> [id,id] . {*}
    primary_expression -> [id,id] . {/}
    primary_expression -> [id,id] . {%}
    primary_expression -> [id,id] . {+}
    primary_expression -> [id,id] . {-}
    primary_expression -> [id,id] . {LEFT_OP}
    primary_expression -> [id,id] . {RIGHT_OP}
    primary_expression -> [id,id] . {<}
    primary_expression -> [id,id] . {>}
    primary_expression -> [id,id] . {LE_OP}
    primary_expression -> [id,id] . {GE_OP}
    primary_expression -> [id,id] . {EQ_OP}
    primary_expression -> [id,id] . {NE_OP}
    primary_expression -> [id,id] . {&}
    primary_expression -> [id,id] . {^}
    primary_expression -> [id,id] . {|}
    primary_expression -> [id,id] . {AND_OP}
    primary_expression -> [id,id] . {OR_OP}
    primary_expression -> [id,id] . {,}
check: reduce primary_expression -> [id,id] . {*}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: primary_expression -> [id,id] . {=}
trying to reduce by: primary_expression -> [id,id] . {ADD_ASSIGN}
trying to reduce by: primary_expression -> [id,id] . {AND_ASSIGN}
trying to reduce by: primary_expression -> [id,id] . {DIV_ASSIGN}
trying to reduce by: primary_expression -> [id,id] . {LEFT_ASSIGN}
trying to reduce by: primary_expression -> [id,id] . {MOD_ASSIGN}
trying to reduce by: primary_expression -> [id,id] . {MUL_ASSIGN}
trying to reduce by: primary_expression -> [id,id] . {OR_ASSIGN}
trying to reduce by: primary_expression -> [id,id] . {RIGHT_ASSIGN}
trying to reduce by: primary_expression -> [id,id] . {SUB_ASSIGN}
trying to reduce by: primary_expression -> [id,id] . {XOR_ASSIGN}
trying to reduce by: primary_expression -> [id,id] . {[}
trying to reduce by: primary_expression -> [id,id] . {(}
trying to reduce by: primary_expression -> [id,id] . {.}
trying to reduce by: primary_expression -> [id,id] . {PTR_OP}
trying to reduce by: primary_expression -> [id,id] . {INC_OP}
trying to reduce by: primary_expression -> [id,id] . {DEC_OP}
trying to reduce by: primary_expression -> [id,id] . {;}
trying to reduce by: primary_expression -> [id,id] . {?}
trying to reduce by: primary_expression -> [id,id] . {*}
reduce: primary_expression -> x 
reduce item: primary_expression -> [id,id] . {*}
building new item: postfix_expression -> primary_expression . {=}
building new item: postfix_expression -> primary_expression . {ADD_ASSIGN}
building new item: postfix_expression -> primary_expression . {AND_ASSIGN}
building new item: postfix_expression -> primary_expression . {DIV_ASSIGN}
building new item: postfix_expression -> primary_expression . {LEFT_ASSIGN}
building new item: postfix_expression -> primary_expression . {MOD_ASSIGN}
building new item: postfix_expression -> primary_expression . {MUL_ASSIGN}
building new item: postfix_expression -> primary_expression . {OR_ASSIGN}
building new item: postfix_expression -> primary_expression . {RIGHT_ASSIGN}
building new item: postfix_expression -> primary_expression . {SUB_ASSIGN}
building new item: postfix_expression -> primary_expression . {XOR_ASSIGN}
building new item: postfix_expression -> primary_expression . {[}
building new item: postfix_expression -> primary_expression . {(}
building new item: postfix_expression -> primary_expression . {.}
building new item: postfix_expression -> primary_expression . {PTR_OP}
building new item: postfix_expression -> primary_expression . {INC_OP}
building new item: postfix_expression -> primary_expression . {DEC_OP}
building new item: postfix_expression -> primary_expression . {;}
building new item: postfix_expression -> primary_expression . {?}
building new item: postfix_expression -> primary_expression . {*}
building new item: postfix_expression -> primary_expression . {/}
building new item: postfix_expression -> primary_expression . {%}
building new item: postfix_expression -> primary_expression . {+}
building new item: postfix_expression -> primary_expression . {-}
building new item: postfix_expression -> primary_expression . {LEFT_OP}
building new item: postfix_expression -> primary_expression . {RIGHT_OP}
building new item: postfix_expression -> primary_expression . {<}
building new item: postfix_expression -> primary_expression . {>}
building new item: postfix_expression -> primary_expression . {LE_OP}
building new item: postfix_expression -> primary_expression . {GE_OP}
building new item: postfix_expression -> primary_expression . {EQ_OP}
building new item: postfix_expression -> primary_expression . {NE_OP}
building new item: postfix_expression -> primary_expression . {&}
building new item: postfix_expression -> primary_expression . {^}
building new item: postfix_expression -> primary_expression . {|}
building new item: postfix_expression -> primary_expression . {AND_OP}
building new item: postfix_expression -> primary_expression . {OR_OP}
building new item: postfix_expression -> primary_expression . {,}
closure post reduce
LOOP: 22, token: *, token_value: *
[verbose dump (every loop)]
parser state:
current token: *, value: *
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [return,return]
  [primary_expression,primary_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    postfix_expression -> primary_expression . {=}
    postfix_expression -> primary_expression . {ADD_ASSIGN}
    postfix_expression -> primary_expression . {AND_ASSIGN}
    postfix_expression -> primary_expression . {DIV_ASSIGN}
    postfix_expression -> primary_expression . {LEFT_ASSIGN}
    postfix_expression -> primary_expression . {MOD_ASSIGN}
    postfix_expression -> primary_expression . {MUL_ASSIGN}
    postfix_expression -> primary_expression . {OR_ASSIGN}
    postfix_expression -> primary_expression . {RIGHT_ASSIGN}
    postfix_expression -> primary_expression . {SUB_ASSIGN}
    postfix_expression -> primary_expression . {XOR_ASSIGN}
    postfix_expression -> primary_expression . {[}
    postfix_expression -> primary_expression . {(}
    postfix_expression -> primary_expression . {.}
    postfix_expression -> primary_expression . {PTR_OP}
    postfix_expression -> primary_expression . {INC_OP}
    postfix_expression -> primary_expression . {DEC_OP}
    postfix_expression -> primary_expression . {;}
    postfix_expression -> primary_expression . {?}
    postfix_expression -> primary_expression . {*}
    postfix_expression -> primary_expression . {/}
    postfix_expression -> primary_expression . {%}
    postfix_expression -> primary_expression . {+}
    postfix_expression -> primary_expression . {-}
    postfix_expression -> primary_expression . {LEFT_OP}
    postfix_expression -> primary_expression . {RIGHT_OP}
    postfix_expression -> primary_expression . {<}
    postfix_expression -> primary_expression . {>}
    postfix_expression -> primary_expression . {LE_OP}
    postfix_expression -> primary_expression . {GE_OP}
    postfix_expression -> primary_expression . {EQ_OP}
    postfix_expression -> primary_expression . {NE_OP}
    postfix_expression -> primary_expression . {&}
    postfix_expression -> primary_expression . {^}
    postfix_expression -> primary_expression . {|}
    postfix_expression -> primary_expression . {AND_OP}
    postfix_expression -> primary_expression . {OR_OP}
    postfix_expression -> primary_expression . {,}
check: reduce postfix_expression -> primary_expression . {*}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: postfix_expression -> primary_expression . {=}
trying to reduce by: postfix_expression -> primary_expression . {ADD_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {AND_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {DIV_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {MOD_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {MUL_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {OR_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {SUB_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {XOR_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {[}
trying to reduce by: postfix_expression -> primary_expression . {(}
trying to reduce by: postfix_expression -> primary_expression . {.}
trying to reduce by: postfix_expression -> primary_expression . {PTR_OP}
trying to reduce by: postfix_expression -> primary_expression . {INC_OP}
trying to reduce by: postfix_expression -> primary_expression . {DEC_OP}
trying to reduce by: postfix_expression -> primary_expression . {;}
trying to reduce by: postfix_expression -> primary_expression . {?}
trying to reduce by: postfix_expression -> primary_expression . {*}
reduce: postfix_expression -> x 
reduce item: postfix_expression -> primary_expression . {*}
building new item: unary_expression -> postfix_expression . {=}
building new item: unary_expression -> postfix_expression . {ADD_ASSIGN}
building new item: unary_expression -> postfix_expression . {AND_ASSIGN}
building new item: unary_expression -> postfix_expression . {DIV_ASSIGN}
building new item: unary_expression -> postfix_expression . {LEFT_ASSIGN}
building new item: unary_expression -> postfix_expression . {MOD_ASSIGN}
building new item: unary_expression -> postfix_expression . {MUL_ASSIGN}
building new item: unary_expression -> postfix_expression . {OR_ASSIGN}
building new item: unary_expression -> postfix_expression . {RIGHT_ASSIGN}
building new item: unary_expression -> postfix_expression . {SUB_ASSIGN}
building new item: unary_expression -> postfix_expression . {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {=}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {=}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {=}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {=}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {=}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {=}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {=}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {[}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {[}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {[}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {[}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {[}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {[}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {[}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {(}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {(}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {(}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {(}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {(}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {(}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {(}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {.}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {.}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {.}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {.}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {.}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {.}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {.}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {INC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {INC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {INC_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {INC_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {INC_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {INC_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {INC_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DEC_OP}
building new item: unary_expression -> postfix_expression . {;}
building new item: unary_expression -> postfix_expression . {?}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {;}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {;}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {;}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {;}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {;}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {;}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {;}
building new item: unary_expression -> postfix_expression . {*}
building new item: unary_expression -> postfix_expression . {/}
building new item: unary_expression -> postfix_expression . {%}
building new item: unary_expression -> postfix_expression . {+}
building new item: unary_expression -> postfix_expression . {-}
building new item: unary_expression -> postfix_expression . {LEFT_OP}
building new item: unary_expression -> postfix_expression . {RIGHT_OP}
building new item: unary_expression -> postfix_expression . {<}
building new item: unary_expression -> postfix_expression . {>}
building new item: unary_expression -> postfix_expression . {LE_OP}
building new item: unary_expression -> postfix_expression . {GE_OP}
building new item: unary_expression -> postfix_expression . {EQ_OP}
building new item: unary_expression -> postfix_expression . {NE_OP}
building new item: unary_expression -> postfix_expression . {&}
building new item: unary_expression -> postfix_expression . {^}
building new item: unary_expression -> postfix_expression . {|}
building new item: unary_expression -> postfix_expression . {AND_OP}
building new item: unary_expression -> postfix_expression . {OR_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {?}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {?}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {?}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {?}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {?}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {?}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {?}
building new item: unary_expression -> postfix_expression . {,}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {*}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {*}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {*}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {*}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {*}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {*}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {*}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {/}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {/}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {/}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {/}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {/}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {/}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {/}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {%}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {%}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {%}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {%}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {%}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {%}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {%}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {+}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {+}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {+}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {+}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {+}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {+}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {+}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {-}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {-}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {-}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {-}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {-}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {-}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {-}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {<}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {<}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {<}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {<}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {<}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {<}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {<}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {>}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {>}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {>}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {>}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {>}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {>}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {>}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {LE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {LE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LE_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {LE_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LE_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LE_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LE_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {GE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {GE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {GE_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {GE_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {GE_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {GE_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {GE_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {NE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {NE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {NE_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {NE_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {NE_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {NE_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {NE_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {&}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {&}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {&}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {&}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {&}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {&}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {&}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {^}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {^}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {^}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {^}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {^}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {^}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {^}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {|}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {|}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {|}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {|}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {|}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {|}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {|}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {AND_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {AND_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {OR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {OR_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {,}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {,}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {,}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {,}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {,}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {,}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {,}
closure post reduce
LOOP: 23, token: *, token_value: *
[verbose dump (every loop)]
parser state:
current token: *, value: *
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [return,return]
  [postfix_expression,postfix_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    unary_expression -> postfix_expression . {=}
    unary_expression -> postfix_expression . {ADD_ASSIGN}
    unary_expression -> postfix_expression . {AND_ASSIGN}
    unary_expression -> postfix_expression . {DIV_ASSIGN}
    unary_expression -> postfix_expression . {LEFT_ASSIGN}
    unary_expression -> postfix_expression . {MOD_ASSIGN}
    unary_expression -> postfix_expression . {MUL_ASSIGN}
    unary_expression -> postfix_expression . {OR_ASSIGN}
    unary_expression -> postfix_expression . {RIGHT_ASSIGN}
    unary_expression -> postfix_expression . {SUB_ASSIGN}
    unary_expression -> postfix_expression . {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {=}
    postfix_expression -> postfix_expression . [(,(] [),)] {=}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {=}
    postfix_expression -> postfix_expression . [.,.] [id,id] {=}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {=}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {=}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {=}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {[}
    postfix_expression -> postfix_expression . [(,(] [),)] {[}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {[}
    postfix_expression -> postfix_expression . [.,.] [id,id] {[}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {[}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {[}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {[}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {(}
    postfix_expression -> postfix_expression . [(,(] [),)] {(}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {(}
    postfix_expression -> postfix_expression . [.,.] [id,id] {(}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {(}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {(}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {(}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {.}
    postfix_expression -> postfix_expression . [(,(] [),)] {.}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {.}
    postfix_expression -> postfix_expression . [.,.] [id,id] {.}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {.}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {.}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {.}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {PTR_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {PTR_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {PTR_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {PTR_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {PTR_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {PTR_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {PTR_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {INC_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {INC_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {INC_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {INC_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {INC_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {INC_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {INC_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {DEC_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {DEC_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DEC_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {DEC_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DEC_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DEC_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DEC_OP}
    unary_expression -> postfix_expression . {;}
    unary_expression -> postfix_expression . {?}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {;}
    postfix_expression -> postfix_expression . [(,(] [),)] {;}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {;}
    postfix_expression -> postfix_expression . [.,.] [id,id] {;}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {;}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {;}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {;}
    unary_expression -> postfix_expression . {*}
    unary_expression -> postfix_expression . {/}
    unary_expression -> postfix_expression . {%}
    unary_expression -> postfix_expression . {+}
    unary_expression -> postfix_expression . {-}
    unary_expression -> postfix_expression . {LEFT_OP}
    unary_expression -> postfix_expression . {RIGHT_OP}
    unary_expression -> postfix_expression . {<}
    unary_expression -> postfix_expression . {>}
    unary_expression -> postfix_expression . {LE_OP}
    unary_expression -> postfix_expression . {GE_OP}
    unary_expression -> postfix_expression . {EQ_OP}
    unary_expression -> postfix_expression . {NE_OP}
    unary_expression -> postfix_expression . {&}
    unary_expression -> postfix_expression . {^}
    unary_expression -> postfix_expression . {|}
    unary_expression -> postfix_expression . {AND_OP}
    unary_expression -> postfix_expression . {OR_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {?}
    postfix_expression -> postfix_expression . [(,(] [),)] {?}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {?}
    postfix_expression -> postfix_expression . [.,.] [id,id] {?}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {?}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {?}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {?}
    unary_expression -> postfix_expression . {,}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {*}
    postfix_expression -> postfix_expression . [(,(] [),)] {*}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {*}
    postfix_expression -> postfix_expression . [.,.] [id,id] {*}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {*}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {*}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {*}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {/}
    postfix_expression -> postfix_expression . [(,(] [),)] {/}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {/}
    postfix_expression -> postfix_expression . [.,.] [id,id] {/}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {/}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {/}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {/}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {%}
    postfix_expression -> postfix_expression . [(,(] [),)] {%}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {%}
    postfix_expression -> postfix_expression . [.,.] [id,id] {%}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {%}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {%}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {%}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {+}
    postfix_expression -> postfix_expression . [(,(] [),)] {+}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {+}
    postfix_expression -> postfix_expression . [.,.] [id,id] {+}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {+}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {+}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {+}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {-}
    postfix_expression -> postfix_expression . [(,(] [),)] {-}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {-}
    postfix_expression -> postfix_expression . [.,.] [id,id] {-}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {-}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {-}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {-}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {<}
    postfix_expression -> postfix_expression . [(,(] [),)] {<}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {<}
    postfix_expression -> postfix_expression . [.,.] [id,id] {<}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {<}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {<}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {<}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {>}
    postfix_expression -> postfix_expression . [(,(] [),)] {>}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {>}
    postfix_expression -> postfix_expression . [.,.] [id,id] {>}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {>}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {>}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {>}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {LE_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {LE_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LE_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {LE_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LE_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LE_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LE_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {GE_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {GE_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {GE_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {GE_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {GE_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {GE_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {GE_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {EQ_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {EQ_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {EQ_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {EQ_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {EQ_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {EQ_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {EQ_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {NE_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {NE_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {NE_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {NE_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {NE_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {NE_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {NE_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {&}
    postfix_expression -> postfix_expression . [(,(] [),)] {&}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {&}
    postfix_expression -> postfix_expression . [.,.] [id,id] {&}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {&}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {&}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {&}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {^}
    postfix_expression -> postfix_expression . [(,(] [),)] {^}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {^}
    postfix_expression -> postfix_expression . [.,.] [id,id] {^}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {^}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {^}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {^}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {|}
    postfix_expression -> postfix_expression . [(,(] [),)] {|}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {|}
    postfix_expression -> postfix_expression . [.,.] [id,id] {|}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {|}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {|}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {|}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {AND_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {AND_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {OR_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {OR_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {,}
    postfix_expression -> postfix_expression . [(,(] [),)] {,}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {,}
    postfix_expression -> postfix_expression . [.,.] [id,id] {,}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {,}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {,}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {,}
check: reduce unary_expression -> postfix_expression . {*}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: unary_expression -> postfix_expression . {=}
trying to reduce by: unary_expression -> postfix_expression . {ADD_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {AND_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {DIV_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {LEFT_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {MOD_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {MUL_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {OR_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {RIGHT_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {SUB_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {=}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {=}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {=}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {=}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {=}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {=}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {=}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {[}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {[}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {[}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {[}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {[}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {[}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {[}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {(}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {(}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {(}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {(}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {(}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {(}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {(}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {.}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {.}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {.}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {.}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {.}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {.}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {.}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DEC_OP}
trying to reduce by: unary_expression -> postfix_expression . {;}
trying to reduce by: unary_expression -> postfix_expression . {?}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {;}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {;}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {;}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {;}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {;}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {;}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {;}
trying to reduce by: unary_expression -> postfix_expression . {*}
reduce: unary_expression -> x 
reduce item: unary_expression -> postfix_expression . {*}
building new item: assignment_expression -> unary_expression . assignment_operator assignment_expression {;}
building new item: assignment_expression -> unary_expression . assignment_operator assignment_expression {,}
building new item: cast_expression -> unary_expression . {;}
building new item: cast_expression -> unary_expression . {?}
building new item: cast_expression -> unary_expression . {*}
building new item: cast_expression -> unary_expression . {/}
building new item: cast_expression -> unary_expression . {%}
building new item: cast_expression -> unary_expression . {+}
building new item: cast_expression -> unary_expression . {-}
building new item: cast_expression -> unary_expression . {LEFT_OP}
building new item: cast_expression -> unary_expression . {RIGHT_OP}
building new item: cast_expression -> unary_expression . {<}
building new item: cast_expression -> unary_expression . {>}
building new item: cast_expression -> unary_expression . {LE_OP}
building new item: cast_expression -> unary_expression . {GE_OP}
building new item: cast_expression -> unary_expression . {EQ_OP}
building new item: cast_expression -> unary_expression . {NE_OP}
building new item: cast_expression -> unary_expression . {&}
building new item: cast_expression -> unary_expression . {^}
building new item: cast_expression -> unary_expression . {|}
building new item: cast_expression -> unary_expression . {AND_OP}
building new item: cast_expression -> unary_expression . {OR_OP}
building new item: cast_expression -> unary_expression . {,}
closure post reduce
LOOP: 24, token: *, token_value: *
[verbose dump (every loop)]
parser state:
current token: *, value: *
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [return,return]
  [unary_expression,unary_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    assignment_expression -> unary_expression . assignment_operator assignment_expression {;}
    assignment_expression -> unary_expression . assignment_operator assignment_expression {,}
    cast_expression -> unary_expression . {;}
    cast_expression -> unary_expression . {?}
    cast_expression -> unary_expression . {*}
    cast_expression -> unary_expression . {/}
    cast_expression -> unary_expression . {%}
    cast_expression -> unary_expression . {+}
    cast_expression -> unary_expression . {-}
    cast_expression -> unary_expression . {LEFT_OP}
    cast_expression -> unary_expression . {RIGHT_OP}
    cast_expression -> unary_expression . {<}
    cast_expression -> unary_expression . {>}
    cast_expression -> unary_expression . {LE_OP}
    cast_expression -> unary_expression . {GE_OP}
    cast_expression -> unary_expression . {EQ_OP}
    cast_expression -> unary_expression . {NE_OP}
    cast_expression -> unary_expression . {&}
    cast_expression -> unary_expression . {^}
    cast_expression -> unary_expression . {|}
    cast_expression -> unary_expression . {AND_OP}
    cast_expression -> unary_expression . {OR_OP}
    cast_expression -> unary_expression . {,}
check: reduce cast_expression -> unary_expression . {*}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: assignment_expression -> unary_expression . assignment_operator assignment_expression {;}
trying to reduce by: assignment_expression -> unary_expression . assignment_operator assignment_expression {,}
trying to reduce by: cast_expression -> unary_expression . {;}
trying to reduce by: cast_expression -> unary_expression . {?}
trying to reduce by: cast_expression -> unary_expression . {*}
reduce: cast_expression -> x 
reduce item: cast_expression -> unary_expression . {*}
building new item: multiplicative_expression -> cast_expression . {;}
building new item: multiplicative_expression -> cast_expression . {?}
building new item: multiplicative_expression -> cast_expression . {*}
building new item: multiplicative_expression -> cast_expression . {/}
building new item: multiplicative_expression -> cast_expression . {%}
building new item: multiplicative_expression -> cast_expression . {+}
building new item: multiplicative_expression -> cast_expression . {-}
building new item: multiplicative_expression -> cast_expression . {LEFT_OP}
building new item: multiplicative_expression -> cast_expression . {RIGHT_OP}
building new item: multiplicative_expression -> cast_expression . {<}
building new item: multiplicative_expression -> cast_expression . {>}
building new item: multiplicative_expression -> cast_expression . {LE_OP}
building new item: multiplicative_expression -> cast_expression . {GE_OP}
building new item: multiplicative_expression -> cast_expression . {EQ_OP}
building new item: multiplicative_expression -> cast_expression . {NE_OP}
building new item: multiplicative_expression -> cast_expression . {&}
building new item: multiplicative_expression -> cast_expression . {^}
building new item: multiplicative_expression -> cast_expression . {|}
building new item: multiplicative_expression -> cast_expression . {AND_OP}
building new item: multiplicative_expression -> cast_expression . {OR_OP}
building new item: multiplicative_expression -> cast_expression . {,}
closure post reduce
LOOP: 25, token: *, token_value: *
[verbose dump (every loop)]
parser state:
current token: *, value: *
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [return,return]
  [cast_expression,cast_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    multiplicative_expression -> cast_expression . {;}
    multiplicative_expression -> cast_expression . {?}
    multiplicative_expression -> cast_expression . {*}
    multiplicative_expression -> cast_expression . {/}
    multiplicative_expression -> cast_expression . {%}
    multiplicative_expression -> cast_expression . {+}
    multiplicative_expression -> cast_expression . {-}
    multiplicative_expression -> cast_expression . {LEFT_OP}
    multiplicative_expression -> cast_expression . {RIGHT_OP}
    multiplicative_expression -> cast_expression . {<}
    multiplicative_expression -> cast_expression . {>}
    multiplicative_expression -> cast_expression . {LE_OP}
    multiplicative_expression -> cast_expression . {GE_OP}
    multiplicative_expression -> cast_expression . {EQ_OP}
    multiplicative_expression -> cast_expression . {NE_OP}
    multiplicative_expression -> cast_expression . {&}
    multiplicative_expression -> cast_expression . {^}
    multiplicative_expression -> cast_expression . {|}
    multiplicative_expression -> cast_expression . {AND_OP}
    multiplicative_expression -> cast_expression . {OR_OP}
    multiplicative_expression -> cast_expression . {,}
check: reduce multiplicative_expression -> cast_expression . {*}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: multiplicative_expression -> cast_expression . {;}
trying to reduce by: multiplicative_expression -> cast_expression . {?}
trying to reduce by: multiplicative_expression -> cast_expression . {*}
reduce: multiplicative_expression -> x 
reduce item: multiplicative_expression -> cast_expression . {*}
building new item: additive_expression -> multiplicative_expression . {;}
building new item: additive_expression -> multiplicative_expression . {?}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {;}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {;}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {;}
building new item: additive_expression -> multiplicative_expression . {+}
building new item: additive_expression -> multiplicative_expression . {-}
building new item: additive_expression -> multiplicative_expression . {LEFT_OP}
building new item: additive_expression -> multiplicative_expression . {RIGHT_OP}
building new item: additive_expression -> multiplicative_expression . {<}
building new item: additive_expression -> multiplicative_expression . {>}
building new item: additive_expression -> multiplicative_expression . {LE_OP}
building new item: additive_expression -> multiplicative_expression . {GE_OP}
building new item: additive_expression -> multiplicative_expression . {EQ_OP}
building new item: additive_expression -> multiplicative_expression . {NE_OP}
building new item: additive_expression -> multiplicative_expression . {&}
building new item: additive_expression -> multiplicative_expression . {^}
building new item: additive_expression -> multiplicative_expression . {|}
building new item: additive_expression -> multiplicative_expression . {AND_OP}
building new item: additive_expression -> multiplicative_expression . {OR_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {?}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {?}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {?}
building new item: additive_expression -> multiplicative_expression . {,}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {*}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {*}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {*}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {/}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {/}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {/}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {%}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {%}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {%}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {+}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {+}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {+}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {-}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {-}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {-}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {LEFT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {LEFT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {LEFT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {RIGHT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {RIGHT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {RIGHT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {<}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {<}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {<}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {>}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {>}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {>}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {LE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {LE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {LE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {GE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {GE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {GE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {EQ_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {EQ_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {EQ_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {NE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {NE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {NE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {&}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {&}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {&}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {^}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {^}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {^}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {|}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {|}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {|}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {AND_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {AND_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {AND_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {OR_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {OR_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {OR_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {,}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {,}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {,}
closure post reduce
LOOP: 26, token: *, token_value: *
[verbose dump (every loop)]
parser state:
current token: *, value: *
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [return,return]
  [multiplicative_expression,multiplicative_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    additive_expression -> multiplicative_expression . {;}
    additive_expression -> multiplicative_expression . {?}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {;}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {;}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {;}
    additive_expression -> multiplicative_expression . {+}
    additive_expression -> multiplicative_expression . {-}
    additive_expression -> multiplicative_expression . {LEFT_OP}
    additive_expression -> multiplicative_expression . {RIGHT_OP}
    additive_expression -> multiplicative_expression . {<}
    additive_expression -> multiplicative_expression . {>}
    additive_expression -> multiplicative_expression . {LE_OP}
    additive_expression -> multiplicative_expression . {GE_OP}
    additive_expression -> multiplicative_expression . {EQ_OP}
    additive_expression -> multiplicative_expression . {NE_OP}
    additive_expression -> multiplicative_expression . {&}
    additive_expression -> multiplicative_expression . {^}
    additive_expression -> multiplicative_expression . {|}
    additive_expression -> multiplicative_expression . {AND_OP}
    additive_expression -> multiplicative_expression . {OR_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {?}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {?}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {?}
    additive_expression -> multiplicative_expression . {,}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {*}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {*}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {*}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {/}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {/}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {/}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {%}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {%}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {%}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {+}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {+}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {+}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {-}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {-}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {-}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {LEFT_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {LEFT_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {LEFT_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {RIGHT_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {RIGHT_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {RIGHT_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {<}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {<}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {<}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {>}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {>}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {>}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {LE_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {LE_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {LE_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {GE_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {GE_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {GE_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {EQ_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {EQ_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {EQ_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {NE_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {NE_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {NE_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {&}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {&}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {&}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {^}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {^}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {^}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {|}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {|}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {|}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {AND_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {AND_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {AND_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {OR_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {OR_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {OR_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {,}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {,}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {,}
check: shift multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {;}
check: shift multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {?}
check: shift multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {*}
check: shift multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {/}
check: shift multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {%}
check: shift multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {+}
check: shift multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {-}
check: shift multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {LEFT_OP}
check: shift multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {RIGHT_OP}
check: shift multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {<}
check: shift multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {>}
check: shift multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {LE_OP}
check: shift multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {GE_OP}
check: shift multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {EQ_OP}
check: shift multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {NE_OP}
check: shift multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {&}
check: shift multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {^}
check: shift multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {|}
check: shift multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {AND_OP}
check: shift multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {OR_OP}
check: shift multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {,}
shifts: 21, reduces: 0, accepts: 0
shifting [*,*]
building new item: multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {;}
building new item: multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {?}
building new item: multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {*}
building new item: multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {/}
building new item: multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {%}
building new item: multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {+}
building new item: multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {-}
building new item: multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {LEFT_OP}
building new item: multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {RIGHT_OP}
building new item: multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {<}
building new item: multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {>}
building new item: multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {LE_OP}
building new item: multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {GE_OP}
building new item: multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {EQ_OP}
building new item: multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {NE_OP}
building new item: multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {&}
building new item: multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {^}
building new item: multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {|}
building new item: multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {AND_OP}
building new item: multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {OR_OP}
building new item: multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {,}
closure post shift
LOOP: 27, token: num, token_value: 2
[verbose dump (every loop)]
parser state:
current token: num, value: 2
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [return,return]
  [multiplicative_expression,multiplicative_expression]
  [*,*]
 state stack (kernel items of top state only):
  state 6
   kernel items:
    multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {;}
    multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {?}
    multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {*}
    multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {/}
    multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {%}
    multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {+}
    multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {-}
    multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {LEFT_OP}
    multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {RIGHT_OP}
    multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {<}
    multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {>}
    multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {LE_OP}
    multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {GE_OP}
    multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {EQ_OP}
    multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {NE_OP}
    multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {&}
    multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {^}
    multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {|}
    multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {AND_OP}
    multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {OR_OP}
    multiplicative_expression -> multiplicative_expression [*,*] . cast_expression {,}
check: shift primary_expression -> . [num,num] {;}
check: shift primary_expression -> . [num,num] {?}
check: shift primary_expression -> . [num,num] {*}
check: shift primary_expression -> . [num,num] {/}
check: shift primary_expression -> . [num,num] {%}
check: shift primary_expression -> . [num,num] {+}
check: shift primary_expression -> . [num,num] {-}
check: shift primary_expression -> . [num,num] {LEFT_OP}
check: shift primary_expression -> . [num,num] {RIGHT_OP}
check: shift primary_expression -> . [num,num] {<}
check: shift primary_expression -> . [num,num] {>}
check: shift primary_expression -> . [num,num] {LE_OP}
check: shift primary_expression -> . [num,num] {GE_OP}
check: shift primary_expression -> . [num,num] {EQ_OP}
check: shift primary_expression -> . [num,num] {NE_OP}
check: shift primary_expression -> . [num,num] {&}
check: shift primary_expression -> . [num,num] {^}
check: shift primary_expression -> . [num,num] {|}
check: shift primary_expression -> . [num,num] {AND_OP}
check: shift primary_expression -> . [num,num] {OR_OP}
check: shift primary_expression -> . [num,num] {,}
check: shift primary_expression -> . [num,num] {[}
check: shift primary_expression -> . [num,num] {(}
check: shift primary_expression -> . [num,num] {.}
check: shift primary_expression -> . [num,num] {PTR_OP}
check: shift primary_expression -> . [num,num] {INC_OP}
check: shift primary_expression -> . [num,num] {DEC_OP}
shifts: 27, reduces: 0, accepts: 0
shifting [num,2]
building new item: primary_expression -> [num,num] . {;}
building new item: primary_expression -> [num,num] . {?}
building new item: primary_expression -> [num,num] . {*}
building new item: primary_expression -> [num,num] . {/}
building new item: primary_expression -> [num,num] . {%}
building new item: primary_expression -> [num,num] . {+}
building new item: primary_expression -> [num,num] . {-}
building new item: primary_expression -> [num,num] . {LEFT_OP}
building new item: primary_expression -> [num,num] . {RIGHT_OP}
building new item: primary_expression -> [num,num] . {<}
building new item: primary_expression -> [num,num] . {>}
building new item: primary_expression -> [num,num] . {LE_OP}
building new item: primary_expression -> [num,num] . {GE_OP}
building new item: primary_expression -> [num,num] . {EQ_OP}
building new item: primary_expression -> [num,num] . {NE_OP}
building new item: primary_expression -> [num,num] . {&}
building new item: primary_expression -> [num,num] . {^}
building new item: primary_expression -> [num,num] . {|}
building new item: primary_expression -> [num,num] . {AND_OP}
building new item: primary_expression -> [num,num] . {OR_OP}
building new item: primary_expression -> [num,num] . {,}
building new item: primary_expression -> [num,num] . {[}
building new item: primary_expression -> [num,num] . {(}
building new item: primary_expression -> [num,num] . {.}
building new item: primary_expression -> [num,num] . {PTR_OP}
building new item: primary_expression -> [num,num] . {INC_OP}
building new item: primary_expression -> [num,num] . {DEC_OP}
closure post shift
LOOP: 28, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [return,return]
  [multiplicative_expression,multiplicative_expression]
  [*,*]
  [num,2]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    primary_expression -> [num,num] . {;}
    primary_expression -> [num,num] . {?}
    primary_expression -> [num,num] . {*}
    primary_expression -> [num,num] . {/}
    primary_expression -> [num,num] . {%}
    primary_expression -> [num,num] . {+}
    primary_expression -> [num,num] . {-}
    primary_expression -> [num,num] . {LEFT_OP}
    primary_expression -> [num,num] . {RIGHT_OP}
    primary_expression -> [num,num] . {<}
    primary_expression -> [num,num] . {>}
    primary_expression -> [num,num] . {LE_OP}
    primary_expression -> [num,num] . {GE_OP}
    primary_expression -> [num,num] . {EQ_OP}
    primary_expression -> [num,num] . {NE_OP}
    primary_expression -> [num,num] . {&}
    primary_expression -> [num,num] . {^}
    primary_expression -> [num,num] . {|}
    primary_expression -> [num,num] . {AND_OP}
    primary_expression -> [num,num] . {OR_OP}
    primary_expression -> [num,num] . {,}
    primary_expression -> [num,num] . {[}
    primary_expression -> [num,num] . {(}
    primary_expression -> [num,num] . {.}
    primary_expression -> [num,num] . {PTR_OP}
    primary_expression -> [num,num] . {INC_OP}
    primary_expression -> [num,num] . {DEC_OP}
check: reduce primary_expression -> [num,num] . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: primary_expression -> [num,num] . {;}
reduce: primary_expression -> 2 
reduce item: primary_expression -> [num,num] . {;}
building new item: postfix_expression -> primary_expression . {;}
building new item: postfix_expression -> primary_expression . {?}
building new item: postfix_expression -> primary_expression . {*}
building new item: postfix_expression -> primary_expression . {/}
building new item: postfix_expression -> primary_expression . {%}
building new item: postfix_expression -> primary_expression . {+}
building new item: postfix_expression -> primary_expression . {-}
building new item: postfix_expression -> primary_expression . {LEFT_OP}
building new item: postfix_expression -> primary_expression . {RIGHT_OP}
building new item: postfix_expression -> primary_expression . {<}
building new item: postfix_expression -> primary_expression . {>}
building new item: postfix_expression -> primary_expression . {LE_OP}
building new item: postfix_expression -> primary_expression . {GE_OP}
building new item: postfix_expression -> primary_expression . {EQ_OP}
building new item: postfix_expression -> primary_expression . {NE_OP}
building new item: postfix_expression -> primary_expression . {&}
building new item: postfix_expression -> primary_expression . {^}
building new item: postfix_expression -> primary_expression . {|}
building new item: postfix_expression -> primary_expression . {AND_OP}
building new item: postfix_expression -> primary_expression . {OR_OP}
building new item: postfix_expression -> primary_expression . {,}
building new item: postfix_expression -> primary_expression . {[}
building new item: postfix_expression -> primary_expression . {(}
building new item: postfix_expression -> primary_expression . {.}
building new item: postfix_expression -> primary_expression . {PTR_OP}
building new item: postfix_expression -> primary_expression . {INC_OP}
building new item: postfix_expression -> primary_expression . {DEC_OP}
closure post reduce
LOOP: 29, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [return,return]
  [multiplicative_expression,multiplicative_expression]
  [*,*]
  [primary_expression,primary_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    postfix_expression -> primary_expression . {;}
    postfix_expression -> primary_expression . {?}
    postfix_expression -> primary_expression . {*}
    postfix_expression -> primary_expression . {/}
    postfix_expression -> primary_expression . {%}
    postfix_expression -> primary_expression . {+}
    postfix_expression -> primary_expression . {-}
    postfix_expression -> primary_expression . {LEFT_OP}
    postfix_expression -> primary_expression . {RIGHT_OP}
    postfix_expression -> primary_expression . {<}
    postfix_expression -> primary_expression . {>}
    postfix_expression -> primary_expression . {LE_OP}
    postfix_expression -> primary_expression . {GE_OP}
    postfix_expression -> primary_expression . {EQ_OP}
    postfix_expression -> primary_expression . {NE_OP}
    postfix_expression -> primary_expression . {&}
    postfix_expression -> primary_expression . {^}
    postfix_expression -> primary_expression . {|}
    postfix_expression -> primary_expression . {AND_OP}
    postfix_expression -> primary_expression . {OR_OP}
    postfix_expression -> primary_expression . {,}
    postfix_expression -> primary_expression . {[}
    postfix_expression -> primary_expression . {(}
    postfix_expression -> primary_expression . {.}
    postfix_expression -> primary_expression . {PTR_OP}
    postfix_expression -> primary_expression . {INC_OP}
    postfix_expression -> primary_expression . {DEC_OP}
check: reduce postfix_expression -> primary_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: postfix_expression -> primary_expression . {;}
reduce: postfix_expression -> 2 
reduce item: postfix_expression -> primary_expression . {;}
building new item: unary_expression -> postfix_expression . {;}
building new item: unary_expression -> postfix_expression . {?}
building new item: unary_expression -> postfix_expression . {*}
building new item: unary_expression -> postfix_expression . {/}
building new item: unary_expression -> postfix_expression . {%}
building new item: unary_expression -> postfix_expression . {+}
building new item: unary_expression -> postfix_expression . {-}
building new item: unary_expression -> postfix_expression . {LEFT_OP}
building new item: unary_expression -> postfix_expression . {RIGHT_OP}
building new item: unary_expression -> postfix_expression . {<}
building new item: unary_expression -> postfix_expression . {>}
building new item: unary_expression -> postfix_expression . {LE_OP}
building new item: unary_expression -> postfix_expression . {GE_OP}
building new item: unary_expression -> postfix_expression . {EQ_OP}
building new item: unary_expression -> postfix_expression . {NE_OP}
building new item: unary_expression -> postfix_expression . {&}
building new item: unary_expression -> postfix_expression . {^}
building new item: unary_expression -> postfix_expression . {|}
building new item: unary_expression -> postfix_expression . {AND_OP}
building new item: unary_expression -> postfix_expression . {OR_OP}
building new item: unary_expression -> postfix_expression . {,}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {;}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {;}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {;}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {;}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {;}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {;}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {;}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {?}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {?}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {?}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {?}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {?}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {?}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {?}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {*}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {*}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {*}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {*}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {*}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {*}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {*}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {/}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {/}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {/}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {/}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {/}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {/}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {/}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {%}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {%}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {%}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {%}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {%}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {%}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {%}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {+}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {+}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {+}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {+}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {+}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {+}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {+}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {-}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {-}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {-}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {-}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {-}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {-}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {-}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {<}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {<}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {<}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {<}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {<}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {<}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {<}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {>}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {>}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {>}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {>}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {>}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {>}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {>}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {LE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {LE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LE_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {LE_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LE_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LE_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LE_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {GE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {GE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {GE_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {GE_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {GE_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {GE_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {GE_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {NE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {NE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {NE_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {NE_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {NE_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {NE_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {NE_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {&}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {&}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {&}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {&}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {&}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {&}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {&}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {^}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {^}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {^}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {^}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {^}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {^}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {^}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {|}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {|}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {|}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {|}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {|}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {|}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {|}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {AND_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {AND_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {OR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {OR_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {,}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {,}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {,}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {,}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {,}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {,}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {,}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {[}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {[}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {[}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {[}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {[}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {[}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {[}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {(}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {(}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {(}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {(}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {(}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {(}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {(}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {.}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {.}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {.}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {.}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {.}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {.}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {.}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {INC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {INC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {INC_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {INC_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {INC_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {INC_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {INC_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DEC_OP}
closure post reduce
LOOP: 30, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [return,return]
  [multiplicative_expression,multiplicative_expression]
  [*,*]
  [postfix_expression,postfix_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    unary_expression -> postfix_expression . {;}
    unary_expression -> postfix_expression . {?}
    unary_expression -> postfix_expression . {*}
    unary_expression -> postfix_expression . {/}
    unary_expression -> postfix_expression . {%}
    unary_expression -> postfix_expression . {+}
    unary_expression -> postfix_expression . {-}
    unary_expression -> postfix_expression . {LEFT_OP}
    unary_expression -> postfix_expression . {RIGHT_OP}
    unary_expression -> postfix_expression . {<}
    unary_expression -> postfix_expression . {>}
    unary_expression -> postfix_expression . {LE_OP}
    unary_expression -> postfix_expression . {GE_OP}
    unary_expression -> postfix_expression . {EQ_OP}
    unary_expression -> postfix_expression . {NE_OP}
    unary_expression -> postfix_expression . {&}
    unary_expression -> postfix_expression . {^}
    unary_expression -> postfix_expression . {|}
    unary_expression -> postfix_expression . {AND_OP}
    unary_expression -> postfix_expression . {OR_OP}
    unary_expression -> postfix_expression . {,}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {;}
    postfix_expression -> postfix_expression . [(,(] [),)] {;}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {;}
    postfix_expression -> postfix_expression . [.,.] [id,id] {;}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {;}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {;}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {;}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {?}
    postfix_expression -> postfix_expression . [(,(] [),)] {?}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {?}
    postfix_expression -> postfix_expression . [.,.] [id,id] {?}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {?}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {?}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {?}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {*}
    postfix_expression -> postfix_expression . [(,(] [),)] {*}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {*}
    postfix_expression -> postfix_expression . [.,.] [id,id] {*}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {*}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {*}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {*}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {/}
    postfix_expression -> postfix_expression . [(,(] [),)] {/}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {/}
    postfix_expression -> postfix_expression . [.,.] [id,id] {/}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {/}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {/}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {/}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {%}
    postfix_expression -> postfix_expression . [(,(] [),)] {%}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {%}
    postfix_expression -> postfix_expression . [.,.] [id,id] {%}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {%}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {%}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {%}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {+}
    postfix_expression -> postfix_expression . [(,(] [),)] {+}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {+}
    postfix_expression -> postfix_expression . [.,.] [id,id] {+}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {+}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {+}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {+}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {-}
    postfix_expression -> postfix_expression . [(,(] [),)] {-}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {-}
    postfix_expression -> postfix_expression . [.,.] [id,id] {-}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {-}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {-}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {-}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {<}
    postfix_expression -> postfix_expression . [(,(] [),)] {<}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {<}
    postfix_expression -> postfix_expression . [.,.] [id,id] {<}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {<}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {<}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {<}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {>}
    postfix_expression -> postfix_expression . [(,(] [),)] {>}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {>}
    postfix_expression -> postfix_expression . [.,.] [id,id] {>}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {>}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {>}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {>}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {LE_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {LE_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LE_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {LE_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LE_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LE_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LE_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {GE_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {GE_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {GE_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {GE_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {GE_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {GE_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {GE_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {EQ_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {EQ_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {EQ_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {EQ_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {EQ_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {EQ_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {EQ_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {NE_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {NE_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {NE_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {NE_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {NE_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {NE_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {NE_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {&}
    postfix_expression -> postfix_expression . [(,(] [),)] {&}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {&}
    postfix_expression -> postfix_expression . [.,.] [id,id] {&}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {&}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {&}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {&}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {^}
    postfix_expression -> postfix_expression . [(,(] [),)] {^}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {^}
    postfix_expression -> postfix_expression . [.,.] [id,id] {^}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {^}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {^}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {^}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {|}
    postfix_expression -> postfix_expression . [(,(] [),)] {|}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {|}
    postfix_expression -> postfix_expression . [.,.] [id,id] {|}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {|}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {|}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {|}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {AND_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {AND_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {OR_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {OR_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {,}
    postfix_expression -> postfix_expression . [(,(] [),)] {,}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {,}
    postfix_expression -> postfix_expression . [.,.] [id,id] {,}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {,}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {,}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {,}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {[}
    postfix_expression -> postfix_expression . [(,(] [),)] {[}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {[}
    postfix_expression -> postfix_expression . [.,.] [id,id] {[}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {[}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {[}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {[}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {(}
    postfix_expression -> postfix_expression . [(,(] [),)] {(}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {(}
    postfix_expression -> postfix_expression . [.,.] [id,id] {(}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {(}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {(}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {(}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {.}
    postfix_expression -> postfix_expression . [(,(] [),)] {.}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {.}
    postfix_expression -> postfix_expression . [.,.] [id,id] {.}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {.}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {.}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {.}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {PTR_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {PTR_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {PTR_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {PTR_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {PTR_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {PTR_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {PTR_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {INC_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {INC_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {INC_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {INC_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {INC_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {INC_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {INC_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {DEC_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {DEC_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DEC_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {DEC_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DEC_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DEC_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DEC_OP}
check: reduce unary_expression -> postfix_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: unary_expression -> postfix_expression . {;}
reduce: unary_expression -> 2 
reduce item: unary_expression -> postfix_expression . {;}
building new item: cast_expression -> unary_expression . {;}
building new item: cast_expression -> unary_expression . {?}
building new item: cast_expression -> unary_expression . {*}
building new item: cast_expression -> unary_expression . {/}
building new item: cast_expression -> unary_expression . {%}
building new item: cast_expression -> unary_expression . {+}
building new item: cast_expression -> unary_expression . {-}
building new item: cast_expression -> unary_expression . {LEFT_OP}
building new item: cast_expression -> unary_expression . {RIGHT_OP}
building new item: cast_expression -> unary_expression . {<}
building new item: cast_expression -> unary_expression . {>}
building new item: cast_expression -> unary_expression . {LE_OP}
building new item: cast_expression -> unary_expression . {GE_OP}
building new item: cast_expression -> unary_expression . {EQ_OP}
building new item: cast_expression -> unary_expression . {NE_OP}
building new item: cast_expression -> unary_expression . {&}
building new item: cast_expression -> unary_expression . {^}
building new item: cast_expression -> unary_expression . {|}
building new item: cast_expression -> unary_expression . {AND_OP}
building new item: cast_expression -> unary_expression . {OR_OP}
building new item: cast_expression -> unary_expression . {,}
closure post reduce
LOOP: 31, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [return,return]
  [multiplicative_expression,multiplicative_expression]
  [*,*]
  [unary_expression,unary_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    cast_expression -> unary_expression . {;}
    cast_expression -> unary_expression . {?}
    cast_expression -> unary_expression . {*}
    cast_expression -> unary_expression . {/}
    cast_expression -> unary_expression . {%}
    cast_expression -> unary_expression . {+}
    cast_expression -> unary_expression . {-}
    cast_expression -> unary_expression . {LEFT_OP}
    cast_expression -> unary_expression . {RIGHT_OP}
    cast_expression -> unary_expression . {<}
    cast_expression -> unary_expression . {>}
    cast_expression -> unary_expression . {LE_OP}
    cast_expression -> unary_expression . {GE_OP}
    cast_expression -> unary_expression . {EQ_OP}
    cast_expression -> unary_expression . {NE_OP}
    cast_expression -> unary_expression . {&}
    cast_expression -> unary_expression . {^}
    cast_expression -> unary_expression . {|}
    cast_expression -> unary_expression . {AND_OP}
    cast_expression -> unary_expression . {OR_OP}
    cast_expression -> unary_expression . {,}
check: reduce cast_expression -> unary_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: cast_expression -> unary_expression . {;}
reduce: cast_expression -> 2 
reduce item: cast_expression -> unary_expression . {;}
building new item: multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {;}
building new item: multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {?}
building new item: multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {*}
building new item: multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {/}
building new item: multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {%}
building new item: multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {+}
building new item: multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {-}
building new item: multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {LEFT_OP}
building new item: multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {RIGHT_OP}
building new item: multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {<}
building new item: multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {>}
building new item: multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {LE_OP}
building new item: multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {GE_OP}
building new item: multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {EQ_OP}
building new item: multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {NE_OP}
building new item: multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {&}
building new item: multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {^}
building new item: multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {|}
building new item: multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {AND_OP}
building new item: multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {OR_OP}
building new item: multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {,}
closure post reduce
LOOP: 32, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [return,return]
  [multiplicative_expression,multiplicative_expression]
  [*,*]
  [cast_expression,cast_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {;}
    multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {?}
    multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {*}
    multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {/}
    multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {%}
    multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {+}
    multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {-}
    multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {LEFT_OP}
    multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {RIGHT_OP}
    multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {<}
    multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {>}
    multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {LE_OP}
    multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {GE_OP}
    multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {EQ_OP}
    multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {NE_OP}
    multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {&}
    multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {^}
    multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {|}
    multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {AND_OP}
    multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {OR_OP}
    multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {,}
check: reduce multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {;}
reduce: multiplicative_expression -> x * 2 
reduce item: multiplicative_expression -> multiplicative_expression [*,*] cast_expression . {;}
building new item: additive_expression -> multiplicative_expression . {;}
building new item: additive_expression -> multiplicative_expression . {?}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {;}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {;}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {;}
building new item: additive_expression -> multiplicative_expression . {+}
building new item: additive_expression -> multiplicative_expression . {-}
building new item: additive_expression -> multiplicative_expression . {LEFT_OP}
building new item: additive_expression -> multiplicative_expression . {RIGHT_OP}
building new item: additive_expression -> multiplicative_expression . {<}
building new item: additive_expression -> multiplicative_expression . {>}
building new item: additive_expression -> multiplicative_expression . {LE_OP}
building new item: additive_expression -> multiplicative_expression . {GE_OP}
building new item: additive_expression -> multiplicative_expression . {EQ_OP}
building new item: additive_expression -> multiplicative_expression . {NE_OP}
building new item: additive_expression -> multiplicative_expression . {&}
building new item: additive_expression -> multiplicative_expression . {^}
building new item: additive_expression -> multiplicative_expression . {|}
building new item: additive_expression -> multiplicative_expression . {AND_OP}
building new item: additive_expression -> multiplicative_expression . {OR_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {?}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {?}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {?}
building new item: additive_expression -> multiplicative_expression . {,}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {*}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {*}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {*}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {/}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {/}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {/}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {%}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {%}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {%}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {+}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {+}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {+}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {-}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {-}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {-}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {LEFT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {LEFT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {LEFT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {RIGHT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {RIGHT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {RIGHT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {<}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {<}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {<}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {>}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {>}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {>}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {LE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {LE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {LE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {GE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {GE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {GE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {EQ_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {EQ_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {EQ_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {NE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {NE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {NE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {&}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {&}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {&}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {^}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {^}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {^}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {|}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {|}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {|}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {AND_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {AND_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {AND_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {OR_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {OR_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {OR_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {,}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {,}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {,}
closure post reduce
LOOP: 33, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [return,return]
  [multiplicative_expression,multiplicative_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    additive_expression -> multiplicative_expression . {;}
    additive_expression -> multiplicative_expression . {?}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {;}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {;}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {;}
    additive_expression -> multiplicative_expression . {+}
    additive_expression -> multiplicative_expression . {-}
    additive_expression -> multiplicative_expression . {LEFT_OP}
    additive_expression -> multiplicative_expression . {RIGHT_OP}
    additive_expression -> multiplicative_expression . {<}
    additive_expression -> multiplicative_expression . {>}
    additive_expression -> multiplicative_expression . {LE_OP}
    additive_expression -> multiplicative_expression . {GE_OP}
    additive_expression -> multiplicative_expression . {EQ_OP}
    additive_expression -> multiplicative_expression . {NE_OP}
    additive_expression -> multiplicative_expression . {&}
    additive_expression -> multiplicative_expression . {^}
    additive_expression -> multiplicative_expression . {|}
    additive_expression -> multiplicative_expression . {AND_OP}
    additive_expression -> multiplicative_expression . {OR_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {?}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {?}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {?}
    additive_expression -> multiplicative_expression . {,}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {*}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {*}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {*}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {/}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {/}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {/}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {%}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {%}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {%}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {+}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {+}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {+}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {-}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {-}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {-}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {LEFT_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {LEFT_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {LEFT_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {RIGHT_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {RIGHT_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {RIGHT_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {<}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {<}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {<}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {>}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {>}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {>}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {LE_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {LE_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {LE_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {GE_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {GE_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {GE_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {EQ_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {EQ_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {EQ_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {NE_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {NE_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {NE_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {&}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {&}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {&}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {^}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {^}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {^}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {|}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {|}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {|}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {AND_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {AND_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {AND_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {OR_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {OR_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {OR_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {,}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {,}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {,}
check: reduce additive_expression -> multiplicative_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: additive_expression -> multiplicative_expression . {;}
reduce: additive_expression -> x * 2 
reduce item: additive_expression -> multiplicative_expression . {;}
building new item: shift_expression -> additive_expression . {;}
building new item: shift_expression -> additive_expression . {?}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {;}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {;}
building new item: shift_expression -> additive_expression . {LEFT_OP}
building new item: shift_expression -> additive_expression . {RIGHT_OP}
building new item: shift_expression -> additive_expression . {<}
building new item: shift_expression -> additive_expression . {>}
building new item: shift_expression -> additive_expression . {LE_OP}
building new item: shift_expression -> additive_expression . {GE_OP}
building new item: shift_expression -> additive_expression . {EQ_OP}
building new item: shift_expression -> additive_expression . {NE_OP}
building new item: shift_expression -> additive_expression . {&}
building new item: shift_expression -> additive_expression . {^}
building new item: shift_expression -> additive_expression . {|}
building new item: shift_expression -> additive_expression . {AND_OP}
building new item: shift_expression -> additive_expression . {OR_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {?}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {?}
building new item: shift_expression -> additive_expression . {,}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {+}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {+}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {-}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {-}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {LEFT_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {LEFT_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {RIGHT_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {RIGHT_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {<}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {<}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {>}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {>}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {LE_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {LE_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {GE_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {GE_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {EQ_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {EQ_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {NE_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {NE_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {&}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {&}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {^}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {^}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {|}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {|}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {AND_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {AND_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {OR_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {OR_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {,}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {,}
closure post reduce
LOOP: 34, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [return,return]
  [additive_expression,additive_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    shift_expression -> additive_expression . {;}
    shift_expression -> additive_expression . {?}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {;}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {;}
    shift_expression -> additive_expression . {LEFT_OP}
    shift_expression -> additive_expression . {RIGHT_OP}
    shift_expression -> additive_expression . {<}
    shift_expression -> additive_expression . {>}
    shift_expression -> additive_expression . {LE_OP}
    shift_expression -> additive_expression . {GE_OP}
    shift_expression -> additive_expression . {EQ_OP}
    shift_expression -> additive_expression . {NE_OP}
    shift_expression -> additive_expression . {&}
    shift_expression -> additive_expression . {^}
    shift_expression -> additive_expression . {|}
    shift_expression -> additive_expression . {AND_OP}
    shift_expression -> additive_expression . {OR_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {?}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {?}
    shift_expression -> additive_expression . {,}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {+}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {+}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {-}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {-}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {LEFT_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {LEFT_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {RIGHT_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {RIGHT_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {<}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {<}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {>}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {>}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {LE_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {LE_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {GE_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {GE_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {EQ_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {EQ_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {NE_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {NE_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {&}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {&}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {^}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {^}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {|}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {|}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {AND_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {AND_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {OR_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {OR_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {,}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {,}
check: reduce shift_expression -> additive_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: shift_expression -> additive_expression . {;}
reduce: shift_expression -> x * 2 
reduce item: shift_expression -> additive_expression . {;}
building new item: relational_expression -> shift_expression . {;}
building new item: relational_expression -> shift_expression . {?}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {;}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {;}
building new item: relational_expression -> shift_expression . {<}
building new item: relational_expression -> shift_expression . {>}
building new item: relational_expression -> shift_expression . {LE_OP}
building new item: relational_expression -> shift_expression . {GE_OP}
building new item: relational_expression -> shift_expression . {EQ_OP}
building new item: relational_expression -> shift_expression . {NE_OP}
building new item: relational_expression -> shift_expression . {&}
building new item: relational_expression -> shift_expression . {^}
building new item: relational_expression -> shift_expression . {|}
building new item: relational_expression -> shift_expression . {AND_OP}
building new item: relational_expression -> shift_expression . {OR_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {?}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {?}
building new item: relational_expression -> shift_expression . {,}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {LEFT_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {LEFT_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {RIGHT_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {RIGHT_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {<}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {<}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {>}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {>}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {LE_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {LE_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {GE_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {GE_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {EQ_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {EQ_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {NE_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {NE_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {&}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {&}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {^}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {^}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {|}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {|}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {AND_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {AND_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {OR_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {OR_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {,}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {,}
closure post reduce
LOOP: 35, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [return,return]
  [shift_expression,shift_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    relational_expression -> shift_expression . {;}
    relational_expression -> shift_expression . {?}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {;}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {;}
    relational_expression -> shift_expression . {<}
    relational_expression -> shift_expression . {>}
    relational_expression -> shift_expression . {LE_OP}
    relational_expression -> shift_expression . {GE_OP}
    relational_expression -> shift_expression . {EQ_OP}
    relational_expression -> shift_expression . {NE_OP}
    relational_expression -> shift_expression . {&}
    relational_expression -> shift_expression . {^}
    relational_expression -> shift_expression . {|}
    relational_expression -> shift_expression . {AND_OP}
    relational_expression -> shift_expression . {OR_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {?}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {?}
    relational_expression -> shift_expression . {,}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {LEFT_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {LEFT_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {RIGHT_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {RIGHT_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {<}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {<}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {>}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {>}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {LE_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {LE_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {GE_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {GE_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {EQ_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {EQ_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {NE_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {NE_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {&}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {&}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {^}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {^}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {|}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {|}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {AND_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {AND_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {OR_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {OR_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {,}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {,}
check: reduce relational_expression -> shift_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: relational_expression -> shift_expression . {;}
reduce: relational_expression -> x * 2 
reduce item: relational_expression -> shift_expression . {;}
building new item: equality_expression -> relational_expression . {;}
building new item: equality_expression -> relational_expression . {?}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {;}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {;}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {;}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {;}
building new item: equality_expression -> relational_expression . {EQ_OP}
building new item: equality_expression -> relational_expression . {NE_OP}
building new item: equality_expression -> relational_expression . {&}
building new item: equality_expression -> relational_expression . {^}
building new item: equality_expression -> relational_expression . {|}
building new item: equality_expression -> relational_expression . {AND_OP}
building new item: equality_expression -> relational_expression . {OR_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {?}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {?}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {?}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {?}
building new item: equality_expression -> relational_expression . {,}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {<}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {<}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {<}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {<}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {>}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {>}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {>}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {>}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {LE_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {LE_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {LE_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {LE_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {GE_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {GE_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {GE_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {GE_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {EQ_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {EQ_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {EQ_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {EQ_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {NE_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {NE_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {NE_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {NE_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {&}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {&}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {&}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {&}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {^}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {^}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {^}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {^}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {|}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {|}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {|}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {|}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {AND_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {AND_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {AND_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {AND_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {OR_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {OR_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {OR_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {OR_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {,}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {,}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {,}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {,}
closure post reduce
LOOP: 36, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [return,return]
  [relational_expression,relational_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    equality_expression -> relational_expression . {;}
    equality_expression -> relational_expression . {?}
    relational_expression -> relational_expression . [<,<] shift_expression {;}
    relational_expression -> relational_expression . [>,>] shift_expression {;}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {;}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {;}
    equality_expression -> relational_expression . {EQ_OP}
    equality_expression -> relational_expression . {NE_OP}
    equality_expression -> relational_expression . {&}
    equality_expression -> relational_expression . {^}
    equality_expression -> relational_expression . {|}
    equality_expression -> relational_expression . {AND_OP}
    equality_expression -> relational_expression . {OR_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {?}
    relational_expression -> relational_expression . [>,>] shift_expression {?}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {?}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {?}
    equality_expression -> relational_expression . {,}
    relational_expression -> relational_expression . [<,<] shift_expression {<}
    relational_expression -> relational_expression . [>,>] shift_expression {<}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {<}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {<}
    relational_expression -> relational_expression . [<,<] shift_expression {>}
    relational_expression -> relational_expression . [>,>] shift_expression {>}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {>}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {>}
    relational_expression -> relational_expression . [<,<] shift_expression {LE_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {LE_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {LE_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {LE_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {GE_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {GE_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {GE_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {GE_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {EQ_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {EQ_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {EQ_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {EQ_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {NE_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {NE_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {NE_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {NE_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {&}
    relational_expression -> relational_expression . [>,>] shift_expression {&}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {&}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {&}
    relational_expression -> relational_expression . [<,<] shift_expression {^}
    relational_expression -> relational_expression . [>,>] shift_expression {^}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {^}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {^}
    relational_expression -> relational_expression . [<,<] shift_expression {|}
    relational_expression -> relational_expression . [>,>] shift_expression {|}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {|}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {|}
    relational_expression -> relational_expression . [<,<] shift_expression {AND_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {AND_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {AND_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {AND_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {OR_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {OR_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {OR_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {OR_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {,}
    relational_expression -> relational_expression . [>,>] shift_expression {,}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {,}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {,}
check: reduce equality_expression -> relational_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: equality_expression -> relational_expression . {;}
reduce: equality_expression -> x * 2 
reduce item: equality_expression -> relational_expression . {;}
building new item: and_expression -> equality_expression . {;}
building new item: and_expression -> equality_expression . {?}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {;}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {;}
building new item: and_expression -> equality_expression . {&}
building new item: and_expression -> equality_expression . {^}
building new item: and_expression -> equality_expression . {|}
building new item: and_expression -> equality_expression . {AND_OP}
building new item: and_expression -> equality_expression . {OR_OP}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {?}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {?}
building new item: and_expression -> equality_expression . {,}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {EQ_OP}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {EQ_OP}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {NE_OP}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {NE_OP}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {&}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {&}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {^}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {^}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {|}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {|}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {AND_OP}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {AND_OP}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {OR_OP}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {OR_OP}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {,}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {,}
closure post reduce
LOOP: 37, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [return,return]
  [equality_expression,equality_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    and_expression -> equality_expression . {;}
    and_expression -> equality_expression . {?}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {;}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {;}
    and_expression -> equality_expression . {&}
    and_expression -> equality_expression . {^}
    and_expression -> equality_expression . {|}
    and_expression -> equality_expression . {AND_OP}
    and_expression -> equality_expression . {OR_OP}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {?}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {?}
    and_expression -> equality_expression . {,}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {EQ_OP}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {EQ_OP}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {NE_OP}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {NE_OP}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {&}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {&}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {^}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {^}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {|}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {|}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {AND_OP}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {AND_OP}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {OR_OP}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {OR_OP}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {,}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {,}
check: reduce and_expression -> equality_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: and_expression -> equality_expression . {;}
reduce: and_expression -> x * 2 
reduce item: and_expression -> equality_expression . {;}
building new item: exclusive_or_expression -> and_expression . {;}
building new item: exclusive_or_expression -> and_expression . {?}
building new item: and_expression -> and_expression . [&,&] equality_expression {;}
building new item: exclusive_or_expression -> and_expression . {^}
building new item: exclusive_or_expression -> and_expression . {|}
building new item: exclusive_or_expression -> and_expression . {AND_OP}
building new item: exclusive_or_expression -> and_expression . {OR_OP}
building new item: and_expression -> and_expression . [&,&] equality_expression {?}
building new item: exclusive_or_expression -> and_expression . {,}
building new item: and_expression -> and_expression . [&,&] equality_expression {&}
building new item: and_expression -> and_expression . [&,&] equality_expression {^}
building new item: and_expression -> and_expression . [&,&] equality_expression {|}
building new item: and_expression -> and_expression . [&,&] equality_expression {AND_OP}
building new item: and_expression -> and_expression . [&,&] equality_expression {OR_OP}
building new item: and_expression -> and_expression . [&,&] equality_expression {,}
closure post reduce
LOOP: 38, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [return,return]
  [and_expression,and_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    exclusive_or_expression -> and_expression . {;}
    exclusive_or_expression -> and_expression . {?}
    and_expression -> and_expression . [&,&] equality_expression {;}
    exclusive_or_expression -> and_expression . {^}
    exclusive_or_expression -> and_expression . {|}
    exclusive_or_expression -> and_expression . {AND_OP}
    exclusive_or_expression -> and_expression . {OR_OP}
    and_expression -> and_expression . [&,&] equality_expression {?}
    exclusive_or_expression -> and_expression . {,}
    and_expression -> and_expression . [&,&] equality_expression {&}
    and_expression -> and_expression . [&,&] equality_expression {^}
    and_expression -> and_expression . [&,&] equality_expression {|}
    and_expression -> and_expression . [&,&] equality_expression {AND_OP}
    and_expression -> and_expression . [&,&] equality_expression {OR_OP}
    and_expression -> and_expression . [&,&] equality_expression {,}
check: reduce exclusive_or_expression -> and_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: exclusive_or_expression -> and_expression . {;}
reduce: exclusive_or_expression -> x * 2 
reduce item: exclusive_or_expression -> and_expression . {;}
building new item: inclusive_or_expression -> exclusive_or_expression . {;}
building new item: inclusive_or_expression -> exclusive_or_expression . {?}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {;}
building new item: inclusive_or_expression -> exclusive_or_expression . {|}
building new item: inclusive_or_expression -> exclusive_or_expression . {AND_OP}
building new item: inclusive_or_expression -> exclusive_or_expression . {OR_OP}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {?}
building new item: inclusive_or_expression -> exclusive_or_expression . {,}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {^}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {|}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {AND_OP}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {OR_OP}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {,}
closure post reduce
LOOP: 39, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [return,return]
  [exclusive_or_expression,exclusive_or_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    inclusive_or_expression -> exclusive_or_expression . {;}
    inclusive_or_expression -> exclusive_or_expression . {?}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {;}
    inclusive_or_expression -> exclusive_or_expression . {|}
    inclusive_or_expression -> exclusive_or_expression . {AND_OP}
    inclusive_or_expression -> exclusive_or_expression . {OR_OP}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {?}
    inclusive_or_expression -> exclusive_or_expression . {,}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {^}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {|}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {AND_OP}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {OR_OP}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {,}
check: reduce inclusive_or_expression -> exclusive_or_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: inclusive_or_expression -> exclusive_or_expression . {;}
reduce: inclusive_or_expression -> x * 2 
reduce item: inclusive_or_expression -> exclusive_or_expression . {;}
building new item: logical_and_expression -> inclusive_or_expression . {;}
building new item: logical_and_expression -> inclusive_or_expression . {?}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {;}
building new item: logical_and_expression -> inclusive_or_expression . {AND_OP}
building new item: logical_and_expression -> inclusive_or_expression . {OR_OP}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {?}
building new item: logical_and_expression -> inclusive_or_expression . {,}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {|}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {AND_OP}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {OR_OP}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {,}
closure post reduce
LOOP: 40, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [return,return]
  [inclusive_or_expression,inclusive_or_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    logical_and_expression -> inclusive_or_expression . {;}
    logical_and_expression -> inclusive_or_expression . {?}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {;}
    logical_and_expression -> inclusive_or_expression . {AND_OP}
    logical_and_expression -> inclusive_or_expression . {OR_OP}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {?}
    logical_and_expression -> inclusive_or_expression . {,}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {|}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {AND_OP}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {OR_OP}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {,}
check: reduce logical_and_expression -> inclusive_or_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: logical_and_expression -> inclusive_or_expression . {;}
reduce: logical_and_expression -> x * 2 
reduce item: logical_and_expression -> inclusive_or_expression . {;}
building new item: logical_or_expression -> logical_and_expression . {;}
building new item: logical_or_expression -> logical_and_expression . {?}
building new item: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {;}
building new item: logical_or_expression -> logical_and_expression . {OR_OP}
building new item: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {?}
building new item: logical_or_expression -> logical_and_expression . {,}
building new item: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {AND_OP}
building new item: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {OR_OP}
building new item: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {,}
closure post reduce
LOOP: 41, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [return,return]
  [logical_and_expression,logical_and_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    logical_or_expression -> logical_and_expression . {;}
    logical_or_expression -> logical_and_expression . {?}
    logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {;}
    logical_or_expression -> logical_and_expression . {OR_OP}
    logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {?}
    logical_or_expression -> logical_and_expression . {,}
    logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {AND_OP}
    logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {OR_OP}
    logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {,}
check: reduce logical_or_expression -> logical_and_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: logical_or_expression -> logical_and_expression . {;}
reduce: logical_or_expression -> x * 2 
reduce item: logical_or_expression -> logical_and_expression . {;}
building new item: conditional_expression -> logical_or_expression . {;}
building new item: conditional_expression -> logical_or_expression . [?,?] expression [:,:] conditional_expression {;}
building new item: logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {;}
building new item: logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {?}
building new item: conditional_expression -> logical_or_expression . {,}
building new item: conditional_expression -> logical_or_expression . [?,?] expression [:,:] conditional_expression {,}
building new item: logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {OR_OP}
building new item: logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {,}
closure post reduce
LOOP: 42, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [return,return]
  [logical_or_expression,logical_or_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    conditional_expression -> logical_or_expression . {;}
    conditional_expression -> logical_or_expression . [?,?] expression [:,:] conditional_expression {;}
    logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {;}
    logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {?}
    conditional_expression -> logical_or_expression . {,}
    conditional_expression -> logical_or_expression . [?,?] expression [:,:] conditional_expression {,}
    logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {OR_OP}
    logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {,}
check: reduce conditional_expression -> logical_or_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: conditional_expression -> logical_or_expression . {;}
reduce: conditional_expression -> x * 2 
reduce item: conditional_expression -> logical_or_expression . {;}
building new item: assignment_expression -> conditional_expression . {;}
building new item: assignment_expression -> conditional_expression . {,}
closure post reduce
LOOP: 43, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [return,return]
  [conditional_expression,conditional_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    assignment_expression -> conditional_expression . {;}
    assignment_expression -> conditional_expression . {,}
check: reduce assignment_expression -> conditional_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: assignment_expression -> conditional_expression . {;}
reduce: assignment_expression -> x * 2 
reduce item: assignment_expression -> conditional_expression . {;}
building new item: expression -> assignment_expression . {;}
building new item: expression -> assignment_expression . {,}
closure post reduce
LOOP: 44, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [return,return]
  [assignment_expression,assignment_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    expression -> assignment_expression . {;}
    expression -> assignment_expression . {,}
check: reduce expression -> assignment_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: expression -> assignment_expression . {;}
reduce: expression -> x * 2 
reduce item: expression -> assignment_expression . {;}
building new item: jump_statement -> [return,return] expression . [;,;] {}}
building new item: jump_statement -> [return,return] expression . [;,;] {!}
building new item: jump_statement -> [return,return] expression . [;,;] {&}
building new item: jump_statement -> [return,return] expression . [;,;] {(}
building new item: jump_statement -> [return,return] expression . [;,;] {*}
building new item: jump_statement -> [return,return] expression . [;,;] {+}
building new item: jump_statement -> [return,return] expression . [;,;] {-}
building new item: jump_statement -> [return,return] expression . [;,;] {;}
building new item: jump_statement -> [return,return] expression . [;,;] {DEC_OP}
building new item: jump_statement -> [return,return] expression . [;,;] {INC_OP}
building new item: jump_statement -> [return,return] expression . [;,;] {TYPE_NAME}
building new item: jump_statement -> [return,return] expression . [;,;] {auto}
building new item: jump_statement -> [return,return] expression . [;,;] {bool}
building new item: jump_statement -> [return,return] expression . [;,;] {break}
building new item: jump_statement -> [return,return] expression . [;,;] {case}
building new item: jump_statement -> [return,return] expression . [;,;] {char}
building new item: jump_statement -> [return,return] expression . [;,;] {complex}
building new item: jump_statement -> [return,return] expression . [;,;] {const}
building new item: jump_statement -> [return,return] expression . [;,;] {continue}
building new item: jump_statement -> [return,return] expression . [;,;] {default}
building new item: jump_statement -> [return,return] expression . [;,;] {do}
building new item: jump_statement -> [return,return] expression . [;,;] {double}
building new item: jump_statement -> [return,return] expression . [;,;] {enum}
building new item: jump_statement -> [return,return] expression . [;,;] {extern}
building new item: jump_statement -> [return,return] expression . [;,;] {float}
building new item: jump_statement -> [return,return] expression . [;,;] {for}
building new item: jump_statement -> [return,return] expression . [;,;] {goto}
building new item: jump_statement -> [return,return] expression . [;,;] {id}
building new item: jump_statement -> [return,return] expression . [;,;] {if}
building new item: jump_statement -> [return,return] expression . [;,;] {imaginary}
building new item: jump_statement -> [return,return] expression . [;,;] {inline}
building new item: jump_statement -> [return,return] expression . [;,;] {int}
building new item: jump_statement -> [return,return] expression . [;,;] {long}
building new item: jump_statement -> [return,return] expression . [;,;] {num}
building new item: jump_statement -> [return,return] expression . [;,;] {register}
building new item: jump_statement -> [return,return] expression . [;,;] {restrict}
building new item: jump_statement -> [return,return] expression . [;,;] {return}
building new item: jump_statement -> [return,return] expression . [;,;] {short}
building new item: jump_statement -> [return,return] expression . [;,;] {signed}
building new item: jump_statement -> [return,return] expression . [;,;] {sizeof}
building new item: jump_statement -> [return,return] expression . [;,;] {static}
building new item: jump_statement -> [return,return] expression . [;,;] {string}
building new item: jump_statement -> [return,return] expression . [;,;] {struct}
building new item: jump_statement -> [return,return] expression . [;,;] {switch}
building new item: jump_statement -> [return,return] expression . [;,;] {typedef}
building new item: jump_statement -> [return,return] expression . [;,;] {union}
building new item: jump_statement -> [return,return] expression . [;,;] {unsigned}
building new item: jump_statement -> [return,return] expression . [;,;] {void}
building new item: jump_statement -> [return,return] expression . [;,;] {volatile}
building new item: jump_statement -> [return,return] expression . [;,;] {while}
building new item: jump_statement -> [return,return] expression . [;,;] {{}
building new item: jump_statement -> [return,return] expression . [;,;] {~}
building new item: expression -> expression . [,,,] assignment_expression {;}
building new item: expression -> expression . [,,,] assignment_expression {,}
closure post reduce
LOOP: 45, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [return,return]
  [expression,expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    jump_statement -> [return,return] expression . [;,;] {}}
    jump_statement -> [return,return] expression . [;,;] {!}
    jump_statement -> [return,return] expression . [;,;] {&}
    jump_statement -> [return,return] expression . [;,;] {(}
    jump_statement -> [return,return] expression . [;,;] {*}
    jump_statement -> [return,return] expression . [;,;] {+}
    jump_statement -> [return,return] expression . [;,;] {-}
    jump_statement -> [return,return] expression . [;,;] {;}
    jump_statement -> [return,return] expression . [;,;] {DEC_OP}
    jump_statement -> [return,return] expression . [;,;] {INC_OP}
    jump_statement -> [return,return] expression . [;,;] {TYPE_NAME}
    jump_statement -> [return,return] expression . [;,;] {auto}
    jump_statement -> [return,return] expression . [;,;] {bool}
    jump_statement -> [return,return] expression . [;,;] {break}
    jump_statement -> [return,return] expression . [;,;] {case}
    jump_statement -> [return,return] expression . [;,;] {char}
    jump_statement -> [return,return] expression . [;,;] {complex}
    jump_statement -> [return,return] expression . [;,;] {const}
    jump_statement -> [return,return] expression . [;,;] {continue}
    jump_statement -> [return,return] expression . [;,;] {default}
    jump_statement -> [return,return] expression . [;,;] {do}
    jump_statement -> [return,return] expression . [;,;] {double}
    jump_statement -> [return,return] expression . [;,;] {enum}
    jump_statement -> [return,return] expression . [;,;] {extern}
    jump_statement -> [return,return] expression . [;,;] {float}
    jump_statement -> [return,return] expression . [;,;] {for}
    jump_statement -> [return,return] expression . [;,;] {goto}
    jump_statement -> [return,return] expression . [;,;] {id}
    jump_statement -> [return,return] expression . [;,;] {if}
    jump_statement -> [return,return] expression . [;,;] {imaginary}
    jump_statement -> [return,return] expression . [;,;] {inline}
    jump_statement -> [return,return] expression . [;,;] {int}
    jump_statement -> [return,return] expression . [;,;] {long}
    jump_statement -> [return,return] expression . [;,;] {num}
    jump_statement -> [return,return] expression . [;,;] {register}
    jump_statement -> [return,return] expression . [;,;] {restrict}
    jump_statement -> [return,return] expression . [;,;] {return}
    jump_statement -> [return,return] expression . [;,;] {short}
    jump_statement -> [return,return] expression . [;,;] {signed}
    jump_statement -> [return,return] expression . [;,;] {sizeof}
    jump_statement -> [return,return] expression . [;,;] {static}
    jump_statement -> [return,return] expression . [;,;] {string}
    jump_statement -> [return,return] expression . [;,;] {struct}
    jump_statement -> [return,return] expression . [;,;] {switch}
    jump_statement -> [return,return] expression . [;,;] {typedef}
    jump_statement -> [return,return] expression . [;,;] {union}
    jump_statement -> [return,return] expression . [;,;] {unsigned}
    jump_statement -> [return,return] expression . [;,;] {void}
    jump_statement -> [return,return] expression . [;,;] {volatile}
    jump_statement -> [return,return] expression . [;,;] {while}
    jump_statement -> [return,return] expression . [;,;] {{}
    jump_statement -> [return,return] expression . [;,;] {~}
    expression -> expression . [,,,] assignment_expression {;}
    expression -> expression . [,,,] assignment_expression {,}
check: shift jump_statement -> [return,return] expression . [;,;] {}}
check: shift jump_statement -> [return,return] expression . [;,;] {!}
check: shift jump_statement -> [return,return] expression . [;,;] {&}
check: shift jump_statement -> [return,return] expression . [;,;] {(}
check: shift jump_statement -> [return,return] expression . [;,;] {*}
check: shift jump_statement -> [return,return] expression . [;,;] {+}
check: shift jump_statement -> [return,return] expression . [;,;] {-}
check: shift jump_statement -> [return,return] expression . [;,;] {;}
check: shift jump_statement -> [return,return] expression . [;,;] {DEC_OP}
check: shift jump_statement -> [return,return] expression . [;,;] {INC_OP}
check: shift jump_statement -> [return,return] expression . [;,;] {TYPE_NAME}
check: shift jump_statement -> [return,return] expression . [;,;] {auto}
check: shift jump_statement -> [return,return] expression . [;,;] {bool}
check: shift jump_statement -> [return,return] expression . [;,;] {break}
check: shift jump_statement -> [return,return] expression . [;,;] {case}
check: shift jump_statement -> [return,return] expression . [;,;] {char}
check: shift jump_statement -> [return,return] expression . [;,;] {complex}
check: shift jump_statement -> [return,return] expression . [;,;] {const}
check: shift jump_statement -> [return,return] expression . [;,;] {continue}
check: shift jump_statement -> [return,return] expression . [;,;] {default}
check: shift jump_statement -> [return,return] expression . [;,;] {do}
check: shift jump_statement -> [return,return] expression . [;,;] {double}
check: shift jump_statement -> [return,return] expression . [;,;] {enum}
check: shift jump_statement -> [return,return] expression . [;,;] {extern}
check: shift jump_statement -> [return,return] expression . [;,;] {float}
check: shift jump_statement -> [return,return] expression . [;,;] {for}
check: shift jump_statement -> [return,return] expression . [;,;] {goto}
check: shift jump_statement -> [return,return] expression . [;,;] {id}
check: shift jump_statement -> [return,return] expression . [;,;] {if}
check: shift jump_statement -> [return,return] expression . [;,;] {imaginary}
check: shift jump_statement -> [return,return] expression . [;,;] {inline}
check: shift jump_statement -> [return,return] expression . [;,;] {int}
check: shift jump_statement -> [return,return] expression . [;,;] {long}
check: shift jump_statement -> [return,return] expression . [;,;] {num}
check: shift jump_statement -> [return,return] expression . [;,;] {register}
check: shift jump_statement -> [return,return] expression . [;,;] {restrict}
check: shift jump_statement -> [return,return] expression . [;,;] {return}
check: shift jump_statement -> [return,return] expression . [;,;] {short}
check: shift jump_statement -> [return,return] expression . [;,;] {signed}
check: shift jump_statement -> [return,return] expression . [;,;] {sizeof}
check: shift jump_statement -> [return,return] expression . [;,;] {static}
check: shift jump_statement -> [return,return] expression . [;,;] {string}
check: shift jump_statement -> [return,return] expression . [;,;] {struct}
check: shift jump_statement -> [return,return] expression . [;,;] {switch}
check: shift jump_statement -> [return,return] expression . [;,;] {typedef}
check: shift jump_statement -> [return,return] expression . [;,;] {union}
check: shift jump_statement -> [return,return] expression . [;,;] {unsigned}
check: shift jump_statement -> [return,return] expression . [;,;] {void}
check: shift jump_statement -> [return,return] expression . [;,;] {volatile}
check: shift jump_statement -> [return,return] expression . [;,;] {while}
check: shift jump_statement -> [return,return] expression . [;,;] {{}
check: shift jump_statement -> [return,return] expression . [;,;] {~}
shifts: 52, reduces: 0, accepts: 0
shifting [;,;]
building new item: jump_statement -> [return,return] expression [;,;] . {}}
building new item: jump_statement -> [return,return] expression [;,;] . {!}
building new item: jump_statement -> [return,return] expression [;,;] . {&}
building new item: jump_statement -> [return,return] expression [;,;] . {(}
building new item: jump_statement -> [return,return] expression [;,;] . {*}
building new item: jump_statement -> [return,return] expression [;,;] . {+}
building new item: jump_statement -> [return,return] expression [;,;] . {-}
building new item: jump_statement -> [return,return] expression [;,;] . {;}
building new item: jump_statement -> [return,return] expression [;,;] . {DEC_OP}
building new item: jump_statement -> [return,return] expression [;,;] . {INC_OP}
building new item: jump_statement -> [return,return] expression [;,;] . {TYPE_NAME}
building new item: jump_statement -> [return,return] expression [;,;] . {auto}
building new item: jump_statement -> [return,return] expression [;,;] . {bool}
building new item: jump_statement -> [return,return] expression [;,;] . {break}
building new item: jump_statement -> [return,return] expression [;,;] . {case}
building new item: jump_statement -> [return,return] expression [;,;] . {char}
building new item: jump_statement -> [return,return] expression [;,;] . {complex}
building new item: jump_statement -> [return,return] expression [;,;] . {const}
building new item: jump_statement -> [return,return] expression [;,;] . {continue}
building new item: jump_statement -> [return,return] expression [;,;] . {default}
building new item: jump_statement -> [return,return] expression [;,;] . {do}
building new item: jump_statement -> [return,return] expression [;,;] . {double}
building new item: jump_statement -> [return,return] expression [;,;] . {enum}
building new item: jump_statement -> [return,return] expression [;,;] . {extern}
building new item: jump_statement -> [return,return] expression [;,;] . {float}
building new item: jump_statement -> [return,return] expression [;,;] . {for}
building new item: jump_statement -> [return,return] expression [;,;] . {goto}
building new item: jump_statement -> [return,return] expression [;,;] . {id}
building new item: jump_statement -> [return,return] expression [;,;] . {if}
building new item: jump_statement -> [return,return] expression [;,;] . {imaginary}
building new item: jump_statement -> [return,return] expression [;,;] . {inline}
building new item: jump_statement -> [return,return] expression [;,;] . {int}
building new item: jump_statement -> [return,return] expression [;,;] . {long}
building new item: jump_statement -> [return,return] expression [;,;] . {num}
building new item: jump_statement -> [return,return] expression [;,;] . {register}
building new item: jump_statement -> [return,return] expression [;,;] . {restrict}
building new item: jump_statement -> [return,return] expression [;,;] . {return}
building new item: jump_statement -> [return,return] expression [;,;] . {short}
building new item: jump_statement -> [return,return] expression [;,;] . {signed}
building new item: jump_statement -> [return,return] expression [;,;] . {sizeof}
building new item: jump_statement -> [return,return] expression [;,;] . {static}
building new item: jump_statement -> [return,return] expression [;,;] . {string}
building new item: jump_statement -> [return,return] expression [;,;] . {struct}
building new item: jump_statement -> [return,return] expression [;,;] . {switch}
building new item: jump_statement -> [return,return] expression [;,;] . {typedef}
building new item: jump_statement -> [return,return] expression [;,;] . {union}
building new item: jump_statement -> [return,return] expression [;,;] . {unsigned}
building new item: jump_statement -> [return,return] expression [;,;] . {void}
building new item: jump_statement -> [return,return] expression [;,;] . {volatile}
building new item: jump_statement -> [return,return] expression [;,;] . {while}
building new item: jump_statement -> [return,return] expression [;,;] . {{}
building new item: jump_statement -> [return,return] expression [;,;] . {~}
closure post shift
LOOP: 46, token: }, token_value: }
[verbose dump (every loop)]
parser state:
current token: }, value: }
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [return,return]
  [expression,expression]
  [;,;]
 state stack (kernel items of top state only):
  state 6
   kernel items:
    jump_statement -> [return,return] expression [;,;] . {}}
    jump_statement -> [return,return] expression [;,;] . {!}
    jump_statement -> [return,return] expression [;,;] . {&}
    jump_statement -> [return,return] expression [;,;] . {(}
    jump_statement -> [return,return] expression [;,;] . {*}
    jump_statement -> [return,return] expression [;,;] . {+}
    jump_statement -> [return,return] expression [;,;] . {-}
    jump_statement -> [return,return] expression [;,;] . {;}
    jump_statement -> [return,return] expression [;,;] . {DEC_OP}
    jump_statement -> [return,return] expression [;,;] . {INC_OP}
    jump_statement -> [return,return] expression [;,;] . {TYPE_NAME}
    jump_statement -> [return,return] expression [;,;] . {auto}
    jump_statement -> [return,return] expression [;,;] . {bool}
    jump_statement -> [return,return] expression [;,;] . {break}
    jump_statement -> [return,return] expression [;,;] . {case}
    jump_statement -> [return,return] expression [;,;] . {char}
    jump_statement -> [return,return] expression [;,;] . {complex}
    jump_statement -> [return,return] expression [;,;] . {const}
    jump_statement -> [return,return] expression [;,;] . {continue}
    jump_statement -> [return,return] expression [;,;] . {default}
    jump_statement -> [return,return] expression [;,;] . {do}
    jump_statement -> [return,return] expression [;,;] . {double}
    jump_statement -> [return,return] expression [;,;] . {enum}
    jump_statement -> [return,return] expression [;,;] . {extern}
    jump_statement -> [return,return] expression [;,;] . {float}
    jump_statement -> [return,return] expression [;,;] . {for}
    jump_statement -> [return,return] expression [;,;] . {goto}
    jump_statement -> [return,return] expression [;,;] . {id}
    jump_statement -> [return,return] expression [;,;] . {if}
    jump_statement -> [return,return] expression [;,;] . {imaginary}
    jump_statement -> [return,return] expression [;,;] . {inline}
    jump_statement -> [return,return] expression [;,;] . {int}
    jump_statement -> [return,return] expression [;,;] . {long}
    jump_statement -> [return,return] expression [;,;] . {num}
    jump_statement -> [return,return] expression [;,;] . {register}
    jump_statement -> [return,return] expression [;,;] . {restrict}
    jump_statement -> [return,return] expression [;,;] . {return}
    jump_statement -> [return,return] expression [;,;] . {short}
    jump_statement -> [return,return] expression [;,;] . {signed}
    jump_statement -> [return,return] expression [;,;] . {sizeof}
    jump_statement -> [return,return] expression [;,;] . {static}
    jump_statement -> [return,return] expression [;,;] . {string}
    jump_statement -> [return,return] expression [;,;] . {struct}
    jump_statement -> [return,return] expression [;,;] . {switch}
    jump_statement -> [return,return] expression [;,;] . {typedef}
    jump_statement -> [return,return] expression [;,;] . {union}
    jump_statement -> [return,return] expression [;,;] . {unsigned}
    jump_statement -> [return,return] expression [;,;] . {void}
    jump_statement -> [return,return] expression [;,;] . {volatile}
    jump_statement -> [return,return] expression [;,;] . {while}
    jump_statement -> [return,return] expression [;,;] . {{}
    jump_statement -> [return,return] expression [;,;] . {~}
check: reduce jump_statement -> [return,return] expression [;,;] . {}}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: jump_statement -> [return,return] expression [;,;] . {}}
reduce: jump_statement -> return x * 2 ; 
reduce item: jump_statement -> [return,return] expression [;,;] . {}}
building new item: statement -> jump_statement . {}}
building new item: statement -> jump_statement . {!}
building new item: statement -> jump_statement . {&}
building new item: statement -> jump_statement . {(}
building new item: statement -> jump_statement . {*}
building new item: statement -> jump_statement . {+}
building new item: statement -> jump_statement . {-}
building new item: statement -> jump_statement . {;}
building new item: statement -> jump_statement . {DEC_OP}
building new item: statement -> jump_statement . {INC_OP}
building new item: statement -> jump_statement . {TYPE_NAME}
building new item: statement -> jump_statement . {auto}
building new item: statement -> jump_statement . {bool}
building new item: statement -> jump_statement . {break}
building new item: statement -> jump_statement . {case}
building new item: statement -> jump_statement . {char}
building new item: statement -> jump_statement . {complex}
building new item: statement -> jump_statement . {const}
building new item: statement -> jump_statement . {continue}
building new item: statement -> jump_statement . {default}
building new item: statement -> jump_statement . {do}
building new item: statement -> jump_statement . {double}
building new item: statement -> jump_statement . {enum}
building new item: statement -> jump_statement . {extern}
building new item: statement -> jump_statement . {float}
building new item: statement -> jump_statement . {for}
building new item: statement -> jump_statement . {goto}
building new item: statement -> jump_statement . {id}
building new item: statement -> jump_statement . {if}
building new item: statement -> jump_statement . {imaginary}
building new item: statement -> jump_statement . {inline}
building new item: statement -> jump_statement . {int}
building new item: statement -> jump_statement . {long}
building new item: statement -> jump_statement . {num}
building new item: statement -> jump_statement . {register}
building new item: statement -> jump_statement . {restrict}
building new item: statement -> jump_statement . {return}
building new item: statement -> jump_statement . {short}
building new item: statement -> jump_statement . {signed}
building new item: statement -> jump_statement . {sizeof}
building new item: statement -> jump_statement . {static}
building new item: statement -> jump_statement . {string}
building new item: statement -> jump_statement . {struct}
building new item: statement -> jump_statement . {switch}
building new item: statement -> jump_statement . {typedef}
building new item: statement -> jump_statement . {union}
building new item: statement -> jump_statement . {unsigned}
building new item: statement -> jump_statement . {void}
building new item: statement -> jump_statement . {volatile}
building new item: statement -> jump_statement . {while}
building new item: statement -> jump_statement . {{}
building new item: statement -> jump_statement . {~}
closure post reduce
LOOP: 47, token: }, token_value: }
[verbose dump (every loop)]
parser state:
current token: }, value: }
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [jump_statement,jump_statement]
 state stack (kernel items of top state only):
  state 4
   kernel items:
    statement -> jump_statement . {}}
    statement -> jump_statement . {!}
    statement -> jump_statement . {&}
    statement -> jump_statement . {(}
    statement -> jump_statement . {*}
    statement -> jump_statement . {+}
    statement -> jump_statement . {-}
    statement -> jump_statement . {;}
    statement -> jump_statement . {DEC_OP}
    statement -> jump_statement . {INC_OP}
    statement -> jump_statement . {TYPE_NAME}
    statement -> jump_statement . {auto}
    statement -> jump_statement . {bool}
    statement -> jump_statement . {break}
    statement -> jump_statement . {case}
    statement -> jump_statement . {char}
    statement -> jump_statement . {complex}
    statement -> jump_statement . {const}
    statement -> jump_statement . {continue}
    statement -> jump_statement . {default}
    statement -> jump_statement . {do}
    statement -> jump_statement . {double}
    statement -> jump_statement . {enum}
    statement -> jump_statement . {extern}
    statement -> jump_statement . {float}
    statement -> jump_statement . {for}
    statement -> jump_statement . {goto}
    statement -> jump_statement . {id}
    statement -> jump_statement . {if}
    statement -> jump_statement . {imaginary}
    statement -> jump_statement . {inline}
    statement -> jump_statement . {int}
    statement -> jump_statement . {long}
    statement -> jump_statement . {num}
    statement -> jump_statement . {register}
    statement -> jump_statement . {restrict}
    statement -> jump_statement . {return}
    statement -> jump_statement . {short}
    statement -> jump_statement . {signed}
    statement -> jump_statement . {sizeof}
    statement -> jump_statement . {static}
    statement -> jump_statement . {string}
    statement -> jump_statement . {struct}
    statement -> jump_statement . {switch}
    statement -> jump_statement . {typedef}
    statement -> jump_statement . {union}
    statement -> jump_statement . {unsigned}
    statement -> jump_statement . {void}
    statement -> jump_statement . {volatile}
    statement -> jump_statement . {while}
    statement -> jump_statement . {{}
    statement -> jump_statement . {~}
check: reduce statement -> jump_statement . {}}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: statement -> jump_statement . {}}
reduce: statement -> return x * 2 ; 
reduce item: statement -> jump_statement . {}}
building new item: block_item -> statement . {}}
building new item: block_item -> statement . {!}
building new item: block_item -> statement . {&}
building new item: block_item -> statement . {(}
building new item: block_item -> statement . {*}
building new item: block_item -> statement . {+}
building new item: block_item -> statement . {-}
building new item: block_item -> statement . {;}
building new item: block_item -> statement . {DEC_OP}
building new item: block_item -> statement . {INC_OP}
building new item: block_item -> statement . {TYPE_NAME}
building new item: block_item -> statement . {auto}
building new item: block_item -> statement . {bool}
building new item: block_item -> statement . {break}
building new item: block_item -> statement . {case}
building new item: block_item -> statement . {char}
building new item: block_item -> statement . {complex}
building new item: block_item -> statement . {const}
building new item: block_item -> statement . {continue}
building new item: block_item -> statement . {default}
building new item: block_item -> statement . {do}
building new item: block_item -> statement . {double}
building new item: block_item -> statement . {enum}
building new item: block_item -> statement . {extern}
building new item: block_item -> statement . {float}
building new item: block_item -> statement . {for}
building new item: block_item -> statement . {goto}
building new item: block_item -> statement . {id}
building new item: block_item -> statement . {if}
building new item: block_item -> statement . {imaginary}
building new item: block_item -> statement . {inline}
building new item: block_item -> statement . {int}
building new item: block_item -> statement . {long}
building new item: block_item -> statement . {num}
building new item: block_item -> statement . {register}
building new item: block_item -> statement . {restrict}
building new item: block_item -> statement . {return}
building new item: block_item -> statement . {short}
building new item: block_item -> statement . {signed}
building new item: block_item -> statement . {sizeof}
building new item: block_item -> statement . {static}
building new item: block_item -> statement . {string}
building new item: block_item -> statement . {struct}
building new item: block_item -> statement . {switch}
building new item: block_item -> statement . {typedef}
building new item: block_item -> statement . {union}
building new item: block_item -> statement . {unsigned}
building new item: block_item -> statement . {void}
building new item: block_item -> statement . {volatile}
building new item: block_item -> statement . {while}
building new item: block_item -> statement . {{}
building new item: block_item -> statement . {~}
closure post reduce
LOOP: 48, token: }, token_value: }
[verbose dump (every loop)]
parser state:
current token: }, value: }
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [statement,statement]
 state stack (kernel items of top state only):
  state 4
   kernel items:
    block_item -> statement . {}}
    block_item -> statement . {!}
    block_item -> statement . {&}
    block_item -> statement . {(}
    block_item -> statement . {*}
    block_item -> statement . {+}
    block_item -> statement . {-}
    block_item -> statement . {;}
    block_item -> statement . {DEC_OP}
    block_item -> statement . {INC_OP}
    block_item -> statement . {TYPE_NAME}
    block_item -> statement . {auto}
    block_item -> statement . {bool}
    block_item -> statement . {break}
    block_item -> statement . {case}
    block_item -> statement . {char}
    block_item -> statement . {complex}
    block_item -> statement . {const}
    block_item -> statement . {continue}
    block_item -> statement . {default}
    block_item -> statement . {do}
    block_item -> statement . {double}
    block_item -> statement . {enum}
    block_item -> statement . {extern}
    block_item -> statement . {float}
    block_item -> statement . {for}
    block_item -> statement . {goto}
    block_item -> statement . {id}
    block_item -> statement . {if}
    block_item -> statement . {imaginary}
    block_item -> statement . {inline}
    block_item -> statement . {int}
    block_item -> statement . {long}
    block_item -> statement . {num}
    block_item -> statement . {register}
    block_item -> statement . {restrict}
    block_item -> statement . {return}
    block_item -> statement . {short}
    block_item -> statement . {signed}
    block_item -> statement . {sizeof}
    block_item -> statement . {static}
    block_item -> statement . {string}
    block_item -> statement . {struct}
    block_item -> statement . {switch}
    block_item -> statement . {typedef}
    block_item -> statement . {union}
    block_item -> statement . {unsigned}
    block_item -> statement . {void}
    block_item -> statement . {volatile}
    block_item -> statement . {while}
    block_item -> statement . {{}
    block_item -> statement . {~}
check: reduce block_item -> statement . {}}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: block_item -> statement . {}}
reduce: block_item -> return x * 2 ; 
reduce item: block_item -> statement . {}}
building new item: block_item_list -> block_item . {}}
building new item: block_item_list -> block_item . {!}
building new item: block_item_list -> block_item . {&}
building new item: block_item_list -> block_item . {(}
building new item: block_item_list -> block_item . {*}
building new item: block_item_list -> block_item . {+}
building new item: block_item_list -> block_item . {-}
building new item: block_item_list -> block_item . {;}
building new item: block_item_list -> block_item . {DEC_OP}
building new item: block_item_list -> block_item . {INC_OP}
building new item: block_item_list -> block_item . {TYPE_NAME}
building new item: block_item_list -> block_item . {auto}
building new item: block_item_list -> block_item . {bool}
building new item: block_item_list -> block_item . {break}
building new item: block_item_list -> block_item . {case}
building new item: block_item_list -> block_item . {char}
building new item: block_item_list -> block_item . {complex}
building new item: block_item_list -> block_item . {const}
building new item: block_item_list -> block_item . {continue}
building new item: block_item_list -> block_item . {default}
building new item: block_item_list -> block_item . {do}
building new item: block_item_list -> block_item . {double}
building new item: block_item_list -> block_item . {enum}
building new item: block_item_list -> block_item . {extern}
building new item: block_item_list -> block_item . {float}
building new item: block_item_list -> block_item . {for}
building new item: block_item_list -> block_item . {goto}
building new item: block_item_list -> block_item . {id}
building new item: block_item_list -> block_item . {if}
building new item: block_item_list -> block_item . {imaginary}
building new item: block_item_list -> block_item . {inline}
building new item: block_item_list -> block_item . {int}
building new item: block_item_list -> block_item . {long}
building new item: block_item_list -> block_item . {num}
building new item: block_item_list -> block_item . {register}
building new item: block_item_list -> block_item . {restrict}
building new item: block_item_list -> block_item . {return}
building new item: block_item_list -> block_item . {short}
building new item: block_item_list -> block_item . {signed}
building new item: block_item_list -> block_item . {sizeof}
building new item: block_item_list -> block_item . {static}
building new item: block_item_list -> block_item . {string}
building new item: block_item_list -> block_item . {struct}
building new item: block_item_list -> block_item . {switch}
building new item: block_item_list -> block_item . {typedef}
building new item: block_item_list -> block_item . {union}
building new item: block_item_list -> block_item . {unsigned}
building new item: block_item_list -> block_item . {void}
building new item: block_item_list -> block_item . {volatile}
building new item: block_item_list -> block_item . {while}
building new item: block_item_list -> block_item . {{}
building new item: block_item_list -> block_item . {~}
closure post reduce
LOOP: 49, token: }, token_value: }
[verbose dump (every loop)]
parser state:
current token: }, value: }
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [block_item,block_item]
 state stack (kernel items of top state only):
  state 4
   kernel items:
    block_item_list -> block_item . {}}
    block_item_list -> block_item . {!}
    block_item_list -> block_item . {&}
    block_item_list -> block_item . {(}
    block_item_list -> block_item . {*}
    block_item_list -> block_item . {+}
    block_item_list -> block_item . {-}
    block_item_list -> block_item . {;}
    block_item_list -> block_item . {DEC_OP}
    block_item_list -> block_item . {INC_OP}
    block_item_list -> block_item . {TYPE_NAME}
    block_item_list -> block_item . {auto}
    block_item_list -> block_item . {bool}
    block_item_list -> block_item . {break}
    block_item_list -> block_item . {case}
    block_item_list -> block_item . {char}
    block_item_list -> block_item . {complex}
    block_item_list -> block_item . {const}
    block_item_list -> block_item . {continue}
    block_item_list -> block_item . {default}
    block_item_list -> block_item . {do}
    block_item_list -> block_item . {double}
    block_item_list -> block_item . {enum}
    block_item_list -> block_item . {extern}
    block_item_list -> block_item . {float}
    block_item_list -> block_item . {for}
    block_item_list -> block_item . {goto}
    block_item_list -> block_item . {id}
    block_item_list -> block_item . {if}
    block_item_list -> block_item . {imaginary}
    block_item_list -> block_item . {inline}
    block_item_list -> block_item . {int}
    block_item_list -> block_item . {long}
    block_item_list -> block_item . {num}
    block_item_list -> block_item . {register}
    block_item_list -> block_item . {restrict}
    block_item_list -> block_item . {return}
    block_item_list -> block_item . {short}
    block_item_list -> block_item . {signed}
    block_item_list -> block_item . {sizeof}
    block_item_list -> block_item . {static}
    block_item_list -> block_item . {string}
    block_item_list -> block_item . {struct}
    block_item_list -> block_item . {switch}
    block_item_list -> block_item . {typedef}
    block_item_list -> block_item . {union}
    block_item_list -> block_item . {unsigned}
    block_item_list -> block_item . {void}
    block_item_list -> block_item . {volatile}
    block_item_list -> block_item . {while}
    block_item_list -> block_item . {{}
    block_item_list -> block_item . {~}
check: reduce block_item_list -> block_item . {}}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: block_item_list -> block_item . {}}
reduce: block_item_list -> return x * 2 ; 
reduce item: block_item_list -> block_item . {}}
building new item: compound_statement -> [{,{] block_item_list . [},}] {$}
building new item: compound_statement -> [{,{] block_item_list . [},}] {TYPE_NAME}
building new item: compound_statement -> [{,{] block_item_list . [},}] {auto}
building new item: compound_statement -> [{,{] block_item_list . [},}] {bool}
building new item: compound_statement -> [{,{] block_item_list . [},}] {char}
building new item: compound_statement -> [{,{] block_item_list . [},}] {complex}
building new item: compound_statement -> [{,{] block_item_list . [},}] {const}
building new item: compound_statement -> [{,{] block_item_list . [},}] {double}
building new item: compound_statement -> [{,{] block_item_list . [},}] {enum}
building new item: compound_statement -> [{,{] block_item_list . [},}] {extern}
building new item: compound_statement -> [{,{] block_item_list . [},}] {float}
building new item: compound_statement -> [{,{] block_item_list . [},}] {imaginary}
building new item: compound_statement -> [{,{] block_item_list . [},}] {inline}
building new item: compound_statement -> [{,{] block_item_list . [},}] {int}
building new item: compound_statement -> [{,{] block_item_list . [},}] {long}
building new item: compound_statement -> [{,{] block_item_list . [},}] {register}
building new item: compound_statement -> [{,{] block_item_list . [},}] {restrict}
building new item: compound_statement -> [{,{] block_item_list . [},}] {short}
building new item: compound_statement -> [{,{] block_item_list . [},}] {signed}
building new item: compound_statement -> [{,{] block_item_list . [},}] {static}
building new item: compound_statement -> [{,{] block_item_list . [},}] {struct}
building new item: compound_statement -> [{,{] block_item_list . [},}] {typedef}
building new item: compound_statement -> [{,{] block_item_list . [},}] {union}
building new item: compound_statement -> [{,{] block_item_list . [},}] {unsigned}
building new item: compound_statement -> [{,{] block_item_list . [},}] {void}
building new item: compound_statement -> [{,{] block_item_list . [},}] {volatile}
building new item: block_item_list -> block_item_list . block_item {}}
building new item: block_item_list -> block_item_list . block_item {!}
building new item: block_item_list -> block_item_list . block_item {&}
building new item: block_item_list -> block_item_list . block_item {(}
building new item: block_item_list -> block_item_list . block_item {*}
building new item: block_item_list -> block_item_list . block_item {+}
building new item: block_item_list -> block_item_list . block_item {-}
building new item: block_item_list -> block_item_list . block_item {;}
building new item: block_item_list -> block_item_list . block_item {DEC_OP}
building new item: block_item_list -> block_item_list . block_item {INC_OP}
building new item: block_item_list -> block_item_list . block_item {TYPE_NAME}
building new item: block_item_list -> block_item_list . block_item {auto}
building new item: block_item_list -> block_item_list . block_item {bool}
building new item: block_item_list -> block_item_list . block_item {break}
building new item: block_item_list -> block_item_list . block_item {case}
building new item: block_item_list -> block_item_list . block_item {char}
building new item: block_item_list -> block_item_list . block_item {complex}
building new item: block_item_list -> block_item_list . block_item {const}
building new item: block_item_list -> block_item_list . block_item {continue}
building new item: block_item_list -> block_item_list . block_item {default}
building new item: block_item_list -> block_item_list . block_item {do}
building new item: block_item_list -> block_item_list . block_item {double}
building new item: block_item_list -> block_item_list . block_item {enum}
building new item: block_item_list -> block_item_list . block_item {extern}
building new item: block_item_list -> block_item_list . block_item {float}
building new item: block_item_list -> block_item_list . block_item {for}
building new item: block_item_list -> block_item_list . block_item {goto}
building new item: block_item_list -> block_item_list . block_item {id}
building new item: block_item_list -> block_item_list . block_item {if}
building new item: block_item_list -> block_item_list . block_item {imaginary}
building new item: block_item_list -> block_item_list . block_item {inline}
building new item: block_item_list -> block_item_list . block_item {int}
building new item: block_item_list -> block_item_list . block_item {long}
building new item: block_item_list -> block_item_list . block_item {num}
building new item: block_item_list -> block_item_list . block_item {register}
building new item: block_item_list -> block_item_list . block_item {restrict}
building new item: block_item_list -> block_item_list . block_item {return}
building new item: block_item_list -> block_item_list . block_item {short}
building new item: block_item_list -> block_item_list . block_item {signed}
building new item: block_item_list -> block_item_list . block_item {sizeof}
building new item: block_item_list -> block_item_list . block_item {static}
building new item: block_item_list -> block_item_list . block_item {string}
building new item: block_item_list -> block_item_list . block_item {struct}
building new item: block_item_list -> block_item_list . block_item {switch}
building new item: block_item_list -> block_item_list . block_item {typedef}
building new item: block_item_list -> block_item_list . block_item {union}
building new item: block_item_list -> block_item_list . block_item {unsigned}
building new item: block_item_list -> block_item_list . block_item {void}
building new item: block_item_list -> block_item_list . block_item {volatile}
building new item: block_item_list -> block_item_list . block_item {while}
building new item: block_item_list -> block_item_list . block_item {{}
building new item: block_item_list -> block_item_list . block_item {~}
closure post reduce
LOOP: 50, token: }, token_value: }
[verbose dump (every loop)]
parser state:
current token: }, value: }
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [block_item_list,block_item_list]
 state stack (kernel items of top state only):
  state 4
   kernel items:
    compound_statement -> [{,{] block_item_list . [},}] {$}
    compound_statement -> [{,{] block_item_list . [},}] {TYPE_NAME}
    compound_statement -> [{,{] block_item_list . [},}] {auto}
    compound_statement -> [{,{] block_item_list . [},}] {bool}
    compound_statement -> [{,{] block_item_list . [},}] {char}
    compound_statement -> [{,{] block_item_list . [},}] {complex}
    compound_statement -> [{,{] block_item_list . [},}] {const}
    compound_statement -> [{,{] block_item_list . [},}] {double}
    compound_statement -> [{,{] block_item_list . [},}] {enum}
    compound_statement -> [{,{] block_item_list . [},}] {extern}
    compound_statement -> [{,{] block_item_list . [},}] {float}
    compound_statement -> [{,{] block_item_list . [},}] {imaginary}
    compound_statement -> [{,{] block_item_list . [},}] {inline}
    compound_statement -> [{,{] block_item_list . [},}] {int}
    compound_statement -> [{,{] block_item_list . [},}] {long}
    compound_statement -> [{,{] block_item_list . [},}] {register}
    compound_statement -> [{,{] block_item_list . [},}] {restrict}
    compound_statement -> [{,{] block_item_list . [},}] {short}
    compound_statement -> [{,{] block_item_list . [},}] {signed}
    compound_statement -> [{,{] block_item_list . [},}] {static}
    compound_statement -> [{,{] block_item_list . [},}] {struct}
    compound_statement -> [{,{] block_item_list . [},}] {typedef}
    compound_statement -> [{,{] block_item_list . [},}] {union}
    compound_statement -> [{,{] block_item_list . [},}] {unsigned}
    compound_statement -> [{,{] block_item_list . [},}] {void}
    compound_statement -> [{,{] block_item_list . [},}] {volatile}
    block_item_list -> block_item_list . block_item {}}
    block_item_list -> block_item_list . block_item {!}
    block_item_list -> block_item_list . block_item {&}
    block_item_list -> block_item_list . block_item {(}
    block_item_list -> block_item_list . block_item {*}
    block_item_list -> block_item_list . block_item {+}
    block_item_list -> block_item_list . block_item {-}
    block_item_list -> block_item_list . block_item {;}
    block_item_list -> block_item_list . block_item {DEC_OP}
    block_item_list -> block_item_list . block_item {INC_OP}
    block_item_list -> block_item_list . block_item {TYPE_NAME}
    block_item_list -> block_item_list . block_item {auto}
    block_item_list -> block_item_list . block_item {bool}
    block_item_list -> block_item_list . block_item {break}
    block_item_list -> block_item_list . block_item {case}
    block_item_list -> block_item_list . block_item {char}
    block_item_list -> block_item_list . block_item {complex}
    block_item_list -> block_item_list . block_item {const}
    block_item_list -> block_item_list . block_item {continue}
    block_item_list -> block_item_list . block_item {default}
    block_item_list -> block_item_list . block_item {do}
    block_item_list -> block_item_list . block_item {double}
    block_item_list -> block_item_list . block_item {enum}
    block_item_list -> block_item_list . block_item {extern}
    block_item_list -> block_item_list . block_item {float}
    block_item_list -> block_item_list . block_item {for}
    block_item_list -> block_item_list . block_item {goto}
    block_item_list -> block_item_list . block_item {id}
    block_item_list -> block_item_list . block_item {if}
    block_item_list -> block_item_list . block_item {imaginary}
    block_item_list -> block_item_list . block_item {inline}
    block_item_list -> block_item_list . block_item {int}
    block_item_list -> block_item_list . block_item {long}
    block_item_list -> block_item_list . block_item {num}
    block_item_list -> block_item_list . block_item {register}
    block_item_list -> block_item_list . block_item {restrict}
    block_item_list -> block_item_list . block_item {return}
    block_item_list -> block_item_list . block_item {short}
    block_item_list -> block_item_list . block_item {signed}
    block_item_list -> block_item_list . block_item {sizeof}
    block_item_list -> block_item_list . block_item {static}
    block_item_list -> block_item_list . block_item {string}
    block_item_list -> block_item_list . block_item {struct}
    block_item_list -> block_item_list . block_item {switch}
    block_item_list -> block_item_list . block_item {typedef}
    block_item_list -> block_item_list . block_item {union}
    block_item_list -> block_item_list . block_item {unsigned}
    block_item_list -> block_item_list . block_item {void}
    block_item_list -> block_item_list . block_item {volatile}
    block_item_list -> block_item_list . block_item {while}
    block_item_list -> block_item_list . block_item {{}
    block_item_list -> block_item_list . block_item {~}
check: shift compound_statement -> [{,{] block_item_list . [},}] {$}
check: shift compound_statement -> [{,{] block_item_list . [},}] {TYPE_NAME}
check: shift compound_statement -> [{,{] block_item_list . [},}] {auto}
check: shift compound_statement -> [{,{] block_item_list . [},}] {bool}
check: shift compound_statement -> [{,{] block_item_list . [},}] {char}
check: shift compound_statement -> [{,{] block_item_list . [},}] {complex}
check: shift compound_statement -> [{,{] block_item_list . [},}] {const}
check: shift compound_statement -> [{,{] block_item_list . [},}] {double}
check: shift compound_statement -> [{,{] block_item_list . [},}] {enum}
check: shift compound_statement -> [{,{] block_item_list . [},}] {extern}
check: shift compound_statement -> [{,{] block_item_list . [},}] {float}
check: shift compound_statement -> [{,{] block_item_list . [},}] {imaginary}
check: shift compound_statement -> [{,{] block_item_list . [},}] {inline}
check: shift compound_statement -> [{,{] block_item_list . [},}] {int}
check: shift compound_statement -> [{,{] block_item_list . [},}] {long}
check: shift compound_statement -> [{,{] block_item_list . [},}] {register}
check: shift compound_statement -> [{,{] block_item_list . [},}] {restrict}
check: shift compound_statement -> [{,{] block_item_list . [},}] {short}
check: shift compound_statement -> [{,{] block_item_list . [},}] {signed}
check: shift compound_statement -> [{,{] block_item_list . [},}] {static}
check: shift compound_statement -> [{,{] block_item_list . [},}] {struct}
check: shift compound_statement -> [{,{] block_item_list . [},}] {typedef}
check: shift compound_statement -> [{,{] block_item_list . [},}] {union}
check: shift compound_statement -> [{,{] block_item_list . [},}] {unsigned}
check: shift compound_statement -> [{,{] block_item_list . [},}] {void}
check: shift compound_statement -> [{,{] block_item_list . [},}] {volatile}
shifts: 26, reduces: 0, accepts: 0
shifting [},}]
building new item: compound_statement -> [{,{] block_item_list [},}] . {$}
building new item: compound_statement -> [{,{] block_item_list [},}] . {TYPE_NAME}
building new item: compound_statement -> [{,{] block_item_list [},}] . {auto}
building new item: compound_statement -> [{,{] block_item_list [},}] . {bool}
building new item: compound_statement -> [{,{] block_item_list [},}] . {char}
building new item: compound_statement -> [{,{] block_item_list [},}] . {complex}
building new item: compound_statement -> [{,{] block_item_list [},}] . {const}
building new item: compound_statement -> [{,{] block_item_list [},}] . {double}
building new item: compound_statement -> [{,{] block_item_list [},}] . {enum}
building new item: compound_statement -> [{,{] block_item_list [},}] . {extern}
building new item: compound_statement -> [{,{] block_item_list [},}] . {float}
building new item: compound_statement -> [{,{] block_item_list [},}] . {imaginary}
building new item: compound_statement -> [{,{] block_item_list [},}] . {inline}
building new item: compound_statement -> [{,{] block_item_list [},}] . {int}
building new item: compound_statement -> [{,{] block_item_list [},}] . {long}
building new item: compound_statement -> [{,{] block_item_list [},}] . {register}
building new item: compound_statement -> [{,{] block_item_list [},}] . {restrict}
building new item: compound_statement -> [{,{] block_item_list [},}] . {short}
building new item: compound_statement -> [{,{] block_item_list [},}] . {signed}
building new item: compound_statement -> [{,{] block_item_list [},}] . {static}
building new item: compound_statement -> [{,{] block_item_list [},}] . {struct}
building new item: compound_statement -> [{,{] block_item_list [},}] . {typedef}
building new item: compound_statement -> [{,{] block_item_list [},}] . {union}
building new item: compound_statement -> [{,{] block_item_list [},}] . {unsigned}
building new item: compound_statement -> [{,{] block_item_list [},}] . {void}
building new item: compound_statement -> [{,{] block_item_list [},}] . {volatile}
closure post shift
LOOP: 51, token: int, token_value: int
[verbose dump (every loop)]
parser state:
current token: int, value: int
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [block_item_list,block_item_list]
  [},}]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    compound_statement -> [{,{] block_item_list [},}] . {$}
    compound_statement -> [{,{] block_item_list [},}] . {TYPE_NAME}
    compound_statement -> [{,{] block_item_list [},}] . {auto}
    compound_statement -> [{,{] block_item_list [},}] . {bool}
    compound_statement -> [{,{] block_item_list [},}] . {char}
    compound_statement -> [{,{] block_item_list [},}] . {complex}
    compound_statement -> [{,{] block_item_list [},}] . {const}
    compound_statement -> [{,{] block_item_list [},}] . {double}
    compound_statement -> [{,{] block_item_list [},}] . {enum}
    compound_statement -> [{,{] block_item_list [},}] . {extern}
    compound_statement -> [{,{] block_item_list [},}] . {float}
    compound_statement -> [{,{] block_item_list [},}] . {imaginary}
    compound_statement -> [{,{] block_item_list [},}] . {inline}
    compound_statement -> [{,{] block_item_list [},}] . {int}
    compound_statement -> [{,{] block_item_list [},}] . {long}
    compound_statement -> [{,{] block_item_list [},}] . {register}
    compound_statement -> [{,{] block_item_list [},}] . {restrict}
    compound_statement -> [{,{] block_item_list [},}] . {short}
    compound_statement -> [{,{] block_item_list [},}] . {signed}
    compound_statement -> [{,{] block_item_list [},}] . {static}
    compound_statement -> [{,{] block_item_list [},}] . {struct}
    compound_statement -> [{,{] block_item_list [},}] . {typedef}
    compound_statement -> [{,{] block_item_list [},}] . {union}
    compound_statement -> [{,{] block_item_list [},}] . {unsigned}
    compound_statement -> [{,{] block_item_list [},}] . {void}
    compound_statement -> [{,{] block_item_list [},}] . {volatile}
check: reduce compound_statement -> [{,{] block_item_list [},}] . {int}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: compound_statement -> [{,{] block_item_list [},}] . {$}
trying to reduce by: compound_statement -> [{,{] block_item_list [},}] . {TYPE_NAME}
trying to reduce by: compound_statement -> [{,{] block_item_list [},}] . {auto}
trying to reduce by: compound_statement -> [{,{] block_item_list [},}] . {bool}
trying to reduce by: compound_statement -> [{,{] block_item_list [},}] . {char}
trying to reduce by: compound_statement -> [{,{] block_item_list [},}] . {complex}
trying to reduce by: compound_statement -> [{,{] block_item_list [},}] . {const}
trying to reduce by: compound_statement -> [{,{] block_item_list [},}] . {double}
trying to reduce by: compound_statement -> [{,{] block_item_list [},}] . {enum}
trying to reduce by: compound_statement -> [{,{] block_item_list [},}] . {extern}
trying to reduce by: compound_statement -> [{,{] block_item_list [},}] . {float}
trying to reduce by: compound_statement -> [{,{] block_item_list [},}] . {imaginary}
trying to reduce by: compound_statement -> [{,{] block_item_list [},}] . {inline}
trying to reduce by: compound_statement -> [{,{] block_item_list [},}] . {int}
reduce: compound_statement -> { return x * 2 ; } 
reduce item: compound_statement -> [{,{] block_item_list [},}] . {int}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {$}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {TYPE_NAME}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {auto}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {bool}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {char}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {complex}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {const}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {double}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {enum}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {extern}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {float}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {imaginary}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {inline}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {int}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {long}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {register}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {restrict}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {short}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {signed}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {static}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {struct}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {typedef}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {union}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {unsigned}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {void}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {volatile}
closure post reduce
LOOP: 52, token: int, token_value: int
[verbose dump (every loop)]
parser state:
current token: int, value: int
 symbol stack:
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [compound_statement,compound_statement]
 state stack (kernel items of top state only):
  state 3
   kernel items:
    function_definition -> declaration_specifiers declarator compound_statement . {$}
    function_definition -> declaration_specifiers declarator compound_statement . {TYPE_NAME}
    function_definition -> declaration_specifiers declarator compound_statement . {auto}
    function_definition -> declaration_specifiers declarator compound_statement . {bool}
    function_definition -> declaration_specifiers declarator compound_statement . {char}
    function_definition -> declaration_specifiers declarator compound_statement . {complex}
    function_definition -> declaration_specifiers declarator compound_statement . {const}
    function_definition -> declaration_specifiers declarator compound_statement . {double}
    function_definition -> declaration_specifiers declarator compound_statement . {enum}
    function_definition -> declaration_specifiers declarator compound_statement . {extern}
    function_definition -> declaration_specifiers declarator compound_statement . {float}
    function_definition -> declaration_specifiers declarator compound_statement . {imaginary}
    function_definition -> declaration_specifiers declarator compound_statement . {inline}
    function_definition -> declaration_specifiers declarator compound_statement . {int}
    function_definition -> declaration_specifiers declarator compound_statement . {long}
    function_definition -> declaration_specifiers declarator compound_statement . {register}
    function_definition -> declaration_specifiers declarator compound_statement . {restrict}
    function_definition -> declaration_specifiers declarator compound_statement . {short}
    function_definition -> declaration_specifiers declarator compound_statement . {signed}
    function_definition -> declaration_specifiers declarator compound_statement . {static}
    function_definition -> declaration_specifiers declarator compound_statement . {struct}
    function_definition -> declaration_specifiers declarator compound_statement . {typedef}
    function_definition -> declaration_specifiers declarator compound_statement . {union}
    function_definition -> declaration_specifiers declarator compound_statement . {unsigned}
    function_definition -> declaration_specifiers declarator compound_statement . {void}
    function_definition -> declaration_specifiers declarator compound_statement . {volatile}
check: reduce function_definition -> declaration_specifiers declarator compound_statement . {int}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: function_definition -> declaration_specifiers declarator compound_statement . {$}
trying to reduce by: function_definition -> declaration_specifiers declarator compound_statement . {TYPE_NAME}
trying to reduce by: function_definition -> declaration_specifiers declarator compound_statement . {auto}
trying to reduce by: function_definition -> declaration_specifiers declarator compound_statement . {bool}
trying to reduce by: function_definition -> declaration_specifiers declarator compound_statement . {char}
trying to reduce by: function_definition -> declaration_specifiers declarator compound_statement . {complex}
trying to reduce by: function_definition -> declaration_specifiers declarator compound_statement . {const}
trying to reduce by: function_definition -> declaration_specifiers declarator compound_statement . {double}
trying to reduce by: function_definition -> declaration_specifiers declarator compound_statement . {enum}
trying to reduce by: function_definition -> declaration_specifiers declarator compound_statement . {extern}
trying to reduce by: function_definition -> declaration_specifiers declarator compound_statement . {float}
trying to reduce by: function_definition -> declaration_specifiers declarator compound_statement . {imaginary}
trying to reduce by: function_definition -> declaration_specifiers declarator compound_statement . {inline}
trying to reduce by: function_definition -> declaration_specifiers declarator compound_statement . {int}
reduce: function_definition -> int foo ( int x ) { return x * 2 ; } 
reduce item: function_definition -> declaration_specifiers declarator compound_statement . {int}
building new item: external_declaration -> function_definition . {$}
building new item: external_declaration -> function_definition . {TYPE_NAME}
building new item: external_declaration -> function_definition . {auto}
building new item: external_declaration -> function_definition . {bool}
building new item: external_declaration -> function_definition . {char}
building new item: external_declaration -> function_definition . {complex}
building new item: external_declaration -> function_definition . {const}
building new item: external_declaration -> function_definition . {double}
building new item: external_declaration -> function_definition . {enum}
building new item: external_declaration -> function_definition . {extern}
building new item: external_declaration -> function_definition . {float}
building new item: external_declaration -> function_definition . {imaginary}
building new item: external_declaration -> function_definition . {inline}
building new item: external_declaration -> function_definition . {int}
building new item: external_declaration -> function_definition . {long}
building new item: external_declaration -> function_definition . {register}
building new item: external_declaration -> function_definition . {restrict}
building new item: external_declaration -> function_definition . {short}
building new item: external_declaration -> function_definition . {signed}
building new item: external_declaration -> function_definition . {static}
building new item: external_declaration -> function_definition . {struct}
building new item: external_declaration -> function_definition . {typedef}
building new item: external_declaration -> function_definition . {union}
building new item: external_declaration -> function_definition . {unsigned}
building new item: external_declaration -> function_definition . {void}
building new item: external_declaration -> function_definition . {volatile}
closure post reduce
LOOP: 53, token: int, token_value: int
[verbose dump (every loop)]
parser state:
current token: int, value: int
 symbol stack:
  [function_definition,function_definition]
 state stack (kernel items of top state only):
  state 1
   kernel items:
    external_declaration -> function_definition . {$}
    external_declaration -> function_definition . {TYPE_NAME}
    external_declaration -> function_definition . {auto}
    external_declaration -> function_definition . {bool}
    external_declaration -> function_definition . {char}
    external_declaration -> function_definition . {complex}
    external_declaration -> function_definition . {const}
    external_declaration -> function_definition . {double}
    external_declaration -> function_definition . {enum}
    external_declaration -> function_definition . {extern}
    external_declaration -> function_definition . {float}
    external_declaration -> function_definition . {imaginary}
    external_declaration -> function_definition . {inline}
    external_declaration -> function_definition . {int}
    external_declaration -> function_definition . {long}
    external_declaration -> function_definition . {register}
    external_declaration -> function_definition . {restrict}
    external_declaration -> function_definition . {short}
    external_declaration -> function_definition . {signed}
    external_declaration -> function_definition . {static}
    external_declaration -> function_definition . {struct}
    external_declaration -> function_definition . {typedef}
    external_declaration -> function_definition . {union}
    external_declaration -> function_definition . {unsigned}
    external_declaration -> function_definition . {void}
    external_declaration -> function_definition . {volatile}
check: reduce external_declaration -> function_definition . {int}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: external_declaration -> function_definition . {$}
trying to reduce by: external_declaration -> function_definition . {TYPE_NAME}
trying to reduce by: external_declaration -> function_definition . {auto}
trying to reduce by: external_declaration -> function_definition . {bool}
trying to reduce by: external_declaration -> function_definition . {char}
trying to reduce by: external_declaration -> function_definition . {complex}
trying to reduce by: external_declaration -> function_definition . {const}
trying to reduce by: external_declaration -> function_definition . {double}
trying to reduce by: external_declaration -> function_definition . {enum}
trying to reduce by: external_declaration -> function_definition . {extern}
trying to reduce by: external_declaration -> function_definition . {float}
trying to reduce by: external_declaration -> function_definition . {imaginary}
trying to reduce by: external_declaration -> function_definition . {inline}
trying to reduce by: external_declaration -> function_definition . {int}
reduce: external_declaration -> int foo ( int x ) { return x * 2 ; } 
reduce item: external_declaration -> function_definition . {int}
building new item: translation_unit -> external_declaration . {$}
building new item: translation_unit -> external_declaration . {TYPE_NAME}
building new item: translation_unit -> external_declaration . {auto}
building new item: translation_unit -> external_declaration . {bool}
building new item: translation_unit -> external_declaration . {char}
building new item: translation_unit -> external_declaration . {complex}
building new item: translation_unit -> external_declaration . {const}
building new item: translation_unit -> external_declaration . {double}
building new item: translation_unit -> external_declaration . {enum}
building new item: translation_unit -> external_declaration . {extern}
building new item: translation_unit -> external_declaration . {float}
building new item: translation_unit -> external_declaration . {imaginary}
building new item: translation_unit -> external_declaration . {inline}
building new item: translation_unit -> external_declaration . {int}
building new item: translation_unit -> external_declaration . {long}
building new item: translation_unit -> external_declaration . {register}
building new item: translation_unit -> external_declaration . {restrict}
building new item: translation_unit -> external_declaration . {short}
building new item: translation_unit -> external_declaration . {signed}
building new item: translation_unit -> external_declaration . {static}
building new item: translation_unit -> external_declaration . {struct}
building new item: translation_unit -> external_declaration . {typedef}
building new item: translation_unit -> external_declaration . {union}
building new item: translation_unit -> external_declaration . {unsigned}
building new item: translation_unit -> external_declaration . {void}
building new item: translation_unit -> external_declaration . {volatile}
closure post reduce
LOOP: 54, token: int, token_value: int
[verbose dump (every loop)]
parser state:
current token: int, value: int
 symbol stack:
  [external_declaration,external_declaration]
 state stack (kernel items of top state only):
  state 1
   kernel items:
    translation_unit -> external_declaration . {$}
    translation_unit -> external_declaration . {TYPE_NAME}
    translation_unit -> external_declaration . {auto}
    translation_unit -> external_declaration . {bool}
    translation_unit -> external_declaration . {char}
    translation_unit -> external_declaration . {complex}
    translation_unit -> external_declaration . {const}
    translation_unit -> external_declaration . {double}
    translation_unit -> external_declaration . {enum}
    translation_unit -> external_declaration . {extern}
    translation_unit -> external_declaration . {float}
    translation_unit -> external_declaration . {imaginary}
    translation_unit -> external_declaration . {inline}
    translation_unit -> external_declaration . {int}
    translation_unit -> external_declaration . {long}
    translation_unit -> external_declaration . {register}
    translation_unit -> external_declaration . {restrict}
    translation_unit -> external_declaration . {short}
    translation_unit -> external_declaration . {signed}
    translation_unit -> external_declaration . {static}
    translation_unit -> external_declaration . {struct}
    translation_unit -> external_declaration . {typedef}
    translation_unit -> external_declaration . {union}
    translation_unit -> external_declaration . {unsigned}
    translation_unit -> external_declaration . {void}
    translation_unit -> external_declaration . {volatile}
check: reduce translation_unit -> external_declaration . {int}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: translation_unit -> external_declaration . {$}
trying to reduce by: translation_unit -> external_declaration . {TYPE_NAME}
trying to reduce by: translation_unit -> external_declaration . {auto}
trying to reduce by: translation_unit -> external_declaration . {bool}
trying to reduce by: translation_unit -> external_declaration . {char}
trying to reduce by: translation_unit -> external_declaration . {complex}
trying to reduce by: translation_unit -> external_declaration . {const}
trying to reduce by: translation_unit -> external_declaration . {double}
trying to reduce by: translation_unit -> external_declaration . {enum}
trying to reduce by: translation_unit -> external_declaration . {extern}
trying to reduce by: translation_unit -> external_declaration . {float}
trying to reduce by: translation_unit -> external_declaration . {imaginary}
trying to reduce by: translation_unit -> external_declaration . {inline}
trying to reduce by: translation_unit -> external_declaration . {int}
reduce: translation_unit -> int foo ( int x ) { return x * 2 ; } 
reduce item: translation_unit -> external_declaration . {int}
building new item: START -> translation_unit . {$}
building new item: translation_unit -> translation_unit . external_declaration {$}
building new item: translation_unit -> translation_unit . external_declaration {TYPE_NAME}
building new item: translation_unit -> translation_unit . external_declaration {auto}
building new item: translation_unit -> translation_unit . external_declaration {bool}
building new item: translation_unit -> translation_unit . external_declaration {char}
building new item: translation_unit -> translation_unit . external_declaration {complex}
building new item: translation_unit -> translation_unit . external_declaration {const}
building new item: translation_unit -> translation_unit . external_declaration {double}
building new item: translation_unit -> translation_unit . external_declaration {enum}
building new item: translation_unit -> translation_unit . external_declaration {extern}
building new item: translation_unit -> translation_unit . external_declaration {float}
building new item: translation_unit -> translation_unit . external_declaration {imaginary}
building new item: translation_unit -> translation_unit . external_declaration {inline}
building new item: translation_unit -> translation_unit . external_declaration {int}
building new item: translation_unit -> translation_unit . external_declaration {long}
building new item: translation_unit -> translation_unit . external_declaration {register}
building new item: translation_unit -> translation_unit . external_declaration {restrict}
building new item: translation_unit -> translation_unit . external_declaration {short}
building new item: translation_unit -> translation_unit . external_declaration {signed}
building new item: translation_unit -> translation_unit . external_declaration {static}
building new item: translation_unit -> translation_unit . external_declaration {struct}
building new item: translation_unit -> translation_unit . external_declaration {typedef}
building new item: translation_unit -> translation_unit . external_declaration {union}
building new item: translation_unit -> translation_unit . external_declaration {unsigned}
building new item: translation_unit -> translation_unit . external_declaration {void}
building new item: translation_unit -> translation_unit . external_declaration {volatile}
closure post reduce
LOOP: 55, token: int, token_value: int
[verbose dump (every loop)]
parser state:
current token: int, value: int
 symbol stack:
  [translation_unit,translation_unit]
 state stack (kernel items of top state only):
  state 1
   kernel items:
    START -> translation_unit . {$}
    translation_unit -> translation_unit . external_declaration {$}
    translation_unit -> translation_unit . external_declaration {TYPE_NAME}
    translation_unit -> translation_unit . external_declaration {auto}
    translation_unit -> translation_unit . external_declaration {bool}
    translation_unit -> translation_unit . external_declaration {char}
    translation_unit -> translation_unit . external_declaration {complex}
    translation_unit -> translation_unit . external_declaration {const}
    translation_unit -> translation_unit . external_declaration {double}
    translation_unit -> translation_unit . external_declaration {enum}
    translation_unit -> translation_unit . external_declaration {extern}
    translation_unit -> translation_unit . external_declaration {float}
    translation_unit -> translation_unit . external_declaration {imaginary}
    translation_unit -> translation_unit . external_declaration {inline}
    translation_unit -> translation_unit . external_declaration {int}
    translation_unit -> translation_unit . external_declaration {long}
    translation_unit -> translation_unit . external_declaration {register}
    translation_unit -> translation_unit . external_declaration {restrict}
    translation_unit -> translation_unit . external_declaration {short}
    translation_unit -> translation_unit . external_declaration {signed}
    translation_unit -> translation_unit . external_declaration {static}
    translation_unit -> translation_unit . external_declaration {struct}
    translation_unit -> translation_unit . external_declaration {typedef}
    translation_unit -> translation_unit . external_declaration {union}
    translation_unit -> translation_unit . external_declaration {unsigned}
    translation_unit -> translation_unit . external_declaration {void}
    translation_unit -> translation_unit . external_declaration {volatile}
check: shift type_specifier -> . [int,int] {(}
check: shift type_specifier -> . [int,int] {*}
check: shift type_specifier -> . [int,int] {id}
check: shift type_specifier -> . [int,int] {TYPE_NAME}
check: shift type_specifier -> . [int,int] {auto}
check: shift type_specifier -> . [int,int] {bool}
check: shift type_specifier -> . [int,int] {char}
check: shift type_specifier -> . [int,int] {complex}
check: shift type_specifier -> . [int,int] {const}
check: shift type_specifier -> . [int,int] {double}
check: shift type_specifier -> . [int,int] {enum}
check: shift type_specifier -> . [int,int] {extern}
check: shift type_specifier -> . [int,int] {float}
check: shift type_specifier -> . [int,int] {imaginary}
check: shift type_specifier -> . [int,int] {inline}
check: shift type_specifier -> . [int,int] {int}
check: shift type_specifier -> . [int,int] {long}
check: shift type_specifier -> . [int,int] {register}
check: shift type_specifier -> . [int,int] {restrict}
check: shift type_specifier -> . [int,int] {short}
check: shift type_specifier -> . [int,int] {signed}
check: shift type_specifier -> . [int,int] {static}
check: shift type_specifier -> . [int,int] {struct}
check: shift type_specifier -> . [int,int] {typedef}
check: shift type_specifier -> . [int,int] {union}
check: shift type_specifier -> . [int,int] {unsigned}
check: shift type_specifier -> . [int,int] {void}
check: shift type_specifier -> . [int,int] {volatile}
check: shift type_specifier -> . [int,int] {;}
shifts: 29, reduces: 0, accepts: 0
shifting [int,int]
building new item: type_specifier -> [int,int] . {(}
building new item: type_specifier -> [int,int] . {*}
building new item: type_specifier -> [int,int] . {id}
building new item: type_specifier -> [int,int] . {TYPE_NAME}
building new item: type_specifier -> [int,int] . {auto}
building new item: type_specifier -> [int,int] . {bool}
building new item: type_specifier -> [int,int] . {char}
building new item: type_specifier -> [int,int] . {complex}
building new item: type_specifier -> [int,int] . {const}
building new item: type_specifier -> [int,int] . {double}
building new item: type_specifier -> [int,int] . {enum}
building new item: type_specifier -> [int,int] . {extern}
building new item: type_specifier -> [int,int] . {float}
building new item: type_specifier -> [int,int] . {imaginary}
building new item: type_specifier -> [int,int] . {inline}
building new item: type_specifier -> [int,int] . {int}
building new item: type_specifier -> [int,int] . {long}
building new item: type_specifier -> [int,int] . {register}
building new item: type_specifier -> [int,int] . {restrict}
building new item: type_specifier -> [int,int] . {short}
building new item: type_specifier -> [int,int] . {signed}
building new item: type_specifier -> [int,int] . {static}
building new item: type_specifier -> [int,int] . {struct}
building new item: type_specifier -> [int,int] . {typedef}
building new item: type_specifier -> [int,int] . {union}
building new item: type_specifier -> [int,int] . {unsigned}
building new item: type_specifier -> [int,int] . {void}
building new item: type_specifier -> [int,int] . {volatile}
building new item: type_specifier -> [int,int] . {;}
closure post shift
LOOP: 56, token: id, token_value: main
[verbose dump (every loop)]
parser state:
current token: id, value: main
 symbol stack:
  [translation_unit,translation_unit]
  [int,int]
 state stack (kernel items of top state only):
  state 2
   kernel items:
    type_specifier -> [int,int] . {(}
    type_specifier -> [int,int] . {*}
    type_specifier -> [int,int] . {id}
    type_specifier -> [int,int] . {TYPE_NAME}
    type_specifier -> [int,int] . {auto}
    type_specifier -> [int,int] . {bool}
    type_specifier -> [int,int] . {char}
    type_specifier -> [int,int] . {complex}
    type_specifier -> [int,int] . {const}
    type_specifier -> [int,int] . {double}
    type_specifier -> [int,int] . {enum}
    type_specifier -> [int,int] . {extern}
    type_specifier -> [int,int] . {float}
    type_specifier -> [int,int] . {imaginary}
    type_specifier -> [int,int] . {inline}
    type_specifier -> [int,int] . {int}
    type_specifier -> [int,int] . {long}
    type_specifier -> [int,int] . {register}
    type_specifier -> [int,int] . {restrict}
    type_specifier -> [int,int] . {short}
    type_specifier -> [int,int] . {signed}
    type_specifier -> [int,int] . {static}
    type_specifier -> [int,int] . {struct}
    type_specifier -> [int,int] . {typedef}
    type_specifier -> [int,int] . {union}
    type_specifier -> [int,int] . {unsigned}
    type_specifier -> [int,int] . {void}
    type_specifier -> [int,int] . {volatile}
    type_specifier -> [int,int] . {;}
check: reduce type_specifier -> [int,int] . {id}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: type_specifier -> [int,int] . {(}
trying to reduce by: type_specifier -> [int,int] . {*}
trying to reduce by: type_specifier -> [int,int] . {id}
reduce: type_specifier -> int 
reduce item: type_specifier -> [int,int] . {id}
building new item: declaration_specifiers -> type_specifier . {(}
building new item: declaration_specifiers -> type_specifier . {*}
building new item: declaration_specifiers -> type_specifier . {id}
building new item: declaration_specifiers -> type_specifier . declaration_specifiers {(}
building new item: declaration_specifiers -> type_specifier . declaration_specifiers {*}
building new item: declaration_specifiers -> type_specifier . declaration_specifiers {id}
building new item: declaration_specifiers -> type_specifier . {;}
building new item: declaration_specifiers -> type_specifier . declaration_specifiers {;}
closure post reduce
LOOP: 57, token: id, token_value: main
[verbose dump (every loop)]
parser state:
current token: id, value: main
 symbol stack:
  [translation_unit,translation_unit]
  [type_specifier,type_specifier]
 state stack (kernel items of top state only):
  state 2
   kernel items:
    declaration_specifiers -> type_specifier . {(}
    declaration_specifiers -> type_specifier . {*}
    declaration_specifiers -> type_specifier . {id}
    declaration_specifiers -> type_specifier . declaration_specifiers {(}
    declaration_specifiers -> type_specifier . declaration_specifiers {*}
    declaration_specifiers -> type_specifier . declaration_specifiers {id}
    declaration_specifiers -> type_specifier . {;}
    declaration_specifiers -> type_specifier . declaration_specifiers {;}
check: reduce declaration_specifiers -> type_specifier . {id}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: declaration_specifiers -> type_specifier . {(}
trying to reduce by: declaration_specifiers -> type_specifier . {*}
trying to reduce by: declaration_specifiers -> type_specifier . {id}
reduce: declaration_specifiers -> int 
reduce item: declaration_specifiers -> type_specifier . {id}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {$}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {$}
building new item: declaration -> declaration_specifiers . [;,;] {$}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {$}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {TYPE_NAME}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {TYPE_NAME}
building new item: declaration -> declaration_specifiers . [;,;] {TYPE_NAME}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {TYPE_NAME}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {auto}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {auto}
building new item: declaration -> declaration_specifiers . [;,;] {auto}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {auto}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {bool}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {bool}
building new item: declaration -> declaration_specifiers . [;,;] {bool}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {bool}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {char}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {char}
building new item: declaration -> declaration_specifiers . [;,;] {char}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {char}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {complex}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {complex}
building new item: declaration -> declaration_specifiers . [;,;] {complex}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {complex}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {const}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {const}
building new item: declaration -> declaration_specifiers . [;,;] {const}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {const}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {double}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {double}
building new item: declaration -> declaration_specifiers . [;,;] {double}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {double}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {enum}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {enum}
building new item: declaration -> declaration_specifiers . [;,;] {enum}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {enum}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {extern}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {extern}
building new item: declaration -> declaration_specifiers . [;,;] {extern}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {extern}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {float}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {float}
building new item: declaration -> declaration_specifiers . [;,;] {float}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {float}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {imaginary}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {imaginary}
building new item: declaration -> declaration_specifiers . [;,;] {imaginary}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {imaginary}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {inline}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {inline}
building new item: declaration -> declaration_specifiers . [;,;] {inline}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {inline}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {int}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {int}
building new item: declaration -> declaration_specifiers . [;,;] {int}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {int}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {long}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {long}
building new item: declaration -> declaration_specifiers . [;,;] {long}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {long}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {register}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {register}
building new item: declaration -> declaration_specifiers . [;,;] {register}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {register}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {restrict}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {restrict}
building new item: declaration -> declaration_specifiers . [;,;] {restrict}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {restrict}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {short}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {short}
building new item: declaration -> declaration_specifiers . [;,;] {short}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {short}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {signed}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {signed}
building new item: declaration -> declaration_specifiers . [;,;] {signed}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {signed}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {static}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {static}
building new item: declaration -> declaration_specifiers . [;,;] {static}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {static}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {struct}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {struct}
building new item: declaration -> declaration_specifiers . [;,;] {struct}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {struct}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {typedef}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {typedef}
building new item: declaration -> declaration_specifiers . [;,;] {typedef}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {typedef}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {union}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {union}
building new item: declaration -> declaration_specifiers . [;,;] {union}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {union}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {unsigned}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {unsigned}
building new item: declaration -> declaration_specifiers . [;,;] {unsigned}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {unsigned}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {void}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {void}
building new item: declaration -> declaration_specifiers . [;,;] {void}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {void}
building new item: function_definition -> declaration_specifiers . declarator declaration_list compound_statement {volatile}
building new item: function_definition -> declaration_specifiers . declarator compound_statement {volatile}
building new item: declaration -> declaration_specifiers . [;,;] {volatile}
building new item: declaration -> declaration_specifiers . init_declarator_list [;,;] {volatile}
closure post reduce
LOOP: 58, token: id, token_value: main
[verbose dump (every loop)]
parser state:
current token: id, value: main
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
 state stack (kernel items of top state only):
  state 2
   kernel items:
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {$}
    function_definition -> declaration_specifiers . declarator compound_statement {$}
    declaration -> declaration_specifiers . [;,;] {$}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {$}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {TYPE_NAME}
    function_definition -> declaration_specifiers . declarator compound_statement {TYPE_NAME}
    declaration -> declaration_specifiers . [;,;] {TYPE_NAME}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {TYPE_NAME}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {auto}
    function_definition -> declaration_specifiers . declarator compound_statement {auto}
    declaration -> declaration_specifiers . [;,;] {auto}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {auto}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {bool}
    function_definition -> declaration_specifiers . declarator compound_statement {bool}
    declaration -> declaration_specifiers . [;,;] {bool}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {bool}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {char}
    function_definition -> declaration_specifiers . declarator compound_statement {char}
    declaration -> declaration_specifiers . [;,;] {char}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {char}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {complex}
    function_definition -> declaration_specifiers . declarator compound_statement {complex}
    declaration -> declaration_specifiers . [;,;] {complex}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {complex}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {const}
    function_definition -> declaration_specifiers . declarator compound_statement {const}
    declaration -> declaration_specifiers . [;,;] {const}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {const}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {double}
    function_definition -> declaration_specifiers . declarator compound_statement {double}
    declaration -> declaration_specifiers . [;,;] {double}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {double}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {enum}
    function_definition -> declaration_specifiers . declarator compound_statement {enum}
    declaration -> declaration_specifiers . [;,;] {enum}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {enum}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {extern}
    function_definition -> declaration_specifiers . declarator compound_statement {extern}
    declaration -> declaration_specifiers . [;,;] {extern}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {extern}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {float}
    function_definition -> declaration_specifiers . declarator compound_statement {float}
    declaration -> declaration_specifiers . [;,;] {float}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {float}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {imaginary}
    function_definition -> declaration_specifiers . declarator compound_statement {imaginary}
    declaration -> declaration_specifiers . [;,;] {imaginary}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {imaginary}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {inline}
    function_definition -> declaration_specifiers . declarator compound_statement {inline}
    declaration -> declaration_specifiers . [;,;] {inline}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {inline}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {int}
    function_definition -> declaration_specifiers . declarator compound_statement {int}
    declaration -> declaration_specifiers . [;,;] {int}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {int}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {long}
    function_definition -> declaration_specifiers . declarator compound_statement {long}
    declaration -> declaration_specifiers . [;,;] {long}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {long}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {register}
    function_definition -> declaration_specifiers . declarator compound_statement {register}
    declaration -> declaration_specifiers . [;,;] {register}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {register}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {restrict}
    function_definition -> declaration_specifiers . declarator compound_statement {restrict}
    declaration -> declaration_specifiers . [;,;] {restrict}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {restrict}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {short}
    function_definition -> declaration_specifiers . declarator compound_statement {short}
    declaration -> declaration_specifiers . [;,;] {short}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {short}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {signed}
    function_definition -> declaration_specifiers . declarator compound_statement {signed}
    declaration -> declaration_specifiers . [;,;] {signed}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {signed}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {static}
    function_definition -> declaration_specifiers . declarator compound_statement {static}
    declaration -> declaration_specifiers . [;,;] {static}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {static}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {struct}
    function_definition -> declaration_specifiers . declarator compound_statement {struct}
    declaration -> declaration_specifiers . [;,;] {struct}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {struct}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {typedef}
    function_definition -> declaration_specifiers . declarator compound_statement {typedef}
    declaration -> declaration_specifiers . [;,;] {typedef}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {typedef}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {union}
    function_definition -> declaration_specifiers . declarator compound_statement {union}
    declaration -> declaration_specifiers . [;,;] {union}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {union}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {unsigned}
    function_definition -> declaration_specifiers . declarator compound_statement {unsigned}
    declaration -> declaration_specifiers . [;,;] {unsigned}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {unsigned}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {void}
    function_definition -> declaration_specifiers . declarator compound_statement {void}
    declaration -> declaration_specifiers . [;,;] {void}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {void}
    function_definition -> declaration_specifiers . declarator declaration_list compound_statement {volatile}
    function_definition -> declaration_specifiers . declarator compound_statement {volatile}
    declaration -> declaration_specifiers . [;,;] {volatile}
    declaration -> declaration_specifiers . init_declarator_list [;,;] {volatile}
check: shift direct_declarator -> . [id,id] {TYPE_NAME}
check: shift direct_declarator -> . [id,id] {auto}
check: shift direct_declarator -> . [id,id] {bool}
check: shift direct_declarator -> . [id,id] {char}
check: shift direct_declarator -> . [id,id] {complex}
check: shift direct_declarator -> . [id,id] {const}
check: shift direct_declarator -> . [id,id] {double}
check: shift direct_declarator -> . [id,id] {enum}
check: shift direct_declarator -> . [id,id] {extern}
check: shift direct_declarator -> . [id,id] {float}
check: shift direct_declarator -> . [id,id] {imaginary}
check: shift direct_declarator -> . [id,id] {inline}
check: shift direct_declarator -> . [id,id] {int}
check: shift direct_declarator -> . [id,id] {long}
check: shift direct_declarator -> . [id,id] {register}
check: shift direct_declarator -> . [id,id] {restrict}
check: shift direct_declarator -> . [id,id] {short}
check: shift direct_declarator -> . [id,id] {signed}
check: shift direct_declarator -> . [id,id] {static}
check: shift direct_declarator -> . [id,id] {struct}
check: shift direct_declarator -> . [id,id] {typedef}
check: shift direct_declarator -> . [id,id] {union}
check: shift direct_declarator -> . [id,id] {unsigned}
check: shift direct_declarator -> . [id,id] {void}
check: shift direct_declarator -> . [id,id] {volatile}
check: shift direct_declarator -> . [id,id] {{}
check: shift direct_declarator -> . [id,id] {[}
check: shift direct_declarator -> . [id,id] {(}
check: shift direct_declarator -> . [id,id] {;}
check: shift direct_declarator -> . [id,id] {=}
check: shift direct_declarator -> . [id,id] {,}
shifts: 31, reduces: 0, accepts: 0
shifting [id,main]
building new item: direct_declarator -> [id,id] . {TYPE_NAME}
building new item: direct_declarator -> [id,id] . {auto}
building new item: direct_declarator -> [id,id] . {bool}
building new item: direct_declarator -> [id,id] . {char}
building new item: direct_declarator -> [id,id] . {complex}
building new item: direct_declarator -> [id,id] . {const}
building new item: direct_declarator -> [id,id] . {double}
building new item: direct_declarator -> [id,id] . {enum}
building new item: direct_declarator -> [id,id] . {extern}
building new item: direct_declarator -> [id,id] . {float}
building new item: direct_declarator -> [id,id] . {imaginary}
building new item: direct_declarator -> [id,id] . {inline}
building new item: direct_declarator -> [id,id] . {int}
building new item: direct_declarator -> [id,id] . {long}
building new item: direct_declarator -> [id,id] . {register}
building new item: direct_declarator -> [id,id] . {restrict}
building new item: direct_declarator -> [id,id] . {short}
building new item: direct_declarator -> [id,id] . {signed}
building new item: direct_declarator -> [id,id] . {static}
building new item: direct_declarator -> [id,id] . {struct}
building new item: direct_declarator -> [id,id] . {typedef}
building new item: direct_declarator -> [id,id] . {union}
building new item: direct_declarator -> [id,id] . {unsigned}
building new item: direct_declarator -> [id,id] . {void}
building new item: direct_declarator -> [id,id] . {volatile}
building new item: direct_declarator -> [id,id] . {{}
building new item: direct_declarator -> [id,id] . {[}
building new item: direct_declarator -> [id,id] . {(}
building new item: direct_declarator -> [id,id] . {;}
building new item: direct_declarator -> [id,id] . {=}
building new item: direct_declarator -> [id,id] . {,}
closure post shift
LOOP: 59, token: (, token_value: (
[verbose dump (every loop)]
parser state:
current token: (, value: (
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [id,main]
 state stack (kernel items of top state only):
  state 3
   kernel items:
    direct_declarator -> [id,id] . {TYPE_NAME}
    direct_declarator -> [id,id] . {auto}
    direct_declarator -> [id,id] . {bool}
    direct_declarator -> [id,id] . {char}
    direct_declarator -> [id,id] . {complex}
    direct_declarator -> [id,id] . {const}
    direct_declarator -> [id,id] . {double}
    direct_declarator -> [id,id] . {enum}
    direct_declarator -> [id,id] . {extern}
    direct_declarator -> [id,id] . {float}
    direct_declarator -> [id,id] . {imaginary}
    direct_declarator -> [id,id] . {inline}
    direct_declarator -> [id,id] . {int}
    direct_declarator -> [id,id] . {long}
    direct_declarator -> [id,id] . {register}
    direct_declarator -> [id,id] . {restrict}
    direct_declarator -> [id,id] . {short}
    direct_declarator -> [id,id] . {signed}
    direct_declarator -> [id,id] . {static}
    direct_declarator -> [id,id] . {struct}
    direct_declarator -> [id,id] . {typedef}
    direct_declarator -> [id,id] . {union}
    direct_declarator -> [id,id] . {unsigned}
    direct_declarator -> [id,id] . {void}
    direct_declarator -> [id,id] . {volatile}
    direct_declarator -> [id,id] . {{}
    direct_declarator -> [id,id] . {[}
    direct_declarator -> [id,id] . {(}
    direct_declarator -> [id,id] . {;}
    direct_declarator -> [id,id] . {=}
    direct_declarator -> [id,id] . {,}
check: reduce direct_declarator -> [id,id] . {(}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: direct_declarator -> [id,id] . {TYPE_NAME}
trying to reduce by: direct_declarator -> [id,id] . {auto}
trying to reduce by: direct_declarator -> [id,id] . {bool}
trying to reduce by: direct_declarator -> [id,id] . {char}
trying to reduce by: direct_declarator -> [id,id] . {complex}
trying to reduce by: direct_declarator -> [id,id] . {const}
trying to reduce by: direct_declarator -> [id,id] . {double}
trying to reduce by: direct_declarator -> [id,id] . {enum}
trying to reduce by: direct_declarator -> [id,id] . {extern}
trying to reduce by: direct_declarator -> [id,id] . {float}
trying to reduce by: direct_declarator -> [id,id] . {imaginary}
trying to reduce by: direct_declarator -> [id,id] . {inline}
trying to reduce by: direct_declarator -> [id,id] . {int}
trying to reduce by: direct_declarator -> [id,id] . {long}
trying to reduce by: direct_declarator -> [id,id] . {register}
trying to reduce by: direct_declarator -> [id,id] . {restrict}
trying to reduce by: direct_declarator -> [id,id] . {short}
trying to reduce by: direct_declarator -> [id,id] . {signed}
trying to reduce by: direct_declarator -> [id,id] . {static}
trying to reduce by: direct_declarator -> [id,id] . {struct}
trying to reduce by: direct_declarator -> [id,id] . {typedef}
trying to reduce by: direct_declarator -> [id,id] . {union}
trying to reduce by: direct_declarator -> [id,id] . {unsigned}
trying to reduce by: direct_declarator -> [id,id] . {void}
trying to reduce by: direct_declarator -> [id,id] . {volatile}
trying to reduce by: direct_declarator -> [id,id] . {{}
trying to reduce by: direct_declarator -> [id,id] . {[}
trying to reduce by: direct_declarator -> [id,id] . {(}
reduce: direct_declarator -> main 
reduce item: direct_declarator -> [id,id] . {(}
building new item: declarator -> direct_declarator . {TYPE_NAME}
building new item: declarator -> direct_declarator . {auto}
building new item: declarator -> direct_declarator . {bool}
building new item: declarator -> direct_declarator . {char}
building new item: declarator -> direct_declarator . {complex}
building new item: declarator -> direct_declarator . {const}
building new item: declarator -> direct_declarator . {double}
building new item: declarator -> direct_declarator . {enum}
building new item: declarator -> direct_declarator . {extern}
building new item: declarator -> direct_declarator . {float}
building new item: declarator -> direct_declarator . {imaginary}
building new item: declarator -> direct_declarator . {inline}
building new item: declarator -> direct_declarator . {int}
building new item: declarator -> direct_declarator . {long}
building new item: declarator -> direct_declarator . {register}
building new item: declarator -> direct_declarator . {restrict}
building new item: declarator -> direct_declarator . {short}
building new item: declarator -> direct_declarator . {signed}
building new item: declarator -> direct_declarator . {static}
building new item: declarator -> direct_declarator . {struct}
building new item: declarator -> direct_declarator . {typedef}
building new item: declarator -> direct_declarator . {union}
building new item: declarator -> direct_declarator . {unsigned}
building new item: declarator -> direct_declarator . {void}
building new item: declarator -> direct_declarator . {volatile}
building new item: declarator -> direct_declarator . {{}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {auto}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {auto}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {auto}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {bool}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {bool}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {bool}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {char}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {char}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {char}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {char}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {char}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {char}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {char}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {char}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {char}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {char}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {char}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {complex}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {complex}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {complex}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {const}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {const}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {const}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {const}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {const}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {const}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {const}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {const}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {const}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {const}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {const}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {double}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {double}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {double}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {double}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {double}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {double}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {double}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {double}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {double}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {double}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {double}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {enum}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {enum}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {enum}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {extern}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {extern}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {extern}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {float}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {float}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {float}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {float}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {float}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {float}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {float}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {float}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {float}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {float}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {float}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {imaginary}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {imaginary}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {inline}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {inline}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {inline}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {int}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {int}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {int}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {int}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {int}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {int}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {int}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {int}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {int}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {int}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {int}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {long}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {long}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {long}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {long}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {long}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {long}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {long}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {long}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {long}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {long}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {long}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {register}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {register}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {register}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {register}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {register}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {register}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {register}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {register}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {register}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {register}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {register}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {restrict}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {restrict}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {short}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {short}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {short}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {short}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {short}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {short}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {short}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {short}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {short}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {short}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {short}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {signed}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {signed}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {signed}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {static}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {static}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {static}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {static}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {static}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {static}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {static}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {static}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {static}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {static}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {static}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {struct}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {struct}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {struct}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {typedef}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {typedef}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {union}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {union}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {union}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {union}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {union}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {union}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {union}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {union}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {union}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {union}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {union}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {unsigned}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {unsigned}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {void}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {void}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {void}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {void}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {void}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {void}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {void}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {void}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {void}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {void}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {void}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {volatile}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {volatile}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {{}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {{}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {{}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {{}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {{}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {{}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {{}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {{}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {{}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {{}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {{}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {[}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {[}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {[}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {(}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {(}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {(}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {(}
building new item: declarator -> direct_declarator . {;}
building new item: declarator -> direct_declarator . {=}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {;}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {;}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {;}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {;}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {;}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {;}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {;}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {;}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {;}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {;}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {;}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {=}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {=}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {=}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {=}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {=}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {=}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {=}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {=}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {=}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {=}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {=}
building new item: declarator -> direct_declarator . {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {,}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {,}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {,}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {,}
closure post reduce
LOOP: 60, token: (, token_value: (
[verbose dump (every loop)]
parser state:
current token: (, value: (
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
 state stack (kernel items of top state only):
  state 3
   kernel items:
    declarator -> direct_declarator . {TYPE_NAME}
    declarator -> direct_declarator . {auto}
    declarator -> direct_declarator . {bool}
    declarator -> direct_declarator . {char}
    declarator -> direct_declarator . {complex}
    declarator -> direct_declarator . {const}
    declarator -> direct_declarator . {double}
    declarator -> direct_declarator . {enum}
    declarator -> direct_declarator . {extern}
    declarator -> direct_declarator . {float}
    declarator -> direct_declarator . {imaginary}
    declarator -> direct_declarator . {inline}
    declarator -> direct_declarator . {int}
    declarator -> direct_declarator . {long}
    declarator -> direct_declarator . {register}
    declarator -> direct_declarator . {restrict}
    declarator -> direct_declarator . {short}
    declarator -> direct_declarator . {signed}
    declarator -> direct_declarator . {static}
    declarator -> direct_declarator . {struct}
    declarator -> direct_declarator . {typedef}
    declarator -> direct_declarator . {union}
    declarator -> direct_declarator . {unsigned}
    declarator -> direct_declarator . {void}
    declarator -> direct_declarator . {volatile}
    declarator -> direct_declarator . {{}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {TYPE_NAME}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {TYPE_NAME}
    direct_declarator -> direct_declarator . [(,(] [),)] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {auto}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {auto}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {auto}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {auto}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {auto}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {auto}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {auto}
    direct_declarator -> direct_declarator . [[,[] [],]] {auto}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {auto}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {auto}
    direct_declarator -> direct_declarator . [(,(] [),)] {auto}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {bool}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {bool}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {bool}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {bool}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {bool}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {bool}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {bool}
    direct_declarator -> direct_declarator . [[,[] [],]] {bool}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {bool}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {bool}
    direct_declarator -> direct_declarator . [(,(] [),)] {bool}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {char}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {char}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {char}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {char}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {char}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {char}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {char}
    direct_declarator -> direct_declarator . [[,[] [],]] {char}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {char}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {char}
    direct_declarator -> direct_declarator . [(,(] [),)] {char}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {complex}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {complex}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {complex}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {complex}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {complex}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {complex}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {complex}
    direct_declarator -> direct_declarator . [[,[] [],]] {complex}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {complex}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {complex}
    direct_declarator -> direct_declarator . [(,(] [),)] {complex}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {const}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {const}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {const}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {const}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {const}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {const}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {const}
    direct_declarator -> direct_declarator . [[,[] [],]] {const}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {const}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {const}
    direct_declarator -> direct_declarator . [(,(] [),)] {const}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {double}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {double}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {double}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {double}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {double}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {double}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {double}
    direct_declarator -> direct_declarator . [[,[] [],]] {double}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {double}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {double}
    direct_declarator -> direct_declarator . [(,(] [),)] {double}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {enum}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {enum}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {enum}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {enum}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {enum}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {enum}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {enum}
    direct_declarator -> direct_declarator . [[,[] [],]] {enum}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {enum}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {enum}
    direct_declarator -> direct_declarator . [(,(] [),)] {enum}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {extern}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {extern}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {extern}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {extern}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {extern}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {extern}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {extern}
    direct_declarator -> direct_declarator . [[,[] [],]] {extern}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {extern}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {extern}
    direct_declarator -> direct_declarator . [(,(] [),)] {extern}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {float}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {float}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {float}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {float}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {float}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {float}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {float}
    direct_declarator -> direct_declarator . [[,[] [],]] {float}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {float}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {float}
    direct_declarator -> direct_declarator . [(,(] [),)] {float}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {imaginary}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {imaginary}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {imaginary}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {imaginary}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {imaginary}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {imaginary}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {imaginary}
    direct_declarator -> direct_declarator . [[,[] [],]] {imaginary}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {imaginary}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {imaginary}
    direct_declarator -> direct_declarator . [(,(] [),)] {imaginary}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {inline}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {inline}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {inline}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {inline}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {inline}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {inline}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {inline}
    direct_declarator -> direct_declarator . [[,[] [],]] {inline}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {inline}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {inline}
    direct_declarator -> direct_declarator . [(,(] [),)] {inline}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {int}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {int}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {int}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {int}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {int}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {int}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {int}
    direct_declarator -> direct_declarator . [[,[] [],]] {int}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {int}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {int}
    direct_declarator -> direct_declarator . [(,(] [),)] {int}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {long}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {long}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {long}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {long}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {long}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {long}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {long}
    direct_declarator -> direct_declarator . [[,[] [],]] {long}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {long}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {long}
    direct_declarator -> direct_declarator . [(,(] [),)] {long}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {register}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {register}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {register}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {register}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {register}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {register}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {register}
    direct_declarator -> direct_declarator . [[,[] [],]] {register}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {register}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {register}
    direct_declarator -> direct_declarator . [(,(] [),)] {register}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {restrict}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {restrict}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {restrict}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {restrict}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {restrict}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {restrict}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {restrict}
    direct_declarator -> direct_declarator . [[,[] [],]] {restrict}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {restrict}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {restrict}
    direct_declarator -> direct_declarator . [(,(] [),)] {restrict}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {short}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {short}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {short}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {short}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {short}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {short}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {short}
    direct_declarator -> direct_declarator . [[,[] [],]] {short}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {short}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {short}
    direct_declarator -> direct_declarator . [(,(] [),)] {short}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {signed}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {signed}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {signed}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {signed}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {signed}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {signed}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {signed}
    direct_declarator -> direct_declarator . [[,[] [],]] {signed}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {signed}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {signed}
    direct_declarator -> direct_declarator . [(,(] [),)] {signed}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {static}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {static}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {static}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {static}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {static}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {static}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {static}
    direct_declarator -> direct_declarator . [[,[] [],]] {static}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {static}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {static}
    direct_declarator -> direct_declarator . [(,(] [),)] {static}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {struct}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {struct}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {struct}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {struct}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {struct}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {struct}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {struct}
    direct_declarator -> direct_declarator . [[,[] [],]] {struct}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {struct}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {struct}
    direct_declarator -> direct_declarator . [(,(] [),)] {struct}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {typedef}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {typedef}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {typedef}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {typedef}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {typedef}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {typedef}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {typedef}
    direct_declarator -> direct_declarator . [[,[] [],]] {typedef}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {typedef}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {typedef}
    direct_declarator -> direct_declarator . [(,(] [),)] {typedef}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {union}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {union}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {union}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {union}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {union}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {union}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {union}
    direct_declarator -> direct_declarator . [[,[] [],]] {union}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {union}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {union}
    direct_declarator -> direct_declarator . [(,(] [),)] {union}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {unsigned}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {unsigned}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {unsigned}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {unsigned}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {unsigned}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {unsigned}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {unsigned}
    direct_declarator -> direct_declarator . [[,[] [],]] {unsigned}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {unsigned}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {unsigned}
    direct_declarator -> direct_declarator . [(,(] [),)] {unsigned}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {void}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {void}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {void}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {void}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {void}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {void}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {void}
    direct_declarator -> direct_declarator . [[,[] [],]] {void}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {void}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {void}
    direct_declarator -> direct_declarator . [(,(] [),)] {void}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {volatile}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {volatile}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {volatile}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {volatile}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {volatile}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {volatile}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {volatile}
    direct_declarator -> direct_declarator . [[,[] [],]] {volatile}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {volatile}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {volatile}
    direct_declarator -> direct_declarator . [(,(] [),)] {volatile}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {{}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {{}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {{}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {{}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {{}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {{}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {{}
    direct_declarator -> direct_declarator . [[,[] [],]] {{}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {{}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {{}
    direct_declarator -> direct_declarator . [(,(] [),)] {{}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {[}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {[}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {[}
    direct_declarator -> direct_declarator . [[,[] [],]] {[}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {[}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {[}
    direct_declarator -> direct_declarator . [(,(] [),)] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {(}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {(}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {(}
    direct_declarator -> direct_declarator . [[,[] [],]] {(}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {(}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {(}
    direct_declarator -> direct_declarator . [(,(] [),)] {(}
    declarator -> direct_declarator . {;}
    declarator -> direct_declarator . {=}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {;}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {;}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {;}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {;}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {;}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {;}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {;}
    direct_declarator -> direct_declarator . [[,[] [],]] {;}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {;}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {;}
    direct_declarator -> direct_declarator . [(,(] [),)] {;}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {=}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {=}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {=}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {=}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {=}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {=}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {=}
    direct_declarator -> direct_declarator . [[,[] [],]] {=}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {=}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {=}
    direct_declarator -> direct_declarator . [(,(] [),)] {=}
    declarator -> direct_declarator . {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {,}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {,}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {,}
    direct_declarator -> direct_declarator . [[,[] [],]] {,}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {,}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {,}
    direct_declarator -> direct_declarator . [(,(] [),)] {,}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {TYPE_NAME}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {TYPE_NAME}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {TYPE_NAME}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {auto}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {auto}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {auto}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {bool}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {bool}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {bool}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {char}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {char}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {char}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {complex}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {complex}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {complex}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {const}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {const}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {const}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {double}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {double}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {double}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {enum}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {enum}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {enum}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {extern}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {extern}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {extern}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {float}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {float}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {float}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {imaginary}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {imaginary}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {imaginary}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {inline}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {inline}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {inline}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {int}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {int}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {int}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {long}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {long}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {long}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {register}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {register}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {register}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {restrict}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {restrict}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {restrict}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {short}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {short}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {short}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {signed}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {signed}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {signed}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {static}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {static}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {static}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {struct}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {struct}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {struct}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {typedef}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {typedef}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {typedef}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {union}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {union}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {union}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {unsigned}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {unsigned}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {unsigned}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {void}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {void}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {void}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {volatile}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {volatile}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {volatile}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {{}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {{}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {{}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {[}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {[}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {[}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {(}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {(}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {(}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {;}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {;}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {;}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {=}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {=}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {=}
check: shift direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {,}
check: shift direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {,}
check: shift direct_declarator -> direct_declarator . [(,(] [),)] {,}
shifts: 93, reduces: 0, accepts: 0
shifting [(,(]
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {auto}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {auto}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {auto}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {bool}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {bool}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {bool}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {char}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {char}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {char}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {complex}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {complex}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {complex}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {const}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {const}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {const}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {double}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {double}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {double}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {enum}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {enum}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {enum}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {extern}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {extern}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {extern}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {float}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {float}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {float}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {imaginary}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {imaginary}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {imaginary}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {inline}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {inline}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {inline}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {int}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {int}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {int}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {long}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {long}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {long}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {register}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {register}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {register}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {restrict}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {restrict}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {restrict}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {short}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {short}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {short}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {signed}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {signed}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {signed}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {static}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {static}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {static}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {struct}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {struct}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {struct}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {typedef}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {typedef}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {typedef}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {union}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {union}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {union}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {unsigned}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {unsigned}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {unsigned}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {void}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {void}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {void}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {volatile}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {volatile}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {volatile}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {{}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {{}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {{}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {[}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {[}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {[}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {(}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {(}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {(}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {;}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {;}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {;}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {=}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {=}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {=}
building new item: direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {,}
building new item: direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {,}
building new item: direct_declarator -> direct_declarator [(,(] . [),)] {,}
closure post shift
LOOP: 61, token: int, token_value: int
[verbose dump (every loop)]
parser state:
current token: int, value: int
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
 state stack (kernel items of top state only):
  state 4
   kernel items:
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {TYPE_NAME}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {TYPE_NAME}
    direct_declarator -> direct_declarator [(,(] . [),)] {TYPE_NAME}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {auto}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {auto}
    direct_declarator -> direct_declarator [(,(] . [),)] {auto}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {bool}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {bool}
    direct_declarator -> direct_declarator [(,(] . [),)] {bool}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {char}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {char}
    direct_declarator -> direct_declarator [(,(] . [),)] {char}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {complex}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {complex}
    direct_declarator -> direct_declarator [(,(] . [),)] {complex}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {const}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {const}
    direct_declarator -> direct_declarator [(,(] . [),)] {const}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {double}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {double}
    direct_declarator -> direct_declarator [(,(] . [),)] {double}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {enum}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {enum}
    direct_declarator -> direct_declarator [(,(] . [),)] {enum}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {extern}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {extern}
    direct_declarator -> direct_declarator [(,(] . [),)] {extern}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {float}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {float}
    direct_declarator -> direct_declarator [(,(] . [),)] {float}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {imaginary}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {imaginary}
    direct_declarator -> direct_declarator [(,(] . [),)] {imaginary}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {inline}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {inline}
    direct_declarator -> direct_declarator [(,(] . [),)] {inline}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {int}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {int}
    direct_declarator -> direct_declarator [(,(] . [),)] {int}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {long}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {long}
    direct_declarator -> direct_declarator [(,(] . [),)] {long}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {register}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {register}
    direct_declarator -> direct_declarator [(,(] . [),)] {register}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {restrict}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {restrict}
    direct_declarator -> direct_declarator [(,(] . [),)] {restrict}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {short}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {short}
    direct_declarator -> direct_declarator [(,(] . [),)] {short}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {signed}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {signed}
    direct_declarator -> direct_declarator [(,(] . [),)] {signed}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {static}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {static}
    direct_declarator -> direct_declarator [(,(] . [),)] {static}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {struct}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {struct}
    direct_declarator -> direct_declarator [(,(] . [),)] {struct}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {typedef}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {typedef}
    direct_declarator -> direct_declarator [(,(] . [),)] {typedef}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {union}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {union}
    direct_declarator -> direct_declarator [(,(] . [),)] {union}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {unsigned}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {unsigned}
    direct_declarator -> direct_declarator [(,(] . [),)] {unsigned}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {void}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {void}
    direct_declarator -> direct_declarator [(,(] . [),)] {void}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {volatile}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {volatile}
    direct_declarator -> direct_declarator [(,(] . [),)] {volatile}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {{}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {{}
    direct_declarator -> direct_declarator [(,(] . [),)] {{}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {[}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {[}
    direct_declarator -> direct_declarator [(,(] . [),)] {[}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {(}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {(}
    direct_declarator -> direct_declarator [(,(] . [),)] {(}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {;}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {;}
    direct_declarator -> direct_declarator [(,(] . [),)] {;}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {=}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {=}
    direct_declarator -> direct_declarator [(,(] . [),)] {=}
    direct_declarator -> direct_declarator [(,(] . parameter_type_list [),)] {,}
    direct_declarator -> direct_declarator [(,(] . identifier_list [),)] {,}
    direct_declarator -> direct_declarator [(,(] . [),)] {,}
check: shift type_specifier -> . [int,int] {(}
check: shift type_specifier -> . [int,int] {*}
check: shift type_specifier -> . [int,int] {id}
check: shift type_specifier -> . [int,int] {TYPE_NAME}
check: shift type_specifier -> . [int,int] {auto}
check: shift type_specifier -> . [int,int] {bool}
check: shift type_specifier -> . [int,int] {char}
check: shift type_specifier -> . [int,int] {complex}
check: shift type_specifier -> . [int,int] {const}
check: shift type_specifier -> . [int,int] {double}
check: shift type_specifier -> . [int,int] {enum}
check: shift type_specifier -> . [int,int] {extern}
check: shift type_specifier -> . [int,int] {float}
check: shift type_specifier -> . [int,int] {imaginary}
check: shift type_specifier -> . [int,int] {inline}
check: shift type_specifier -> . [int,int] {int}
check: shift type_specifier -> . [int,int] {long}
check: shift type_specifier -> . [int,int] {register}
check: shift type_specifier -> . [int,int] {restrict}
check: shift type_specifier -> . [int,int] {short}
check: shift type_specifier -> . [int,int] {signed}
check: shift type_specifier -> . [int,int] {static}
check: shift type_specifier -> . [int,int] {struct}
check: shift type_specifier -> . [int,int] {typedef}
check: shift type_specifier -> . [int,int] {union}
check: shift type_specifier -> . [int,int] {unsigned}
check: shift type_specifier -> . [int,int] {void}
check: shift type_specifier -> . [int,int] {volatile}
check: shift type_specifier -> . [int,int] {[}
check: shift type_specifier -> . [int,int] {)}
check: shift type_specifier -> . [int,int] {,}
shifts: 31, reduces: 0, accepts: 0
shifting [int,int]
building new item: type_specifier -> [int,int] . {(}
building new item: type_specifier -> [int,int] . {*}
building new item: type_specifier -> [int,int] . {id}
building new item: type_specifier -> [int,int] . {TYPE_NAME}
building new item: type_specifier -> [int,int] . {auto}
building new item: type_specifier -> [int,int] . {bool}
building new item: type_specifier -> [int,int] . {char}
building new item: type_specifier -> [int,int] . {complex}
building new item: type_specifier -> [int,int] . {const}
building new item: type_specifier -> [int,int] . {double}
building new item: type_specifier -> [int,int] . {enum}
building new item: type_specifier -> [int,int] . {extern}
building new item: type_specifier -> [int,int] . {float}
building new item: type_specifier -> [int,int] . {imaginary}
building new item: type_specifier -> [int,int] . {inline}
building new item: type_specifier -> [int,int] . {int}
building new item: type_specifier -> [int,int] . {long}
building new item: type_specifier -> [int,int] . {register}
building new item: type_specifier -> [int,int] . {restrict}
building new item: type_specifier -> [int,int] . {short}
building new item: type_specifier -> [int,int] . {signed}
building new item: type_specifier -> [int,int] . {static}
building new item: type_specifier -> [int,int] . {struct}
building new item: type_specifier -> [int,int] . {typedef}
building new item: type_specifier -> [int,int] . {union}
building new item: type_specifier -> [int,int] . {unsigned}
building new item: type_specifier -> [int,int] . {void}
building new item: type_specifier -> [int,int] . {volatile}
building new item: type_specifier -> [int,int] . {[}
building new item: type_specifier -> [int,int] . {)}
building new item: type_specifier -> [int,int] . {,}
closure post shift
LOOP: 62, token: id, token_value: argc
[verbose dump (every loop)]
parser state:
current token: id, value: argc
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [int,int]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    type_specifier -> [int,int] . {(}
    type_specifier -> [int,int] . {*}
    type_specifier -> [int,int] . {id}
    type_specifier -> [int,int] . {TYPE_NAME}
    type_specifier -> [int,int] . {auto}
    type_specifier -> [int,int] . {bool}
    type_specifier -> [int,int] . {char}
    type_specifier -> [int,int] . {complex}
    type_specifier -> [int,int] . {const}
    type_specifier -> [int,int] . {double}
    type_specifier -> [int,int] . {enum}
    type_specifier -> [int,int] . {extern}
    type_specifier -> [int,int] . {float}
    type_specifier -> [int,int] . {imaginary}
    type_specifier -> [int,int] . {inline}
    type_specifier -> [int,int] . {int}
    type_specifier -> [int,int] . {long}
    type_specifier -> [int,int] . {register}
    type_specifier -> [int,int] . {restrict}
    type_specifier -> [int,int] . {short}
    type_specifier -> [int,int] . {signed}
    type_specifier -> [int,int] . {static}
    type_specifier -> [int,int] . {struct}
    type_specifier -> [int,int] . {typedef}
    type_specifier -> [int,int] . {union}
    type_specifier -> [int,int] . {unsigned}
    type_specifier -> [int,int] . {void}
    type_specifier -> [int,int] . {volatile}
    type_specifier -> [int,int] . {[}
    type_specifier -> [int,int] . {)}
    type_specifier -> [int,int] . {,}
check: reduce type_specifier -> [int,int] . {id}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: type_specifier -> [int,int] . {(}
trying to reduce by: type_specifier -> [int,int] . {*}
trying to reduce by: type_specifier -> [int,int] . {id}
reduce: type_specifier -> int 
reduce item: type_specifier -> [int,int] . {id}
building new item: declaration_specifiers -> type_specifier . {(}
building new item: declaration_specifiers -> type_specifier . {*}
building new item: declaration_specifiers -> type_specifier . {id}
building new item: declaration_specifiers -> type_specifier . declaration_specifiers {(}
building new item: declaration_specifiers -> type_specifier . declaration_specifiers {*}
building new item: declaration_specifiers -> type_specifier . declaration_specifiers {id}
building new item: declaration_specifiers -> type_specifier . {[}
building new item: declaration_specifiers -> type_specifier . declaration_specifiers {[}
building new item: declaration_specifiers -> type_specifier . {)}
building new item: declaration_specifiers -> type_specifier . declaration_specifiers {)}
building new item: declaration_specifiers -> type_specifier . {,}
building new item: declaration_specifiers -> type_specifier . declaration_specifiers {,}
closure post reduce
LOOP: 63, token: id, token_value: argc
[verbose dump (every loop)]
parser state:
current token: id, value: argc
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [type_specifier,type_specifier]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    declaration_specifiers -> type_specifier . {(}
    declaration_specifiers -> type_specifier . {*}
    declaration_specifiers -> type_specifier . {id}
    declaration_specifiers -> type_specifier . declaration_specifiers {(}
    declaration_specifiers -> type_specifier . declaration_specifiers {*}
    declaration_specifiers -> type_specifier . declaration_specifiers {id}
    declaration_specifiers -> type_specifier . {[}
    declaration_specifiers -> type_specifier . declaration_specifiers {[}
    declaration_specifiers -> type_specifier . {)}
    declaration_specifiers -> type_specifier . declaration_specifiers {)}
    declaration_specifiers -> type_specifier . {,}
    declaration_specifiers -> type_specifier . declaration_specifiers {,}
check: reduce declaration_specifiers -> type_specifier . {id}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: declaration_specifiers -> type_specifier . {(}
trying to reduce by: declaration_specifiers -> type_specifier . {*}
trying to reduce by: declaration_specifiers -> type_specifier . {id}
reduce: declaration_specifiers -> int 
reduce item: declaration_specifiers -> type_specifier . {id}
building new item: parameter_declaration -> declaration_specifiers . declarator {)}
building new item: parameter_declaration -> declaration_specifiers . abstract_declarator {)}
building new item: parameter_declaration -> declaration_specifiers . {)}
building new item: parameter_declaration -> declaration_specifiers . declarator {,}
building new item: parameter_declaration -> declaration_specifiers . abstract_declarator {,}
building new item: parameter_declaration -> declaration_specifiers . {,}
closure post reduce
LOOP: 64, token: id, token_value: argc
[verbose dump (every loop)]
parser state:
current token: id, value: argc
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [declaration_specifiers,declaration_specifiers]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    parameter_declaration -> declaration_specifiers . declarator {)}
    parameter_declaration -> declaration_specifiers . abstract_declarator {)}
    parameter_declaration -> declaration_specifiers . {)}
    parameter_declaration -> declaration_specifiers . declarator {,}
    parameter_declaration -> declaration_specifiers . abstract_declarator {,}
    parameter_declaration -> declaration_specifiers . {,}
check: shift direct_declarator -> . [id,id] {)}
check: shift direct_declarator -> . [id,id] {,}
check: shift direct_declarator -> . [id,id] {[}
check: shift direct_declarator -> . [id,id] {(}
shifts: 4, reduces: 0, accepts: 0
shifting [id,argc]
building new item: direct_declarator -> [id,id] . {)}
building new item: direct_declarator -> [id,id] . {,}
building new item: direct_declarator -> [id,id] . {[}
building new item: direct_declarator -> [id,id] . {(}
closure post shift
LOOP: 65, token: ,, token_value: ,
[verbose dump (every loop)]
parser state:
current token: ,, value: ,
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [declaration_specifiers,declaration_specifiers]
  [id,argc]
 state stack (kernel items of top state only):
  state 6
   kernel items:
    direct_declarator -> [id,id] . {)}
    direct_declarator -> [id,id] . {,}
    direct_declarator -> [id,id] . {[}
    direct_declarator -> [id,id] . {(}
check: reduce direct_declarator -> [id,id] . {,}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: direct_declarator -> [id,id] . {)}
trying to reduce by: direct_declarator -> [id,id] . {,}
reduce: direct_declarator -> argc 
reduce item: direct_declarator -> [id,id] . {,}
building new item: declarator -> direct_declarator . {)}
building new item: declarator -> direct_declarator . {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {)}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {)}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {)}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {)}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {)}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {)}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {)}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {)}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {)}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {)}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {)}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {,}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {,}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {,}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {[}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {[}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {[}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {(}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {(}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {(}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {(}
closure post reduce
LOOP: 66, token: ,, token_value: ,
[verbose dump (every loop)]
parser state:
current token: ,, value: ,
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
 state stack (kernel items of top state only):
  state 6
   kernel items:
    declarator -> direct_declarator . {)}
    declarator -> direct_declarator . {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {)}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {)}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {)}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {)}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {)}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {)}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {)}
    direct_declarator -> direct_declarator . [[,[] [],]] {)}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {)}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {)}
    direct_declarator -> direct_declarator . [(,(] [),)] {)}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {,}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {,}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {,}
    direct_declarator -> direct_declarator . [[,[] [],]] {,}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {,}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {,}
    direct_declarator -> direct_declarator . [(,(] [),)] {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {[}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {[}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {[}
    direct_declarator -> direct_declarator . [[,[] [],]] {[}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {[}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {[}
    direct_declarator -> direct_declarator . [(,(] [),)] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {(}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {(}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {(}
    direct_declarator -> direct_declarator . [[,[] [],]] {(}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {(}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {(}
    direct_declarator -> direct_declarator . [(,(] [),)] {(}
check: reduce declarator -> direct_declarator . {,}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: declarator -> direct_declarator . {)}
trying to reduce by: declarator -> direct_declarator . {,}
reduce: declarator -> argc 
reduce item: declarator -> direct_declarator . {,}
building new item: parameter_declaration -> declaration_specifiers declarator . {)}
building new item: parameter_declaration -> declaration_specifiers declarator . {,}
closure post reduce
LOOP: 67, token: ,, token_value: ,
[verbose dump (every loop)]
parser state:
current token: ,, value: ,
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
 state stack (kernel items of top state only):
  state 6
   kernel items:
    parameter_declaration -> declaration_specifiers declarator . {)}
    parameter_declaration -> declaration_specifiers declarator . {,}
check: reduce parameter_declaration -> declaration_specifiers declarator . {,}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: parameter_declaration -> declaration_specifiers declarator . {)}
trying to reduce by: parameter_declaration -> declaration_specifiers declarator . {,}
reduce: parameter_declaration -> int argc 
reduce item: parameter_declaration -> declaration_specifiers declarator . {,}
building new item: parameter_list -> parameter_declaration . {)}
building new item: parameter_list -> parameter_declaration . {,}
closure post reduce
LOOP: 68, token: ,, token_value: ,
[verbose dump (every loop)]
parser state:
current token: ,, value: ,
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [parameter_declaration,parameter_declaration]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    parameter_list -> parameter_declaration . {)}
    parameter_list -> parameter_declaration . {,}
check: reduce parameter_list -> parameter_declaration . {,}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: parameter_list -> parameter_declaration . {)}
trying to reduce by: parameter_list -> parameter_declaration . {,}
reduce: parameter_list -> int argc 
reduce item: parameter_list -> parameter_declaration . {,}
building new item: parameter_type_list -> parameter_list . {)}
building new item: parameter_type_list -> parameter_list . [,,,] [...,...] {)}
building new item: parameter_list -> parameter_list . [,,,] parameter_declaration {)}
building new item: parameter_list -> parameter_list . [,,,] parameter_declaration {,}
closure post reduce
LOOP: 69, token: ,, token_value: ,
[verbose dump (every loop)]
parser state:
current token: ,, value: ,
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [parameter_list,parameter_list]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    parameter_type_list -> parameter_list . {)}
    parameter_type_list -> parameter_list . [,,,] [...,...] {)}
    parameter_list -> parameter_list . [,,,] parameter_declaration {)}
    parameter_list -> parameter_list . [,,,] parameter_declaration {,}
check: shift parameter_type_list -> parameter_list . [,,,] [...,...] {)}
check: shift parameter_list -> parameter_list . [,,,] parameter_declaration {)}
check: shift parameter_list -> parameter_list . [,,,] parameter_declaration {,}
shifts: 3, reduces: 0, accepts: 0
shifting [,,,]
building new item: parameter_type_list -> parameter_list [,,,] . [...,...] {)}
building new item: parameter_list -> parameter_list [,,,] . parameter_declaration {)}
building new item: parameter_list -> parameter_list [,,,] . parameter_declaration {,}
closure post shift
LOOP: 70, token: char, token_value: char
[verbose dump (every loop)]
parser state:
current token: char, value: char
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [parameter_list,parameter_list]
  [,,,]
 state stack (kernel items of top state only):
  state 6
   kernel items:
    parameter_type_list -> parameter_list [,,,] . [...,...] {)}
    parameter_list -> parameter_list [,,,] . parameter_declaration {)}
    parameter_list -> parameter_list [,,,] . parameter_declaration {,}
check: shift type_specifier -> . [char,char] {(}
check: shift type_specifier -> . [char,char] {*}
check: shift type_specifier -> . [char,char] {id}
check: shift type_specifier -> . [char,char] {TYPE_NAME}
check: shift type_specifier -> . [char,char] {auto}
check: shift type_specifier -> . [char,char] {bool}
check: shift type_specifier -> . [char,char] {char}
check: shift type_specifier -> . [char,char] {complex}
check: shift type_specifier -> . [char,char] {const}
check: shift type_specifier -> . [char,char] {double}
check: shift type_specifier -> . [char,char] {enum}
check: shift type_specifier -> . [char,char] {extern}
check: shift type_specifier -> . [char,char] {float}
check: shift type_specifier -> . [char,char] {imaginary}
check: shift type_specifier -> . [char,char] {inline}
check: shift type_specifier -> . [char,char] {int}
check: shift type_specifier -> . [char,char] {long}
check: shift type_specifier -> . [char,char] {register}
check: shift type_specifier -> . [char,char] {restrict}
check: shift type_specifier -> . [char,char] {short}
check: shift type_specifier -> . [char,char] {signed}
check: shift type_specifier -> . [char,char] {static}
check: shift type_specifier -> . [char,char] {struct}
check: shift type_specifier -> . [char,char] {typedef}
check: shift type_specifier -> . [char,char] {union}
check: shift type_specifier -> . [char,char] {unsigned}
check: shift type_specifier -> . [char,char] {void}
check: shift type_specifier -> . [char,char] {volatile}
check: shift type_specifier -> . [char,char] {[}
check: shift type_specifier -> . [char,char] {)}
check: shift type_specifier -> . [char,char] {,}
shifts: 31, reduces: 0, accepts: 0
shifting [char,char]
building new item: type_specifier -> [char,char] . {(}
building new item: type_specifier -> [char,char] . {*}
building new item: type_specifier -> [char,char] . {id}
building new item: type_specifier -> [char,char] . {TYPE_NAME}
building new item: type_specifier -> [char,char] . {auto}
building new item: type_specifier -> [char,char] . {bool}
building new item: type_specifier -> [char,char] . {char}
building new item: type_specifier -> [char,char] . {complex}
building new item: type_specifier -> [char,char] . {const}
building new item: type_specifier -> [char,char] . {double}
building new item: type_specifier -> [char,char] . {enum}
building new item: type_specifier -> [char,char] . {extern}
building new item: type_specifier -> [char,char] . {float}
building new item: type_specifier -> [char,char] . {imaginary}
building new item: type_specifier -> [char,char] . {inline}
building new item: type_specifier -> [char,char] . {int}
building new item: type_specifier -> [char,char] . {long}
building new item: type_specifier -> [char,char] . {register}
building new item: type_specifier -> [char,char] . {restrict}
building new item: type_specifier -> [char,char] . {short}
building new item: type_specifier -> [char,char] . {signed}
building new item: type_specifier -> [char,char] . {static}
building new item: type_specifier -> [char,char] . {struct}
building new item: type_specifier -> [char,char] . {typedef}
building new item: type_specifier -> [char,char] . {union}
building new item: type_specifier -> [char,char] . {unsigned}
building new item: type_specifier -> [char,char] . {void}
building new item: type_specifier -> [char,char] . {volatile}
building new item: type_specifier -> [char,char] . {[}
building new item: type_specifier -> [char,char] . {)}
building new item: type_specifier -> [char,char] . {,}
closure post shift
LOOP: 71, token: *, token_value: *
[verbose dump (every loop)]
parser state:
current token: *, value: *
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [parameter_list,parameter_list]
  [,,,]
  [char,char]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    type_specifier -> [char,char] . {(}
    type_specifier -> [char,char] . {*}
    type_specifier -> [char,char] . {id}
    type_specifier -> [char,char] . {TYPE_NAME}
    type_specifier -> [char,char] . {auto}
    type_specifier -> [char,char] . {bool}
    type_specifier -> [char,char] . {char}
    type_specifier -> [char,char] . {complex}
    type_specifier -> [char,char] . {const}
    type_specifier -> [char,char] . {double}
    type_specifier -> [char,char] . {enum}
    type_specifier -> [char,char] . {extern}
    type_specifier -> [char,char] . {float}
    type_specifier -> [char,char] . {imaginary}
    type_specifier -> [char,char] . {inline}
    type_specifier -> [char,char] . {int}
    type_specifier -> [char,char] . {long}
    type_specifier -> [char,char] . {register}
    type_specifier -> [char,char] . {restrict}
    type_specifier -> [char,char] . {short}
    type_specifier -> [char,char] . {signed}
    type_specifier -> [char,char] . {static}
    type_specifier -> [char,char] . {struct}
    type_specifier -> [char,char] . {typedef}
    type_specifier -> [char,char] . {union}
    type_specifier -> [char,char] . {unsigned}
    type_specifier -> [char,char] . {void}
    type_specifier -> [char,char] . {volatile}
    type_specifier -> [char,char] . {[}
    type_specifier -> [char,char] . {)}
    type_specifier -> [char,char] . {,}
check: reduce type_specifier -> [char,char] . {*}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: type_specifier -> [char,char] . {(}
trying to reduce by: type_specifier -> [char,char] . {*}
reduce: type_specifier -> char 
reduce item: type_specifier -> [char,char] . {*}
building new item: declaration_specifiers -> type_specifier . {(}
building new item: declaration_specifiers -> type_specifier . {*}
building new item: declaration_specifiers -> type_specifier . {id}
building new item: declaration_specifiers -> type_specifier . declaration_specifiers {(}
building new item: declaration_specifiers -> type_specifier . declaration_specifiers {*}
building new item: declaration_specifiers -> type_specifier . declaration_specifiers {id}
building new item: declaration_specifiers -> type_specifier . {[}
building new item: declaration_specifiers -> type_specifier . declaration_specifiers {[}
building new item: declaration_specifiers -> type_specifier . {)}
building new item: declaration_specifiers -> type_specifier . declaration_specifiers {)}
building new item: declaration_specifiers -> type_specifier . {,}
building new item: declaration_specifiers -> type_specifier . declaration_specifiers {,}
closure post reduce
LOOP: 72, token: *, token_value: *
[verbose dump (every loop)]
parser state:
current token: *, value: *
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [parameter_list,parameter_list]
  [,,,]
  [type_specifier,type_specifier]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    declaration_specifiers -> type_specifier . {(}
    declaration_specifiers -> type_specifier . {*}
    declaration_specifiers -> type_specifier . {id}
    declaration_specifiers -> type_specifier . declaration_specifiers {(}
    declaration_specifiers -> type_specifier . declaration_specifiers {*}
    declaration_specifiers -> type_specifier . declaration_specifiers {id}
    declaration_specifiers -> type_specifier . {[}
    declaration_specifiers -> type_specifier . declaration_specifiers {[}
    declaration_specifiers -> type_specifier . {)}
    declaration_specifiers -> type_specifier . declaration_specifiers {)}
    declaration_specifiers -> type_specifier . {,}
    declaration_specifiers -> type_specifier . declaration_specifiers {,}
check: reduce declaration_specifiers -> type_specifier . {*}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: declaration_specifiers -> type_specifier . {(}
trying to reduce by: declaration_specifiers -> type_specifier . {*}
reduce: declaration_specifiers -> char 
reduce item: declaration_specifiers -> type_specifier . {*}
building new item: parameter_declaration -> declaration_specifiers . declarator {)}
building new item: parameter_declaration -> declaration_specifiers . abstract_declarator {)}
building new item: parameter_declaration -> declaration_specifiers . {)}
building new item: parameter_declaration -> declaration_specifiers . declarator {,}
building new item: parameter_declaration -> declaration_specifiers . abstract_declarator {,}
building new item: parameter_declaration -> declaration_specifiers . {,}
closure post reduce
LOOP: 73, token: *, token_value: *
[verbose dump (every loop)]
parser state:
current token: *, value: *
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [parameter_list,parameter_list]
  [,,,]
  [declaration_specifiers,declaration_specifiers]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    parameter_declaration -> declaration_specifiers . declarator {)}
    parameter_declaration -> declaration_specifiers . abstract_declarator {)}
    parameter_declaration -> declaration_specifiers . {)}
    parameter_declaration -> declaration_specifiers . declarator {,}
    parameter_declaration -> declaration_specifiers . abstract_declarator {,}
    parameter_declaration -> declaration_specifiers . {,}
check: shift pointer -> . [*,*] {(}
check: shift pointer -> . [*,*] {id}
check: shift pointer -> . [*,*] type_qualifier_list {(}
check: shift pointer -> . [*,*] type_qualifier_list {id}
check: shift pointer -> . [*,*] pointer {(}
check: shift pointer -> . [*,*] pointer {id}
check: shift pointer -> . [*,*] type_qualifier_list pointer {(}
check: shift pointer -> . [*,*] type_qualifier_list pointer {id}
check: shift pointer -> . [*,*] {)}
check: shift pointer -> . [*,*] type_qualifier_list {)}
check: shift pointer -> . [*,*] pointer {)}
check: shift pointer -> . [*,*] type_qualifier_list pointer {)}
check: shift pointer -> . [*,*] {[}
check: shift pointer -> . [*,*] type_qualifier_list {[}
check: shift pointer -> . [*,*] pointer {[}
check: shift pointer -> . [*,*] type_qualifier_list pointer {[}
check: shift pointer -> . [*,*] {,}
check: shift pointer -> . [*,*] type_qualifier_list {,}
check: shift pointer -> . [*,*] pointer {,}
check: shift pointer -> . [*,*] type_qualifier_list pointer {,}
shifts: 20, reduces: 0, accepts: 0
shifting [*,*]
building new item: pointer -> [*,*] . {(}
building new item: pointer -> [*,*] . {id}
building new item: pointer -> [*,*] . type_qualifier_list {(}
building new item: pointer -> [*,*] . type_qualifier_list {id}
building new item: pointer -> [*,*] . pointer {(}
building new item: pointer -> [*,*] . pointer {id}
building new item: pointer -> [*,*] . type_qualifier_list pointer {(}
building new item: pointer -> [*,*] . type_qualifier_list pointer {id}
building new item: pointer -> [*,*] . {)}
building new item: pointer -> [*,*] . type_qualifier_list {)}
building new item: pointer -> [*,*] . pointer {)}
building new item: pointer -> [*,*] . type_qualifier_list pointer {)}
building new item: pointer -> [*,*] . {[}
building new item: pointer -> [*,*] . type_qualifier_list {[}
building new item: pointer -> [*,*] . pointer {[}
building new item: pointer -> [*,*] . type_qualifier_list pointer {[}
building new item: pointer -> [*,*] . {,}
building new item: pointer -> [*,*] . type_qualifier_list {,}
building new item: pointer -> [*,*] . pointer {,}
building new item: pointer -> [*,*] . type_qualifier_list pointer {,}
closure post shift
LOOP: 74, token: id, token_value: argv
[verbose dump (every loop)]
parser state:
current token: id, value: argv
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [parameter_list,parameter_list]
  [,,,]
  [declaration_specifiers,declaration_specifiers]
  [*,*]
 state stack (kernel items of top state only):
  state 8
   kernel items:
    pointer -> [*,*] . {(}
    pointer -> [*,*] . {id}
    pointer -> [*,*] . type_qualifier_list {(}
    pointer -> [*,*] . type_qualifier_list {id}
    pointer -> [*,*] . pointer {(}
    pointer -> [*,*] . pointer {id}
    pointer -> [*,*] . type_qualifier_list pointer {(}
    pointer -> [*,*] . type_qualifier_list pointer {id}
    pointer -> [*,*] . {)}
    pointer -> [*,*] . type_qualifier_list {)}
    pointer -> [*,*] . pointer {)}
    pointer -> [*,*] . type_qualifier_list pointer {)}
    pointer -> [*,*] . {[}
    pointer -> [*,*] . type_qualifier_list {[}
    pointer -> [*,*] . pointer {[}
    pointer -> [*,*] . type_qualifier_list pointer {[}
    pointer -> [*,*] . {,}
    pointer -> [*,*] . type_qualifier_list {,}
    pointer -> [*,*] . pointer {,}
    pointer -> [*,*] . type_qualifier_list pointer {,}
check: reduce pointer -> [*,*] . {id}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: pointer -> [*,*] . {(}
trying to reduce by: pointer -> [*,*] . {id}
reduce: pointer -> * 
reduce item: pointer -> [*,*] . {id}
building new item: declarator -> pointer . direct_declarator {)}
building new item: abstract_declarator -> pointer . {)}
building new item: abstract_declarator -> pointer . direct_abstract_declarator {)}
building new item: declarator -> pointer . direct_declarator {,}
building new item: abstract_declarator -> pointer . {,}
building new item: abstract_declarator -> pointer . direct_abstract_declarator {,}
closure post reduce
LOOP: 75, token: id, token_value: argv
[verbose dump (every loop)]
parser state:
current token: id, value: argv
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [parameter_list,parameter_list]
  [,,,]
  [declaration_specifiers,declaration_specifiers]
  [pointer,pointer]
 state stack (kernel items of top state only):
  state 8
   kernel items:
    declarator -> pointer . direct_declarator {)}
    abstract_declarator -> pointer . {)}
    abstract_declarator -> pointer . direct_abstract_declarator {)}
    declarator -> pointer . direct_declarator {,}
    abstract_declarator -> pointer . {,}
    abstract_declarator -> pointer . direct_abstract_declarator {,}
check: shift direct_declarator -> . [id,id] {)}
check: shift direct_declarator -> . [id,id] {,}
check: shift direct_declarator -> . [id,id] {[}
check: shift direct_declarator -> . [id,id] {(}
shifts: 4, reduces: 0, accepts: 0
shifting [id,argv]
building new item: direct_declarator -> [id,id] . {)}
building new item: direct_declarator -> [id,id] . {,}
building new item: direct_declarator -> [id,id] . {[}
building new item: direct_declarator -> [id,id] . {(}
closure post shift
LOOP: 76, token: [, token_value: [
[verbose dump (every loop)]
parser state:
current token: [, value: [
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [parameter_list,parameter_list]
  [,,,]
  [declaration_specifiers,declaration_specifiers]
  [pointer,pointer]
  [id,argv]
 state stack (kernel items of top state only):
  state 9
   kernel items:
    direct_declarator -> [id,id] . {)}
    direct_declarator -> [id,id] . {,}
    direct_declarator -> [id,id] . {[}
    direct_declarator -> [id,id] . {(}
check: reduce direct_declarator -> [id,id] . {[}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: direct_declarator -> [id,id] . {)}
trying to reduce by: direct_declarator -> [id,id] . {,}
trying to reduce by: direct_declarator -> [id,id] . {[}
reduce: direct_declarator -> argv 
reduce item: direct_declarator -> [id,id] . {[}
building new item: declarator -> pointer direct_declarator . {)}
building new item: declarator -> pointer direct_declarator . {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {)}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {)}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {)}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {)}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {)}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {)}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {)}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {)}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {)}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {)}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {)}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {,}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {,}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {,}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {[}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {[}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {[}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {(}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {(}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {(}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {(}
closure post reduce
LOOP: 77, token: [, token_value: [
[verbose dump (every loop)]
parser state:
current token: [, value: [
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [parameter_list,parameter_list]
  [,,,]
  [declaration_specifiers,declaration_specifiers]
  [pointer,pointer]
  [direct_declarator,direct_declarator]
 state stack (kernel items of top state only):
  state 9
   kernel items:
    declarator -> pointer direct_declarator . {)}
    declarator -> pointer direct_declarator . {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {)}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {)}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {)}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {)}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {)}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {)}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {)}
    direct_declarator -> direct_declarator . [[,[] [],]] {)}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {)}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {)}
    direct_declarator -> direct_declarator . [(,(] [),)] {)}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {,}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {,}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {,}
    direct_declarator -> direct_declarator . [[,[] [],]] {,}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {,}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {,}
    direct_declarator -> direct_declarator . [(,(] [),)] {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {[}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {[}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {[}
    direct_declarator -> direct_declarator . [[,[] [],]] {[}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {[}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {[}
    direct_declarator -> direct_declarator . [(,(] [),)] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {(}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {(}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {(}
    direct_declarator -> direct_declarator . [[,[] [],]] {(}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {(}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {(}
    direct_declarator -> direct_declarator . [(,(] [),)] {(}
check: shift direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {)}
check: shift direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {)}
check: shift direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {)}
check: shift direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {)}
check: shift direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {)}
check: shift direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {)}
check: shift direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {)}
check: shift direct_declarator -> direct_declarator . [[,[] [],]] {)}
check: shift direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {,}
check: shift direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {,}
check: shift direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {,}
check: shift direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {,}
check: shift direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {,}
check: shift direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {,}
check: shift direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {,}
check: shift direct_declarator -> direct_declarator . [[,[] [],]] {,}
check: shift direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {[}
check: shift direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {[}
check: shift direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {[}
check: shift direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {[}
check: shift direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {[}
check: shift direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {[}
check: shift direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {[}
check: shift direct_declarator -> direct_declarator . [[,[] [],]] {[}
check: shift direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {(}
check: shift direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {(}
check: shift direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {(}
check: shift direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {(}
check: shift direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {(}
check: shift direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {(}
check: shift direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {(}
check: shift direct_declarator -> direct_declarator . [[,[] [],]] {(}
shifts: 32, reduces: 0, accepts: 0
shifting [[,[]
building new item: direct_declarator -> direct_declarator [[,[] . type_qualifier_list assignment_expression [],]] {)}
building new item: direct_declarator -> direct_declarator [[,[] . type_qualifier_list [],]] {)}
building new item: direct_declarator -> direct_declarator [[,[] . assignment_expression [],]] {)}
building new item: direct_declarator -> direct_declarator [[,[] . [static,static] type_qualifier_list assignment_expression [],]] {)}
building new item: direct_declarator -> direct_declarator [[,[] . type_qualifier_list [static,static] assignment_expression [],]] {)}
building new item: direct_declarator -> direct_declarator [[,[] . type_qualifier_list [*,*] [],]] {)}
building new item: direct_declarator -> direct_declarator [[,[] . [*,*] [],]] {)}
building new item: direct_declarator -> direct_declarator [[,[] . [],]] {)}
building new item: direct_declarator -> direct_declarator [[,[] . type_qualifier_list assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator [[,[] . type_qualifier_list [],]] {,}
building new item: direct_declarator -> direct_declarator [[,[] . assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator [[,[] . [static,static] type_qualifier_list assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator [[,[] . type_qualifier_list [static,static] assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator [[,[] . type_qualifier_list [*,*] [],]] {,}
building new item: direct_declarator -> direct_declarator [[,[] . [*,*] [],]] {,}
building new item: direct_declarator -> direct_declarator [[,[] . [],]] {,}
building new item: direct_declarator -> direct_declarator [[,[] . type_qualifier_list assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator [[,[] . type_qualifier_list [],]] {[}
building new item: direct_declarator -> direct_declarator [[,[] . assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator [[,[] . [static,static] type_qualifier_list assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator [[,[] . type_qualifier_list [static,static] assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator [[,[] . type_qualifier_list [*,*] [],]] {[}
building new item: direct_declarator -> direct_declarator [[,[] . [*,*] [],]] {[}
building new item: direct_declarator -> direct_declarator [[,[] . [],]] {[}
building new item: direct_declarator -> direct_declarator [[,[] . type_qualifier_list assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator [[,[] . type_qualifier_list [],]] {(}
building new item: direct_declarator -> direct_declarator [[,[] . assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator [[,[] . [static,static] type_qualifier_list assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator [[,[] . type_qualifier_list [static,static] assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator [[,[] . type_qualifier_list [*,*] [],]] {(}
building new item: direct_declarator -> direct_declarator [[,[] . [*,*] [],]] {(}
building new item: direct_declarator -> direct_declarator [[,[] . [],]] {(}
closure post shift
LOOP: 78, token: ], token_value: ]
[verbose dump (every loop)]
parser state:
current token: ], value: ]
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [parameter_list,parameter_list]
  [,,,]
  [declaration_specifiers,declaration_specifiers]
  [pointer,pointer]
  [direct_declarator,direct_declarator]
  [[,[]
 state stack (kernel items of top state only):
  state 10
   kernel items:
    direct_declarator -> direct_declarator [[,[] . type_qualifier_list assignment_expression [],]] {)}
    direct_declarator -> direct_declarator [[,[] . type_qualifier_list [],]] {)}
    direct_declarator -> direct_declarator [[,[] . assignment_expression [],]] {)}
    direct_declarator -> direct_declarator [[,[] . [static,static] type_qualifier_list assignment_expression [],]] {)}
    direct_declarator -> direct_declarator [[,[] . type_qualifier_list [static,static] assignment_expression [],]] {)}
    direct_declarator -> direct_declarator [[,[] . type_qualifier_list [*,*] [],]] {)}
    direct_declarator -> direct_declarator [[,[] . [*,*] [],]] {)}
    direct_declarator -> direct_declarator [[,[] . [],]] {)}
    direct_declarator -> direct_declarator [[,[] . type_qualifier_list assignment_expression [],]] {,}
    direct_declarator -> direct_declarator [[,[] . type_qualifier_list [],]] {,}
    direct_declarator -> direct_declarator [[,[] . assignment_expression [],]] {,}
    direct_declarator -> direct_declarator [[,[] . [static,static] type_qualifier_list assignment_expression [],]] {,}
    direct_declarator -> direct_declarator [[,[] . type_qualifier_list [static,static] assignment_expression [],]] {,}
    direct_declarator -> direct_declarator [[,[] . type_qualifier_list [*,*] [],]] {,}
    direct_declarator -> direct_declarator [[,[] . [*,*] [],]] {,}
    direct_declarator -> direct_declarator [[,[] . [],]] {,}
    direct_declarator -> direct_declarator [[,[] . type_qualifier_list assignment_expression [],]] {[}
    direct_declarator -> direct_declarator [[,[] . type_qualifier_list [],]] {[}
    direct_declarator -> direct_declarator [[,[] . assignment_expression [],]] {[}
    direct_declarator -> direct_declarator [[,[] . [static,static] type_qualifier_list assignment_expression [],]] {[}
    direct_declarator -> direct_declarator [[,[] . type_qualifier_list [static,static] assignment_expression [],]] {[}
    direct_declarator -> direct_declarator [[,[] . type_qualifier_list [*,*] [],]] {[}
    direct_declarator -> direct_declarator [[,[] . [*,*] [],]] {[}
    direct_declarator -> direct_declarator [[,[] . [],]] {[}
    direct_declarator -> direct_declarator [[,[] . type_qualifier_list assignment_expression [],]] {(}
    direct_declarator -> direct_declarator [[,[] . type_qualifier_list [],]] {(}
    direct_declarator -> direct_declarator [[,[] . assignment_expression [],]] {(}
    direct_declarator -> direct_declarator [[,[] . [static,static] type_qualifier_list assignment_expression [],]] {(}
    direct_declarator -> direct_declarator [[,[] . type_qualifier_list [static,static] assignment_expression [],]] {(}
    direct_declarator -> direct_declarator [[,[] . type_qualifier_list [*,*] [],]] {(}
    direct_declarator -> direct_declarator [[,[] . [*,*] [],]] {(}
    direct_declarator -> direct_declarator [[,[] . [],]] {(}
check: shift direct_declarator -> direct_declarator [[,[] . [],]] {)}
check: shift direct_declarator -> direct_declarator [[,[] . [],]] {,}
check: shift direct_declarator -> direct_declarator [[,[] . [],]] {[}
check: shift direct_declarator -> direct_declarator [[,[] . [],]] {(}
shifts: 4, reduces: 0, accepts: 0
shifting [],]]
building new item: direct_declarator -> direct_declarator [[,[] [],]] . {)}
building new item: direct_declarator -> direct_declarator [[,[] [],]] . {,}
building new item: direct_declarator -> direct_declarator [[,[] [],]] . {[}
building new item: direct_declarator -> direct_declarator [[,[] [],]] . {(}
closure post shift
LOOP: 79, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [parameter_list,parameter_list]
  [,,,]
  [declaration_specifiers,declaration_specifiers]
  [pointer,pointer]
  [direct_declarator,direct_declarator]
  [[,[]
  [],]]
 state stack (kernel items of top state only):
  state 11
   kernel items:
    direct_declarator -> direct_declarator [[,[] [],]] . {)}
    direct_declarator -> direct_declarator [[,[] [],]] . {,}
    direct_declarator -> direct_declarator [[,[] [],]] . {[}
    direct_declarator -> direct_declarator [[,[] [],]] . {(}
check: reduce direct_declarator -> direct_declarator [[,[] [],]] . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: direct_declarator -> direct_declarator [[,[] [],]] . {)}
reduce: direct_declarator -> argv [ ] 
reduce item: direct_declarator -> direct_declarator [[,[] [],]] . {)}
building new item: declarator -> pointer direct_declarator . {)}
building new item: declarator -> pointer direct_declarator . {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {)}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {)}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {)}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {)}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {)}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {)}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {)}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {)}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {)}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {)}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {)}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {,}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {,}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {,}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {[}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {[}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {[}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {(}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {(}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {(}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {(}
closure post reduce
LOOP: 80, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [parameter_list,parameter_list]
  [,,,]
  [declaration_specifiers,declaration_specifiers]
  [pointer,pointer]
  [direct_declarator,direct_declarator]
 state stack (kernel items of top state only):
  state 9
   kernel items:
    declarator -> pointer direct_declarator . {)}
    declarator -> pointer direct_declarator . {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {)}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {)}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {)}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {)}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {)}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {)}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {)}
    direct_declarator -> direct_declarator . [[,[] [],]] {)}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {)}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {)}
    direct_declarator -> direct_declarator . [(,(] [),)] {)}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {,}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {,}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {,}
    direct_declarator -> direct_declarator . [[,[] [],]] {,}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {,}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {,}
    direct_declarator -> direct_declarator . [(,(] [),)] {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {[}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {[}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {[}
    direct_declarator -> direct_declarator . [[,[] [],]] {[}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {[}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {[}
    direct_declarator -> direct_declarator . [(,(] [),)] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {(}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {(}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {(}
    direct_declarator -> direct_declarator . [[,[] [],]] {(}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {(}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {(}
    direct_declarator -> direct_declarator . [(,(] [),)] {(}
check: reduce declarator -> pointer direct_declarator . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: declarator -> pointer direct_declarator . {)}
reduce: declarator -> * argv [ ] 
reduce item: declarator -> pointer direct_declarator . {)}
building new item: parameter_declaration -> declaration_specifiers declarator . {)}
building new item: parameter_declaration -> declaration_specifiers declarator . {,}
closure post reduce
LOOP: 81, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [parameter_list,parameter_list]
  [,,,]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
 state stack (kernel items of top state only):
  state 8
   kernel items:
    parameter_declaration -> declaration_specifiers declarator . {)}
    parameter_declaration -> declaration_specifiers declarator . {,}
check: reduce parameter_declaration -> declaration_specifiers declarator . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: parameter_declaration -> declaration_specifiers declarator . {)}
reduce: parameter_declaration -> char * argv [ ] 
reduce item: parameter_declaration -> declaration_specifiers declarator . {)}
building new item: parameter_list -> parameter_list [,,,] parameter_declaration . {)}
building new item: parameter_list -> parameter_list [,,,] parameter_declaration . {,}
closure post reduce
LOOP: 82, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [parameter_list,parameter_list]
  [,,,]
  [parameter_declaration,parameter_declaration]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    parameter_list -> parameter_list [,,,] parameter_declaration . {)}
    parameter_list -> parameter_list [,,,] parameter_declaration . {,}
check: reduce parameter_list -> parameter_list [,,,] parameter_declaration . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: parameter_list -> parameter_list [,,,] parameter_declaration . {)}
reduce: parameter_list -> int argc , char * argv [ ] 
reduce item: parameter_list -> parameter_list [,,,] parameter_declaration . {)}
building new item: parameter_type_list -> parameter_list . {)}
building new item: parameter_type_list -> parameter_list . [,,,] [...,...] {)}
building new item: parameter_list -> parameter_list . [,,,] parameter_declaration {)}
building new item: parameter_list -> parameter_list . [,,,] parameter_declaration {,}
closure post reduce
LOOP: 83, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [parameter_list,parameter_list]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    parameter_type_list -> parameter_list . {)}
    parameter_type_list -> parameter_list . [,,,] [...,...] {)}
    parameter_list -> parameter_list . [,,,] parameter_declaration {)}
    parameter_list -> parameter_list . [,,,] parameter_declaration {,}
check: reduce parameter_type_list -> parameter_list . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: parameter_type_list -> parameter_list . {)}
reduce: parameter_type_list -> int argc , char * argv [ ] 
reduce item: parameter_type_list -> parameter_list . {)}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {auto}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {bool}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {char}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {complex}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {const}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {double}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {enum}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {extern}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {float}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {imaginary}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {inline}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {int}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {long}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {register}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {restrict}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {short}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {signed}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {static}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {struct}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {typedef}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {union}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {unsigned}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {void}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {volatile}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {{}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {[}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {(}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {;}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {=}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {,}
closure post reduce
LOOP: 84, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [parameter_type_list,parameter_type_list]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {TYPE_NAME}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {auto}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {bool}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {char}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {complex}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {const}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {double}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {enum}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {extern}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {float}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {imaginary}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {inline}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {int}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {long}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {register}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {restrict}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {short}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {signed}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {static}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {struct}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {typedef}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {union}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {unsigned}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {void}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {volatile}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {{}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {[}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {(}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {;}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {=}
    direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {,}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {TYPE_NAME}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {auto}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {bool}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {char}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {complex}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {const}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {double}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {enum}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {extern}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {float}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {imaginary}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {inline}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {int}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {long}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {register}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {restrict}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {short}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {signed}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {static}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {struct}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {typedef}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {union}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {unsigned}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {void}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {volatile}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {{}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {[}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {(}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {;}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {=}
check: shift direct_declarator -> direct_declarator [(,(] parameter_type_list . [),)] {,}
shifts: 31, reduces: 0, accepts: 0
shifting [),)]
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {TYPE_NAME}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {auto}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {bool}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {char}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {complex}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {const}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {double}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {enum}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {extern}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {float}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {imaginary}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {inline}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {int}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {long}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {register}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {restrict}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {short}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {signed}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {static}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {struct}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {typedef}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {union}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {unsigned}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {void}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {volatile}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {{}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {[}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {(}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {;}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {=}
building new item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {,}
closure post shift
LOOP: 85, token: {, token_value: {
[verbose dump (every loop)]
parser state:
current token: {, value: {
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
  [(,(]
  [parameter_type_list,parameter_type_list]
  [),)]
 state stack (kernel items of top state only):
  state 6
   kernel items:
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {TYPE_NAME}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {auto}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {bool}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {char}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {complex}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {const}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {double}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {enum}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {extern}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {float}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {imaginary}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {inline}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {int}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {long}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {register}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {restrict}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {short}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {signed}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {static}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {struct}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {typedef}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {union}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {unsigned}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {void}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {volatile}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {{}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {[}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {(}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {;}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {=}
    direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {,}
check: reduce direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {{}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {TYPE_NAME}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {auto}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {bool}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {char}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {complex}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {const}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {double}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {enum}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {extern}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {float}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {imaginary}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {inline}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {int}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {long}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {register}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {restrict}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {short}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {signed}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {static}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {struct}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {typedef}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {union}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {unsigned}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {void}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {volatile}
trying to reduce by: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {{}
reduce: direct_declarator -> main ( int argc , char * argv [ ] ) 
reduce item: direct_declarator -> direct_declarator [(,(] parameter_type_list [),)] . {{}
building new item: declarator -> direct_declarator . {TYPE_NAME}
building new item: declarator -> direct_declarator . {auto}
building new item: declarator -> direct_declarator . {bool}
building new item: declarator -> direct_declarator . {char}
building new item: declarator -> direct_declarator . {complex}
building new item: declarator -> direct_declarator . {const}
building new item: declarator -> direct_declarator . {double}
building new item: declarator -> direct_declarator . {enum}
building new item: declarator -> direct_declarator . {extern}
building new item: declarator -> direct_declarator . {float}
building new item: declarator -> direct_declarator . {imaginary}
building new item: declarator -> direct_declarator . {inline}
building new item: declarator -> direct_declarator . {int}
building new item: declarator -> direct_declarator . {long}
building new item: declarator -> direct_declarator . {register}
building new item: declarator -> direct_declarator . {restrict}
building new item: declarator -> direct_declarator . {short}
building new item: declarator -> direct_declarator . {signed}
building new item: declarator -> direct_declarator . {static}
building new item: declarator -> direct_declarator . {struct}
building new item: declarator -> direct_declarator . {typedef}
building new item: declarator -> direct_declarator . {union}
building new item: declarator -> direct_declarator . {unsigned}
building new item: declarator -> direct_declarator . {void}
building new item: declarator -> direct_declarator . {volatile}
building new item: declarator -> direct_declarator . {{}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {TYPE_NAME}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {auto}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {auto}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {auto}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {auto}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {bool}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {bool}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {bool}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {bool}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {char}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {char}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {char}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {char}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {char}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {char}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {char}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {char}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {char}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {char}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {char}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {complex}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {complex}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {complex}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {complex}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {const}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {const}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {const}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {const}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {const}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {const}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {const}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {const}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {const}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {const}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {const}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {double}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {double}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {double}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {double}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {double}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {double}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {double}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {double}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {double}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {double}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {double}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {enum}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {enum}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {enum}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {enum}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {extern}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {extern}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {extern}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {extern}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {float}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {float}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {float}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {float}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {float}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {float}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {float}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {float}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {float}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {float}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {float}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {imaginary}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {imaginary}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {imaginary}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {imaginary}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {inline}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {inline}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {inline}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {inline}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {int}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {int}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {int}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {int}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {int}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {int}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {int}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {int}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {int}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {int}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {int}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {long}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {long}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {long}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {long}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {long}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {long}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {long}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {long}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {long}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {long}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {long}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {register}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {register}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {register}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {register}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {register}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {register}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {register}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {register}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {register}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {register}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {register}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {restrict}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {restrict}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {restrict}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {restrict}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {short}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {short}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {short}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {short}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {short}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {short}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {short}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {short}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {short}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {short}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {short}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {signed}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {signed}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {signed}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {signed}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {static}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {static}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {static}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {static}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {static}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {static}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {static}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {static}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {static}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {static}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {static}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {struct}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {struct}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {struct}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {struct}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {typedef}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {typedef}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {typedef}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {typedef}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {union}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {union}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {union}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {union}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {union}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {union}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {union}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {union}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {union}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {union}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {union}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {unsigned}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {unsigned}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {unsigned}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {unsigned}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {void}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {void}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {void}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {void}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {void}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {void}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {void}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {void}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {void}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {void}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {void}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {volatile}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {volatile}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {volatile}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {volatile}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {{}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {{}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {{}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {{}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {{}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {{}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {{}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {{}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {{}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {{}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {{}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {[}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {[}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {[}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {[}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {[}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {(}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {(}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {(}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {(}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {(}
building new item: declarator -> direct_declarator . {;}
building new item: declarator -> direct_declarator . {=}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {;}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {;}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {;}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {;}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {;}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {;}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {;}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {;}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {;}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {;}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {;}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {=}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {=}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {=}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {=}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {=}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {=}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {=}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {=}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {=}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {=}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {=}
building new item: declarator -> direct_declarator . {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {,}
building new item: direct_declarator -> direct_declarator . [[,[] [],]] {,}
building new item: direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {,}
building new item: direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {,}
building new item: direct_declarator -> direct_declarator . [(,(] [),)] {,}
closure post reduce
LOOP: 86, token: {, token_value: {
[verbose dump (every loop)]
parser state:
current token: {, value: {
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [direct_declarator,direct_declarator]
 state stack (kernel items of top state only):
  state 3
   kernel items:
    declarator -> direct_declarator . {TYPE_NAME}
    declarator -> direct_declarator . {auto}
    declarator -> direct_declarator . {bool}
    declarator -> direct_declarator . {char}
    declarator -> direct_declarator . {complex}
    declarator -> direct_declarator . {const}
    declarator -> direct_declarator . {double}
    declarator -> direct_declarator . {enum}
    declarator -> direct_declarator . {extern}
    declarator -> direct_declarator . {float}
    declarator -> direct_declarator . {imaginary}
    declarator -> direct_declarator . {inline}
    declarator -> direct_declarator . {int}
    declarator -> direct_declarator . {long}
    declarator -> direct_declarator . {register}
    declarator -> direct_declarator . {restrict}
    declarator -> direct_declarator . {short}
    declarator -> direct_declarator . {signed}
    declarator -> direct_declarator . {static}
    declarator -> direct_declarator . {struct}
    declarator -> direct_declarator . {typedef}
    declarator -> direct_declarator . {union}
    declarator -> direct_declarator . {unsigned}
    declarator -> direct_declarator . {void}
    declarator -> direct_declarator . {volatile}
    declarator -> direct_declarator . {{}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] [],]] {TYPE_NAME}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {TYPE_NAME}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {TYPE_NAME}
    direct_declarator -> direct_declarator . [(,(] [),)] {TYPE_NAME}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {auto}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {auto}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {auto}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {auto}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {auto}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {auto}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {auto}
    direct_declarator -> direct_declarator . [[,[] [],]] {auto}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {auto}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {auto}
    direct_declarator -> direct_declarator . [(,(] [),)] {auto}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {bool}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {bool}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {bool}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {bool}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {bool}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {bool}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {bool}
    direct_declarator -> direct_declarator . [[,[] [],]] {bool}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {bool}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {bool}
    direct_declarator -> direct_declarator . [(,(] [),)] {bool}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {char}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {char}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {char}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {char}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {char}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {char}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {char}
    direct_declarator -> direct_declarator . [[,[] [],]] {char}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {char}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {char}
    direct_declarator -> direct_declarator . [(,(] [),)] {char}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {complex}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {complex}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {complex}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {complex}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {complex}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {complex}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {complex}
    direct_declarator -> direct_declarator . [[,[] [],]] {complex}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {complex}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {complex}
    direct_declarator -> direct_declarator . [(,(] [),)] {complex}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {const}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {const}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {const}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {const}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {const}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {const}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {const}
    direct_declarator -> direct_declarator . [[,[] [],]] {const}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {const}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {const}
    direct_declarator -> direct_declarator . [(,(] [),)] {const}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {double}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {double}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {double}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {double}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {double}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {double}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {double}
    direct_declarator -> direct_declarator . [[,[] [],]] {double}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {double}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {double}
    direct_declarator -> direct_declarator . [(,(] [),)] {double}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {enum}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {enum}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {enum}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {enum}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {enum}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {enum}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {enum}
    direct_declarator -> direct_declarator . [[,[] [],]] {enum}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {enum}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {enum}
    direct_declarator -> direct_declarator . [(,(] [),)] {enum}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {extern}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {extern}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {extern}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {extern}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {extern}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {extern}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {extern}
    direct_declarator -> direct_declarator . [[,[] [],]] {extern}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {extern}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {extern}
    direct_declarator -> direct_declarator . [(,(] [),)] {extern}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {float}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {float}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {float}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {float}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {float}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {float}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {float}
    direct_declarator -> direct_declarator . [[,[] [],]] {float}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {float}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {float}
    direct_declarator -> direct_declarator . [(,(] [),)] {float}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {imaginary}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {imaginary}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {imaginary}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {imaginary}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {imaginary}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {imaginary}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {imaginary}
    direct_declarator -> direct_declarator . [[,[] [],]] {imaginary}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {imaginary}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {imaginary}
    direct_declarator -> direct_declarator . [(,(] [),)] {imaginary}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {inline}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {inline}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {inline}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {inline}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {inline}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {inline}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {inline}
    direct_declarator -> direct_declarator . [[,[] [],]] {inline}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {inline}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {inline}
    direct_declarator -> direct_declarator . [(,(] [),)] {inline}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {int}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {int}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {int}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {int}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {int}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {int}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {int}
    direct_declarator -> direct_declarator . [[,[] [],]] {int}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {int}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {int}
    direct_declarator -> direct_declarator . [(,(] [),)] {int}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {long}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {long}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {long}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {long}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {long}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {long}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {long}
    direct_declarator -> direct_declarator . [[,[] [],]] {long}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {long}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {long}
    direct_declarator -> direct_declarator . [(,(] [),)] {long}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {register}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {register}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {register}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {register}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {register}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {register}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {register}
    direct_declarator -> direct_declarator . [[,[] [],]] {register}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {register}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {register}
    direct_declarator -> direct_declarator . [(,(] [),)] {register}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {restrict}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {restrict}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {restrict}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {restrict}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {restrict}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {restrict}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {restrict}
    direct_declarator -> direct_declarator . [[,[] [],]] {restrict}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {restrict}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {restrict}
    direct_declarator -> direct_declarator . [(,(] [),)] {restrict}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {short}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {short}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {short}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {short}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {short}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {short}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {short}
    direct_declarator -> direct_declarator . [[,[] [],]] {short}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {short}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {short}
    direct_declarator -> direct_declarator . [(,(] [),)] {short}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {signed}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {signed}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {signed}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {signed}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {signed}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {signed}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {signed}
    direct_declarator -> direct_declarator . [[,[] [],]] {signed}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {signed}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {signed}
    direct_declarator -> direct_declarator . [(,(] [),)] {signed}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {static}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {static}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {static}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {static}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {static}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {static}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {static}
    direct_declarator -> direct_declarator . [[,[] [],]] {static}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {static}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {static}
    direct_declarator -> direct_declarator . [(,(] [),)] {static}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {struct}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {struct}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {struct}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {struct}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {struct}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {struct}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {struct}
    direct_declarator -> direct_declarator . [[,[] [],]] {struct}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {struct}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {struct}
    direct_declarator -> direct_declarator . [(,(] [),)] {struct}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {typedef}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {typedef}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {typedef}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {typedef}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {typedef}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {typedef}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {typedef}
    direct_declarator -> direct_declarator . [[,[] [],]] {typedef}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {typedef}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {typedef}
    direct_declarator -> direct_declarator . [(,(] [),)] {typedef}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {union}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {union}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {union}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {union}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {union}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {union}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {union}
    direct_declarator -> direct_declarator . [[,[] [],]] {union}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {union}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {union}
    direct_declarator -> direct_declarator . [(,(] [),)] {union}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {unsigned}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {unsigned}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {unsigned}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {unsigned}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {unsigned}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {unsigned}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {unsigned}
    direct_declarator -> direct_declarator . [[,[] [],]] {unsigned}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {unsigned}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {unsigned}
    direct_declarator -> direct_declarator . [(,(] [),)] {unsigned}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {void}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {void}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {void}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {void}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {void}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {void}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {void}
    direct_declarator -> direct_declarator . [[,[] [],]] {void}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {void}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {void}
    direct_declarator -> direct_declarator . [(,(] [),)] {void}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {volatile}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {volatile}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {volatile}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {volatile}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {volatile}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {volatile}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {volatile}
    direct_declarator -> direct_declarator . [[,[] [],]] {volatile}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {volatile}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {volatile}
    direct_declarator -> direct_declarator . [(,(] [),)] {volatile}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {{}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {{}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {{}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {{}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {{}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {{}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {{}
    direct_declarator -> direct_declarator . [[,[] [],]] {{}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {{}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {{}
    direct_declarator -> direct_declarator . [(,(] [),)] {{}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {[}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {[}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {[}
    direct_declarator -> direct_declarator . [[,[] [],]] {[}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {[}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {[}
    direct_declarator -> direct_declarator . [(,(] [),)] {[}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {(}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {(}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {(}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {(}
    direct_declarator -> direct_declarator . [[,[] [],]] {(}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {(}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {(}
    direct_declarator -> direct_declarator . [(,(] [),)] {(}
    declarator -> direct_declarator . {;}
    declarator -> direct_declarator . {=}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {;}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {;}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {;}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {;}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {;}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {;}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {;}
    direct_declarator -> direct_declarator . [[,[] [],]] {;}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {;}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {;}
    direct_declarator -> direct_declarator . [(,(] [),)] {;}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {=}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {=}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {=}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {=}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {=}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {=}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {=}
    direct_declarator -> direct_declarator . [[,[] [],]] {=}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {=}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {=}
    direct_declarator -> direct_declarator . [(,(] [),)] {=}
    declarator -> direct_declarator . {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [],]] {,}
    direct_declarator -> direct_declarator . [[,[] assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] [static,static] type_qualifier_list assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [static,static] assignment_expression [],]] {,}
    direct_declarator -> direct_declarator . [[,[] type_qualifier_list [*,*] [],]] {,}
    direct_declarator -> direct_declarator . [[,[] [*,*] [],]] {,}
    direct_declarator -> direct_declarator . [[,[] [],]] {,}
    direct_declarator -> direct_declarator . [(,(] parameter_type_list [),)] {,}
    direct_declarator -> direct_declarator . [(,(] identifier_list [),)] {,}
    direct_declarator -> direct_declarator . [(,(] [),)] {,}
check: reduce declarator -> direct_declarator . {{}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: declarator -> direct_declarator . {TYPE_NAME}
trying to reduce by: declarator -> direct_declarator . {auto}
trying to reduce by: declarator -> direct_declarator . {bool}
trying to reduce by: declarator -> direct_declarator . {char}
trying to reduce by: declarator -> direct_declarator . {complex}
trying to reduce by: declarator -> direct_declarator . {const}
trying to reduce by: declarator -> direct_declarator . {double}
trying to reduce by: declarator -> direct_declarator . {enum}
trying to reduce by: declarator -> direct_declarator . {extern}
trying to reduce by: declarator -> direct_declarator . {float}
trying to reduce by: declarator -> direct_declarator . {imaginary}
trying to reduce by: declarator -> direct_declarator . {inline}
trying to reduce by: declarator -> direct_declarator . {int}
trying to reduce by: declarator -> direct_declarator . {long}
trying to reduce by: declarator -> direct_declarator . {register}
trying to reduce by: declarator -> direct_declarator . {restrict}
trying to reduce by: declarator -> direct_declarator . {short}
trying to reduce by: declarator -> direct_declarator . {signed}
trying to reduce by: declarator -> direct_declarator . {static}
trying to reduce by: declarator -> direct_declarator . {struct}
trying to reduce by: declarator -> direct_declarator . {typedef}
trying to reduce by: declarator -> direct_declarator . {union}
trying to reduce by: declarator -> direct_declarator . {unsigned}
trying to reduce by: declarator -> direct_declarator . {void}
trying to reduce by: declarator -> direct_declarator . {volatile}
trying to reduce by: declarator -> direct_declarator . {{}
reduce: declarator -> main ( int argc , char * argv [ ] ) 
reduce item: declarator -> direct_declarator . {{}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {$}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {$}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {TYPE_NAME}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {TYPE_NAME}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {auto}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {auto}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {bool}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {bool}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {char}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {char}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {complex}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {complex}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {const}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {const}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {double}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {double}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {enum}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {enum}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {extern}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {extern}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {float}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {float}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {imaginary}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {imaginary}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {inline}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {inline}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {int}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {int}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {long}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {long}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {register}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {register}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {restrict}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {restrict}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {short}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {short}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {signed}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {signed}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {static}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {static}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {struct}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {struct}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {typedef}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {typedef}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {union}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {union}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {unsigned}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {unsigned}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {void}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {void}
building new item: function_definition -> declaration_specifiers declarator . declaration_list compound_statement {volatile}
building new item: function_definition -> declaration_specifiers declarator . compound_statement {volatile}
building new item: init_declarator -> declarator . {;}
building new item: init_declarator -> declarator . [=,=] initializer {;}
building new item: init_declarator -> declarator . {,}
building new item: init_declarator -> declarator . [=,=] initializer {,}
closure post reduce
LOOP: 87, token: {, token_value: {
[verbose dump (every loop)]
parser state:
current token: {, value: {
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
 state stack (kernel items of top state only):
  state 3
   kernel items:
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {$}
    function_definition -> declaration_specifiers declarator . compound_statement {$}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {TYPE_NAME}
    function_definition -> declaration_specifiers declarator . compound_statement {TYPE_NAME}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {auto}
    function_definition -> declaration_specifiers declarator . compound_statement {auto}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {bool}
    function_definition -> declaration_specifiers declarator . compound_statement {bool}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {char}
    function_definition -> declaration_specifiers declarator . compound_statement {char}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {complex}
    function_definition -> declaration_specifiers declarator . compound_statement {complex}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {const}
    function_definition -> declaration_specifiers declarator . compound_statement {const}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {double}
    function_definition -> declaration_specifiers declarator . compound_statement {double}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {enum}
    function_definition -> declaration_specifiers declarator . compound_statement {enum}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {extern}
    function_definition -> declaration_specifiers declarator . compound_statement {extern}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {float}
    function_definition -> declaration_specifiers declarator . compound_statement {float}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {imaginary}
    function_definition -> declaration_specifiers declarator . compound_statement {imaginary}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {inline}
    function_definition -> declaration_specifiers declarator . compound_statement {inline}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {int}
    function_definition -> declaration_specifiers declarator . compound_statement {int}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {long}
    function_definition -> declaration_specifiers declarator . compound_statement {long}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {register}
    function_definition -> declaration_specifiers declarator . compound_statement {register}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {restrict}
    function_definition -> declaration_specifiers declarator . compound_statement {restrict}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {short}
    function_definition -> declaration_specifiers declarator . compound_statement {short}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {signed}
    function_definition -> declaration_specifiers declarator . compound_statement {signed}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {static}
    function_definition -> declaration_specifiers declarator . compound_statement {static}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {struct}
    function_definition -> declaration_specifiers declarator . compound_statement {struct}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {typedef}
    function_definition -> declaration_specifiers declarator . compound_statement {typedef}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {union}
    function_definition -> declaration_specifiers declarator . compound_statement {union}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {unsigned}
    function_definition -> declaration_specifiers declarator . compound_statement {unsigned}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {void}
    function_definition -> declaration_specifiers declarator . compound_statement {void}
    function_definition -> declaration_specifiers declarator . declaration_list compound_statement {volatile}
    function_definition -> declaration_specifiers declarator . compound_statement {volatile}
    init_declarator -> declarator . {;}
    init_declarator -> declarator . [=,=] initializer {;}
    init_declarator -> declarator . {,}
    init_declarator -> declarator . [=,=] initializer {,}
check: shift compound_statement -> . [{,{] [},}] {$}
check: shift compound_statement -> . [{,{] block_item_list [},}] {$}
check: shift compound_statement -> . [{,{] [},}] {TYPE_NAME}
check: shift compound_statement -> . [{,{] block_item_list [},}] {TYPE_NAME}
check: shift compound_statement -> . [{,{] [},}] {auto}
check: shift compound_statement -> . [{,{] block_item_list [},}] {auto}
check: shift compound_statement -> . [{,{] [},}] {bool}
check: shift compound_statement -> . [{,{] block_item_list [},}] {bool}
check: shift compound_statement -> . [{,{] [},}] {char}
check: shift compound_statement -> . [{,{] block_item_list [},}] {char}
check: shift compound_statement -> . [{,{] [},}] {complex}
check: shift compound_statement -> . [{,{] block_item_list [},}] {complex}
check: shift compound_statement -> . [{,{] [},}] {const}
check: shift compound_statement -> . [{,{] block_item_list [},}] {const}
check: shift compound_statement -> . [{,{] [},}] {double}
check: shift compound_statement -> . [{,{] block_item_list [},}] {double}
check: shift compound_statement -> . [{,{] [},}] {enum}
check: shift compound_statement -> . [{,{] block_item_list [},}] {enum}
check: shift compound_statement -> . [{,{] [},}] {extern}
check: shift compound_statement -> . [{,{] block_item_list [},}] {extern}
check: shift compound_statement -> . [{,{] [},}] {float}
check: shift compound_statement -> . [{,{] block_item_list [},}] {float}
check: shift compound_statement -> . [{,{] [},}] {imaginary}
check: shift compound_statement -> . [{,{] block_item_list [},}] {imaginary}
check: shift compound_statement -> . [{,{] [},}] {inline}
check: shift compound_statement -> . [{,{] block_item_list [},}] {inline}
check: shift compound_statement -> . [{,{] [},}] {int}
check: shift compound_statement -> . [{,{] block_item_list [},}] {int}
check: shift compound_statement -> . [{,{] [},}] {long}
check: shift compound_statement -> . [{,{] block_item_list [},}] {long}
check: shift compound_statement -> . [{,{] [},}] {register}
check: shift compound_statement -> . [{,{] block_item_list [},}] {register}
check: shift compound_statement -> . [{,{] [},}] {restrict}
check: shift compound_statement -> . [{,{] block_item_list [},}] {restrict}
check: shift compound_statement -> . [{,{] [},}] {short}
check: shift compound_statement -> . [{,{] block_item_list [},}] {short}
check: shift compound_statement -> . [{,{] [},}] {signed}
check: shift compound_statement -> . [{,{] block_item_list [},}] {signed}
check: shift compound_statement -> . [{,{] [},}] {static}
check: shift compound_statement -> . [{,{] block_item_list [},}] {static}
check: shift compound_statement -> . [{,{] [},}] {struct}
check: shift compound_statement -> . [{,{] block_item_list [},}] {struct}
check: shift compound_statement -> . [{,{] [},}] {typedef}
check: shift compound_statement -> . [{,{] block_item_list [},}] {typedef}
check: shift compound_statement -> . [{,{] [},}] {union}
check: shift compound_statement -> . [{,{] block_item_list [},}] {union}
check: shift compound_statement -> . [{,{] [},}] {unsigned}
check: shift compound_statement -> . [{,{] block_item_list [},}] {unsigned}
check: shift compound_statement -> . [{,{] [},}] {void}
check: shift compound_statement -> . [{,{] block_item_list [},}] {void}
check: shift compound_statement -> . [{,{] [},}] {volatile}
check: shift compound_statement -> . [{,{] block_item_list [},}] {volatile}
shifts: 52, reduces: 0, accepts: 0
shifting [{,{]
building new item: compound_statement -> [{,{] . [},}] {$}
building new item: compound_statement -> [{,{] . block_item_list [},}] {$}
building new item: compound_statement -> [{,{] . [},}] {TYPE_NAME}
building new item: compound_statement -> [{,{] . block_item_list [},}] {TYPE_NAME}
building new item: compound_statement -> [{,{] . [},}] {auto}
building new item: compound_statement -> [{,{] . block_item_list [},}] {auto}
building new item: compound_statement -> [{,{] . [},}] {bool}
building new item: compound_statement -> [{,{] . block_item_list [},}] {bool}
building new item: compound_statement -> [{,{] . [},}] {char}
building new item: compound_statement -> [{,{] . block_item_list [},}] {char}
building new item: compound_statement -> [{,{] . [},}] {complex}
building new item: compound_statement -> [{,{] . block_item_list [},}] {complex}
building new item: compound_statement -> [{,{] . [},}] {const}
building new item: compound_statement -> [{,{] . block_item_list [},}] {const}
building new item: compound_statement -> [{,{] . [},}] {double}
building new item: compound_statement -> [{,{] . block_item_list [},}] {double}
building new item: compound_statement -> [{,{] . [},}] {enum}
building new item: compound_statement -> [{,{] . block_item_list [},}] {enum}
building new item: compound_statement -> [{,{] . [},}] {extern}
building new item: compound_statement -> [{,{] . block_item_list [},}] {extern}
building new item: compound_statement -> [{,{] . [},}] {float}
building new item: compound_statement -> [{,{] . block_item_list [},}] {float}
building new item: compound_statement -> [{,{] . [},}] {imaginary}
building new item: compound_statement -> [{,{] . block_item_list [},}] {imaginary}
building new item: compound_statement -> [{,{] . [},}] {inline}
building new item: compound_statement -> [{,{] . block_item_list [},}] {inline}
building new item: compound_statement -> [{,{] . [},}] {int}
building new item: compound_statement -> [{,{] . block_item_list [},}] {int}
building new item: compound_statement -> [{,{] . [},}] {long}
building new item: compound_statement -> [{,{] . block_item_list [},}] {long}
building new item: compound_statement -> [{,{] . [},}] {register}
building new item: compound_statement -> [{,{] . block_item_list [},}] {register}
building new item: compound_statement -> [{,{] . [},}] {restrict}
building new item: compound_statement -> [{,{] . block_item_list [},}] {restrict}
building new item: compound_statement -> [{,{] . [},}] {short}
building new item: compound_statement -> [{,{] . block_item_list [},}] {short}
building new item: compound_statement -> [{,{] . [},}] {signed}
building new item: compound_statement -> [{,{] . block_item_list [},}] {signed}
building new item: compound_statement -> [{,{] . [},}] {static}
building new item: compound_statement -> [{,{] . block_item_list [},}] {static}
building new item: compound_statement -> [{,{] . [},}] {struct}
building new item: compound_statement -> [{,{] . block_item_list [},}] {struct}
building new item: compound_statement -> [{,{] . [},}] {typedef}
building new item: compound_statement -> [{,{] . block_item_list [},}] {typedef}
building new item: compound_statement -> [{,{] . [},}] {union}
building new item: compound_statement -> [{,{] . block_item_list [},}] {union}
building new item: compound_statement -> [{,{] . [},}] {unsigned}
building new item: compound_statement -> [{,{] . block_item_list [},}] {unsigned}
building new item: compound_statement -> [{,{] . [},}] {void}
building new item: compound_statement -> [{,{] . block_item_list [},}] {void}
building new item: compound_statement -> [{,{] . [},}] {volatile}
building new item: compound_statement -> [{,{] . block_item_list [},}] {volatile}
closure post shift
LOOP: 88, token: id, token_value: printf
[verbose dump (every loop)]
parser state:
current token: id, value: printf
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
 state stack (kernel items of top state only):
  state 4
   kernel items:
    compound_statement -> [{,{] . [},}] {$}
    compound_statement -> [{,{] . block_item_list [},}] {$}
    compound_statement -> [{,{] . [},}] {TYPE_NAME}
    compound_statement -> [{,{] . block_item_list [},}] {TYPE_NAME}
    compound_statement -> [{,{] . [},}] {auto}
    compound_statement -> [{,{] . block_item_list [},}] {auto}
    compound_statement -> [{,{] . [},}] {bool}
    compound_statement -> [{,{] . block_item_list [},}] {bool}
    compound_statement -> [{,{] . [},}] {char}
    compound_statement -> [{,{] . block_item_list [},}] {char}
    compound_statement -> [{,{] . [},}] {complex}
    compound_statement -> [{,{] . block_item_list [},}] {complex}
    compound_statement -> [{,{] . [},}] {const}
    compound_statement -> [{,{] . block_item_list [},}] {const}
    compound_statement -> [{,{] . [},}] {double}
    compound_statement -> [{,{] . block_item_list [},}] {double}
    compound_statement -> [{,{] . [},}] {enum}
    compound_statement -> [{,{] . block_item_list [},}] {enum}
    compound_statement -> [{,{] . [},}] {extern}
    compound_statement -> [{,{] . block_item_list [},}] {extern}
    compound_statement -> [{,{] . [},}] {float}
    compound_statement -> [{,{] . block_item_list [},}] {float}
    compound_statement -> [{,{] . [},}] {imaginary}
    compound_statement -> [{,{] . block_item_list [},}] {imaginary}
    compound_statement -> [{,{] . [},}] {inline}
    compound_statement -> [{,{] . block_item_list [},}] {inline}
    compound_statement -> [{,{] . [},}] {int}
    compound_statement -> [{,{] . block_item_list [},}] {int}
    compound_statement -> [{,{] . [},}] {long}
    compound_statement -> [{,{] . block_item_list [},}] {long}
    compound_statement -> [{,{] . [},}] {register}
    compound_statement -> [{,{] . block_item_list [},}] {register}
    compound_statement -> [{,{] . [},}] {restrict}
    compound_statement -> [{,{] . block_item_list [},}] {restrict}
    compound_statement -> [{,{] . [},}] {short}
    compound_statement -> [{,{] . block_item_list [},}] {short}
    compound_statement -> [{,{] . [},}] {signed}
    compound_statement -> [{,{] . block_item_list [},}] {signed}
    compound_statement -> [{,{] . [},}] {static}
    compound_statement -> [{,{] . block_item_list [},}] {static}
    compound_statement -> [{,{] . [},}] {struct}
    compound_statement -> [{,{] . block_item_list [},}] {struct}
    compound_statement -> [{,{] . [},}] {typedef}
    compound_statement -> [{,{] . block_item_list [},}] {typedef}
    compound_statement -> [{,{] . [},}] {union}
    compound_statement -> [{,{] . block_item_list [},}] {union}
    compound_statement -> [{,{] . [},}] {unsigned}
    compound_statement -> [{,{] . block_item_list [},}] {unsigned}
    compound_statement -> [{,{] . [},}] {void}
    compound_statement -> [{,{] . block_item_list [},}] {void}
    compound_statement -> [{,{] . [},}] {volatile}
    compound_statement -> [{,{] . block_item_list [},}] {volatile}
check: shift labeled_statement -> . [id,id] [:,:] statement {}}
check: shift labeled_statement -> . [id,id] [:,:] statement {!}
check: shift labeled_statement -> . [id,id] [:,:] statement {&}
check: shift labeled_statement -> . [id,id] [:,:] statement {(}
check: shift labeled_statement -> . [id,id] [:,:] statement {*}
check: shift labeled_statement -> . [id,id] [:,:] statement {+}
check: shift labeled_statement -> . [id,id] [:,:] statement {-}
check: shift labeled_statement -> . [id,id] [:,:] statement {;}
check: shift labeled_statement -> . [id,id] [:,:] statement {DEC_OP}
check: shift labeled_statement -> . [id,id] [:,:] statement {INC_OP}
check: shift labeled_statement -> . [id,id] [:,:] statement {TYPE_NAME}
check: shift labeled_statement -> . [id,id] [:,:] statement {auto}
check: shift labeled_statement -> . [id,id] [:,:] statement {bool}
check: shift labeled_statement -> . [id,id] [:,:] statement {break}
check: shift labeled_statement -> . [id,id] [:,:] statement {case}
check: shift labeled_statement -> . [id,id] [:,:] statement {char}
check: shift labeled_statement -> . [id,id] [:,:] statement {complex}
check: shift labeled_statement -> . [id,id] [:,:] statement {const}
check: shift labeled_statement -> . [id,id] [:,:] statement {continue}
check: shift labeled_statement -> . [id,id] [:,:] statement {default}
check: shift labeled_statement -> . [id,id] [:,:] statement {do}
check: shift labeled_statement -> . [id,id] [:,:] statement {double}
check: shift labeled_statement -> . [id,id] [:,:] statement {enum}
check: shift labeled_statement -> . [id,id] [:,:] statement {extern}
check: shift labeled_statement -> . [id,id] [:,:] statement {float}
check: shift labeled_statement -> . [id,id] [:,:] statement {for}
check: shift labeled_statement -> . [id,id] [:,:] statement {goto}
check: shift labeled_statement -> . [id,id] [:,:] statement {id}
check: shift labeled_statement -> . [id,id] [:,:] statement {if}
check: shift labeled_statement -> . [id,id] [:,:] statement {imaginary}
check: shift labeled_statement -> . [id,id] [:,:] statement {inline}
check: shift labeled_statement -> . [id,id] [:,:] statement {int}
check: shift labeled_statement -> . [id,id] [:,:] statement {long}
check: shift labeled_statement -> . [id,id] [:,:] statement {num}
check: shift labeled_statement -> . [id,id] [:,:] statement {register}
check: shift labeled_statement -> . [id,id] [:,:] statement {restrict}
check: shift labeled_statement -> . [id,id] [:,:] statement {return}
check: shift labeled_statement -> . [id,id] [:,:] statement {short}
check: shift labeled_statement -> . [id,id] [:,:] statement {signed}
check: shift labeled_statement -> . [id,id] [:,:] statement {sizeof}
check: shift labeled_statement -> . [id,id] [:,:] statement {static}
check: shift labeled_statement -> . [id,id] [:,:] statement {string}
check: shift labeled_statement -> . [id,id] [:,:] statement {struct}
check: shift labeled_statement -> . [id,id] [:,:] statement {switch}
check: shift labeled_statement -> . [id,id] [:,:] statement {typedef}
check: shift labeled_statement -> . [id,id] [:,:] statement {union}
check: shift labeled_statement -> . [id,id] [:,:] statement {unsigned}
check: shift labeled_statement -> . [id,id] [:,:] statement {void}
check: shift labeled_statement -> . [id,id] [:,:] statement {volatile}
check: shift labeled_statement -> . [id,id] [:,:] statement {while}
check: shift labeled_statement -> . [id,id] [:,:] statement {{}
check: shift labeled_statement -> . [id,id] [:,:] statement {~}
check: shift primary_expression -> . [id,id] {=}
check: shift primary_expression -> . [id,id] {ADD_ASSIGN}
check: shift primary_expression -> . [id,id] {AND_ASSIGN}
check: shift primary_expression -> . [id,id] {DIV_ASSIGN}
check: shift primary_expression -> . [id,id] {LEFT_ASSIGN}
check: shift primary_expression -> . [id,id] {MOD_ASSIGN}
check: shift primary_expression -> . [id,id] {MUL_ASSIGN}
check: shift primary_expression -> . [id,id] {OR_ASSIGN}
check: shift primary_expression -> . [id,id] {RIGHT_ASSIGN}
check: shift primary_expression -> . [id,id] {SUB_ASSIGN}
check: shift primary_expression -> . [id,id] {XOR_ASSIGN}
check: shift primary_expression -> . [id,id] {[}
check: shift primary_expression -> . [id,id] {(}
check: shift primary_expression -> . [id,id] {.}
check: shift primary_expression -> . [id,id] {PTR_OP}
check: shift primary_expression -> . [id,id] {INC_OP}
check: shift primary_expression -> . [id,id] {DEC_OP}
check: shift primary_expression -> . [id,id] {;}
check: shift primary_expression -> . [id,id] {?}
check: shift primary_expression -> . [id,id] {*}
check: shift primary_expression -> . [id,id] {/}
check: shift primary_expression -> . [id,id] {%}
check: shift primary_expression -> . [id,id] {+}
check: shift primary_expression -> . [id,id] {-}
check: shift primary_expression -> . [id,id] {LEFT_OP}
check: shift primary_expression -> . [id,id] {RIGHT_OP}
check: shift primary_expression -> . [id,id] {<}
check: shift primary_expression -> . [id,id] {>}
check: shift primary_expression -> . [id,id] {LE_OP}
check: shift primary_expression -> . [id,id] {GE_OP}
check: shift primary_expression -> . [id,id] {EQ_OP}
check: shift primary_expression -> . [id,id] {NE_OP}
check: shift primary_expression -> . [id,id] {&}
check: shift primary_expression -> . [id,id] {^}
check: shift primary_expression -> . [id,id] {|}
check: shift primary_expression -> . [id,id] {AND_OP}
check: shift primary_expression -> . [id,id] {OR_OP}
check: shift primary_expression -> . [id,id] {,}
shifts: 90, reduces: 0, accepts: 0
shifting [id,printf]
building new item: labeled_statement -> [id,id] . [:,:] statement {}}
building new item: labeled_statement -> [id,id] . [:,:] statement {!}
building new item: labeled_statement -> [id,id] . [:,:] statement {&}
building new item: labeled_statement -> [id,id] . [:,:] statement {(}
building new item: labeled_statement -> [id,id] . [:,:] statement {*}
building new item: labeled_statement -> [id,id] . [:,:] statement {+}
building new item: labeled_statement -> [id,id] . [:,:] statement {-}
building new item: labeled_statement -> [id,id] . [:,:] statement {;}
building new item: labeled_statement -> [id,id] . [:,:] statement {DEC_OP}
building new item: labeled_statement -> [id,id] . [:,:] statement {INC_OP}
building new item: labeled_statement -> [id,id] . [:,:] statement {TYPE_NAME}
building new item: labeled_statement -> [id,id] . [:,:] statement {auto}
building new item: labeled_statement -> [id,id] . [:,:] statement {bool}
building new item: labeled_statement -> [id,id] . [:,:] statement {break}
building new item: labeled_statement -> [id,id] . [:,:] statement {case}
building new item: labeled_statement -> [id,id] . [:,:] statement {char}
building new item: labeled_statement -> [id,id] . [:,:] statement {complex}
building new item: labeled_statement -> [id,id] . [:,:] statement {const}
building new item: labeled_statement -> [id,id] . [:,:] statement {continue}
building new item: labeled_statement -> [id,id] . [:,:] statement {default}
building new item: labeled_statement -> [id,id] . [:,:] statement {do}
building new item: labeled_statement -> [id,id] . [:,:] statement {double}
building new item: labeled_statement -> [id,id] . [:,:] statement {enum}
building new item: labeled_statement -> [id,id] . [:,:] statement {extern}
building new item: labeled_statement -> [id,id] . [:,:] statement {float}
building new item: labeled_statement -> [id,id] . [:,:] statement {for}
building new item: labeled_statement -> [id,id] . [:,:] statement {goto}
building new item: labeled_statement -> [id,id] . [:,:] statement {id}
building new item: labeled_statement -> [id,id] . [:,:] statement {if}
building new item: labeled_statement -> [id,id] . [:,:] statement {imaginary}
building new item: labeled_statement -> [id,id] . [:,:] statement {inline}
building new item: labeled_statement -> [id,id] . [:,:] statement {int}
building new item: labeled_statement -> [id,id] . [:,:] statement {long}
building new item: labeled_statement -> [id,id] . [:,:] statement {num}
building new item: labeled_statement -> [id,id] . [:,:] statement {register}
building new item: labeled_statement -> [id,id] . [:,:] statement {restrict}
building new item: labeled_statement -> [id,id] . [:,:] statement {return}
building new item: labeled_statement -> [id,id] . [:,:] statement {short}
building new item: labeled_statement -> [id,id] . [:,:] statement {signed}
building new item: labeled_statement -> [id,id] . [:,:] statement {sizeof}
building new item: labeled_statement -> [id,id] . [:,:] statement {static}
building new item: labeled_statement -> [id,id] . [:,:] statement {string}
building new item: labeled_statement -> [id,id] . [:,:] statement {struct}
building new item: labeled_statement -> [id,id] . [:,:] statement {switch}
building new item: labeled_statement -> [id,id] . [:,:] statement {typedef}
building new item: labeled_statement -> [id,id] . [:,:] statement {union}
building new item: labeled_statement -> [id,id] . [:,:] statement {unsigned}
building new item: labeled_statement -> [id,id] . [:,:] statement {void}
building new item: labeled_statement -> [id,id] . [:,:] statement {volatile}
building new item: labeled_statement -> [id,id] . [:,:] statement {while}
building new item: labeled_statement -> [id,id] . [:,:] statement {{}
building new item: labeled_statement -> [id,id] . [:,:] statement {~}
building new item: primary_expression -> [id,id] . {=}
building new item: primary_expression -> [id,id] . {ADD_ASSIGN}
building new item: primary_expression -> [id,id] . {AND_ASSIGN}
building new item: primary_expression -> [id,id] . {DIV_ASSIGN}
building new item: primary_expression -> [id,id] . {LEFT_ASSIGN}
building new item: primary_expression -> [id,id] . {MOD_ASSIGN}
building new item: primary_expression -> [id,id] . {MUL_ASSIGN}
building new item: primary_expression -> [id,id] . {OR_ASSIGN}
building new item: primary_expression -> [id,id] . {RIGHT_ASSIGN}
building new item: primary_expression -> [id,id] . {SUB_ASSIGN}
building new item: primary_expression -> [id,id] . {XOR_ASSIGN}
building new item: primary_expression -> [id,id] . {[}
building new item: primary_expression -> [id,id] . {(}
building new item: primary_expression -> [id,id] . {.}
building new item: primary_expression -> [id,id] . {PTR_OP}
building new item: primary_expression -> [id,id] . {INC_OP}
building new item: primary_expression -> [id,id] . {DEC_OP}
building new item: primary_expression -> [id,id] . {;}
building new item: primary_expression -> [id,id] . {?}
building new item: primary_expression -> [id,id] . {*}
building new item: primary_expression -> [id,id] . {/}
building new item: primary_expression -> [id,id] . {%}
building new item: primary_expression -> [id,id] . {+}
building new item: primary_expression -> [id,id] . {-}
building new item: primary_expression -> [id,id] . {LEFT_OP}
building new item: primary_expression -> [id,id] . {RIGHT_OP}
building new item: primary_expression -> [id,id] . {<}
building new item: primary_expression -> [id,id] . {>}
building new item: primary_expression -> [id,id] . {LE_OP}
building new item: primary_expression -> [id,id] . {GE_OP}
building new item: primary_expression -> [id,id] . {EQ_OP}
building new item: primary_expression -> [id,id] . {NE_OP}
building new item: primary_expression -> [id,id] . {&}
building new item: primary_expression -> [id,id] . {^}
building new item: primary_expression -> [id,id] . {|}
building new item: primary_expression -> [id,id] . {AND_OP}
building new item: primary_expression -> [id,id] . {OR_OP}
building new item: primary_expression -> [id,id] . {,}
closure post shift
LOOP: 89, token: (, token_value: (
[verbose dump (every loop)]
parser state:
current token: (, value: (
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [id,printf]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    labeled_statement -> [id,id] . [:,:] statement {}}
    labeled_statement -> [id,id] . [:,:] statement {!}
    labeled_statement -> [id,id] . [:,:] statement {&}
    labeled_statement -> [id,id] . [:,:] statement {(}
    labeled_statement -> [id,id] . [:,:] statement {*}
    labeled_statement -> [id,id] . [:,:] statement {+}
    labeled_statement -> [id,id] . [:,:] statement {-}
    labeled_statement -> [id,id] . [:,:] statement {;}
    labeled_statement -> [id,id] . [:,:] statement {DEC_OP}
    labeled_statement -> [id,id] . [:,:] statement {INC_OP}
    labeled_statement -> [id,id] . [:,:] statement {TYPE_NAME}
    labeled_statement -> [id,id] . [:,:] statement {auto}
    labeled_statement -> [id,id] . [:,:] statement {bool}
    labeled_statement -> [id,id] . [:,:] statement {break}
    labeled_statement -> [id,id] . [:,:] statement {case}
    labeled_statement -> [id,id] . [:,:] statement {char}
    labeled_statement -> [id,id] . [:,:] statement {complex}
    labeled_statement -> [id,id] . [:,:] statement {const}
    labeled_statement -> [id,id] . [:,:] statement {continue}
    labeled_statement -> [id,id] . [:,:] statement {default}
    labeled_statement -> [id,id] . [:,:] statement {do}
    labeled_statement -> [id,id] . [:,:] statement {double}
    labeled_statement -> [id,id] . [:,:] statement {enum}
    labeled_statement -> [id,id] . [:,:] statement {extern}
    labeled_statement -> [id,id] . [:,:] statement {float}
    labeled_statement -> [id,id] . [:,:] statement {for}
    labeled_statement -> [id,id] . [:,:] statement {goto}
    labeled_statement -> [id,id] . [:,:] statement {id}
    labeled_statement -> [id,id] . [:,:] statement {if}
    labeled_statement -> [id,id] . [:,:] statement {imaginary}
    labeled_statement -> [id,id] . [:,:] statement {inline}
    labeled_statement -> [id,id] . [:,:] statement {int}
    labeled_statement -> [id,id] . [:,:] statement {long}
    labeled_statement -> [id,id] . [:,:] statement {num}
    labeled_statement -> [id,id] . [:,:] statement {register}
    labeled_statement -> [id,id] . [:,:] statement {restrict}
    labeled_statement -> [id,id] . [:,:] statement {return}
    labeled_statement -> [id,id] . [:,:] statement {short}
    labeled_statement -> [id,id] . [:,:] statement {signed}
    labeled_statement -> [id,id] . [:,:] statement {sizeof}
    labeled_statement -> [id,id] . [:,:] statement {static}
    labeled_statement -> [id,id] . [:,:] statement {string}
    labeled_statement -> [id,id] . [:,:] statement {struct}
    labeled_statement -> [id,id] . [:,:] statement {switch}
    labeled_statement -> [id,id] . [:,:] statement {typedef}
    labeled_statement -> [id,id] . [:,:] statement {union}
    labeled_statement -> [id,id] . [:,:] statement {unsigned}
    labeled_statement -> [id,id] . [:,:] statement {void}
    labeled_statement -> [id,id] . [:,:] statement {volatile}
    labeled_statement -> [id,id] . [:,:] statement {while}
    labeled_statement -> [id,id] . [:,:] statement {{}
    labeled_statement -> [id,id] . [:,:] statement {~}
    primary_expression -> [id,id] . {=}
    primary_expression -> [id,id] . {ADD_ASSIGN}
    primary_expression -> [id,id] . {AND_ASSIGN}
    primary_expression -> [id,id] . {DIV_ASSIGN}
    primary_expression -> [id,id] . {LEFT_ASSIGN}
    primary_expression -> [id,id] . {MOD_ASSIGN}
    primary_expression -> [id,id] . {MUL_ASSIGN}
    primary_expression -> [id,id] . {OR_ASSIGN}
    primary_expression -> [id,id] . {RIGHT_ASSIGN}
    primary_expression -> [id,id] . {SUB_ASSIGN}
    primary_expression -> [id,id] . {XOR_ASSIGN}
    primary_expression -> [id,id] . {[}
    primary_expression -> [id,id] . {(}
    primary_expression -> [id,id] . {.}
    primary_expression -> [id,id] . {PTR_OP}
    primary_expression -> [id,id] . {INC_OP}
    primary_expression -> [id,id] . {DEC_OP}
    primary_expression -> [id,id] . {;}
    primary_expression -> [id,id] . {?}
    primary_expression -> [id,id] . {*}
    primary_expression -> [id,id] . {/}
    primary_expression -> [id,id] . {%}
    primary_expression -> [id,id] . {+}
    primary_expression -> [id,id] . {-}
    primary_expression -> [id,id] . {LEFT_OP}
    primary_expression -> [id,id] . {RIGHT_OP}
    primary_expression -> [id,id] . {<}
    primary_expression -> [id,id] . {>}
    primary_expression -> [id,id] . {LE_OP}
    primary_expression -> [id,id] . {GE_OP}
    primary_expression -> [id,id] . {EQ_OP}
    primary_expression -> [id,id] . {NE_OP}
    primary_expression -> [id,id] . {&}
    primary_expression -> [id,id] . {^}
    primary_expression -> [id,id] . {|}
    primary_expression -> [id,id] . {AND_OP}
    primary_expression -> [id,id] . {OR_OP}
    primary_expression -> [id,id] . {,}
check: reduce primary_expression -> [id,id] . {(}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {}}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {!}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {&}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {(}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {*}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {+}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {-}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {;}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {DEC_OP}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {INC_OP}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {TYPE_NAME}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {auto}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {bool}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {break}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {case}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {char}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {complex}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {const}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {continue}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {default}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {do}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {double}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {enum}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {extern}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {float}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {for}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {goto}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {id}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {if}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {imaginary}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {inline}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {int}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {long}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {num}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {register}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {restrict}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {return}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {short}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {signed}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {sizeof}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {static}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {string}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {struct}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {switch}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {typedef}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {union}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {unsigned}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {void}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {volatile}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {while}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {{}
trying to reduce by: labeled_statement -> [id,id] . [:,:] statement {~}
trying to reduce by: primary_expression -> [id,id] . {=}
trying to reduce by: primary_expression -> [id,id] . {ADD_ASSIGN}
trying to reduce by: primary_expression -> [id,id] . {AND_ASSIGN}
trying to reduce by: primary_expression -> [id,id] . {DIV_ASSIGN}
trying to reduce by: primary_expression -> [id,id] . {LEFT_ASSIGN}
trying to reduce by: primary_expression -> [id,id] . {MOD_ASSIGN}
trying to reduce by: primary_expression -> [id,id] . {MUL_ASSIGN}
trying to reduce by: primary_expression -> [id,id] . {OR_ASSIGN}
trying to reduce by: primary_expression -> [id,id] . {RIGHT_ASSIGN}
trying to reduce by: primary_expression -> [id,id] . {SUB_ASSIGN}
trying to reduce by: primary_expression -> [id,id] . {XOR_ASSIGN}
trying to reduce by: primary_expression -> [id,id] . {[}
trying to reduce by: primary_expression -> [id,id] . {(}
reduce: primary_expression -> printf 
reduce item: primary_expression -> [id,id] . {(}
building new item: postfix_expression -> primary_expression . {=}
building new item: postfix_expression -> primary_expression . {ADD_ASSIGN}
building new item: postfix_expression -> primary_expression . {AND_ASSIGN}
building new item: postfix_expression -> primary_expression . {DIV_ASSIGN}
building new item: postfix_expression -> primary_expression . {LEFT_ASSIGN}
building new item: postfix_expression -> primary_expression . {MOD_ASSIGN}
building new item: postfix_expression -> primary_expression . {MUL_ASSIGN}
building new item: postfix_expression -> primary_expression . {OR_ASSIGN}
building new item: postfix_expression -> primary_expression . {RIGHT_ASSIGN}
building new item: postfix_expression -> primary_expression . {SUB_ASSIGN}
building new item: postfix_expression -> primary_expression . {XOR_ASSIGN}
building new item: postfix_expression -> primary_expression . {[}
building new item: postfix_expression -> primary_expression . {(}
building new item: postfix_expression -> primary_expression . {.}
building new item: postfix_expression -> primary_expression . {PTR_OP}
building new item: postfix_expression -> primary_expression . {INC_OP}
building new item: postfix_expression -> primary_expression . {DEC_OP}
building new item: postfix_expression -> primary_expression . {;}
building new item: postfix_expression -> primary_expression . {?}
building new item: postfix_expression -> primary_expression . {*}
building new item: postfix_expression -> primary_expression . {/}
building new item: postfix_expression -> primary_expression . {%}
building new item: postfix_expression -> primary_expression . {+}
building new item: postfix_expression -> primary_expression . {-}
building new item: postfix_expression -> primary_expression . {LEFT_OP}
building new item: postfix_expression -> primary_expression . {RIGHT_OP}
building new item: postfix_expression -> primary_expression . {<}
building new item: postfix_expression -> primary_expression . {>}
building new item: postfix_expression -> primary_expression . {LE_OP}
building new item: postfix_expression -> primary_expression . {GE_OP}
building new item: postfix_expression -> primary_expression . {EQ_OP}
building new item: postfix_expression -> primary_expression . {NE_OP}
building new item: postfix_expression -> primary_expression . {&}
building new item: postfix_expression -> primary_expression . {^}
building new item: postfix_expression -> primary_expression . {|}
building new item: postfix_expression -> primary_expression . {AND_OP}
building new item: postfix_expression -> primary_expression . {OR_OP}
building new item: postfix_expression -> primary_expression . {,}
closure post reduce
LOOP: 90, token: (, token_value: (
[verbose dump (every loop)]
parser state:
current token: (, value: (
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [primary_expression,primary_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    postfix_expression -> primary_expression . {=}
    postfix_expression -> primary_expression . {ADD_ASSIGN}
    postfix_expression -> primary_expression . {AND_ASSIGN}
    postfix_expression -> primary_expression . {DIV_ASSIGN}
    postfix_expression -> primary_expression . {LEFT_ASSIGN}
    postfix_expression -> primary_expression . {MOD_ASSIGN}
    postfix_expression -> primary_expression . {MUL_ASSIGN}
    postfix_expression -> primary_expression . {OR_ASSIGN}
    postfix_expression -> primary_expression . {RIGHT_ASSIGN}
    postfix_expression -> primary_expression . {SUB_ASSIGN}
    postfix_expression -> primary_expression . {XOR_ASSIGN}
    postfix_expression -> primary_expression . {[}
    postfix_expression -> primary_expression . {(}
    postfix_expression -> primary_expression . {.}
    postfix_expression -> primary_expression . {PTR_OP}
    postfix_expression -> primary_expression . {INC_OP}
    postfix_expression -> primary_expression . {DEC_OP}
    postfix_expression -> primary_expression . {;}
    postfix_expression -> primary_expression . {?}
    postfix_expression -> primary_expression . {*}
    postfix_expression -> primary_expression . {/}
    postfix_expression -> primary_expression . {%}
    postfix_expression -> primary_expression . {+}
    postfix_expression -> primary_expression . {-}
    postfix_expression -> primary_expression . {LEFT_OP}
    postfix_expression -> primary_expression . {RIGHT_OP}
    postfix_expression -> primary_expression . {<}
    postfix_expression -> primary_expression . {>}
    postfix_expression -> primary_expression . {LE_OP}
    postfix_expression -> primary_expression . {GE_OP}
    postfix_expression -> primary_expression . {EQ_OP}
    postfix_expression -> primary_expression . {NE_OP}
    postfix_expression -> primary_expression . {&}
    postfix_expression -> primary_expression . {^}
    postfix_expression -> primary_expression . {|}
    postfix_expression -> primary_expression . {AND_OP}
    postfix_expression -> primary_expression . {OR_OP}
    postfix_expression -> primary_expression . {,}
check: reduce postfix_expression -> primary_expression . {(}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: postfix_expression -> primary_expression . {=}
trying to reduce by: postfix_expression -> primary_expression . {ADD_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {AND_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {DIV_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {MOD_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {MUL_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {OR_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {SUB_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {XOR_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {[}
trying to reduce by: postfix_expression -> primary_expression . {(}
reduce: postfix_expression -> printf 
reduce item: postfix_expression -> primary_expression . {(}
building new item: unary_expression -> postfix_expression . {=}
building new item: unary_expression -> postfix_expression . {ADD_ASSIGN}
building new item: unary_expression -> postfix_expression . {AND_ASSIGN}
building new item: unary_expression -> postfix_expression . {DIV_ASSIGN}
building new item: unary_expression -> postfix_expression . {LEFT_ASSIGN}
building new item: unary_expression -> postfix_expression . {MOD_ASSIGN}
building new item: unary_expression -> postfix_expression . {MUL_ASSIGN}
building new item: unary_expression -> postfix_expression . {OR_ASSIGN}
building new item: unary_expression -> postfix_expression . {RIGHT_ASSIGN}
building new item: unary_expression -> postfix_expression . {SUB_ASSIGN}
building new item: unary_expression -> postfix_expression . {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {=}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {=}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {=}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {=}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {=}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {=}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {=}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {[}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {[}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {[}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {[}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {[}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {[}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {[}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {(}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {(}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {(}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {(}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {(}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {(}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {(}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {.}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {.}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {.}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {.}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {.}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {.}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {.}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {INC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {INC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {INC_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {INC_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {INC_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {INC_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {INC_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DEC_OP}
building new item: unary_expression -> postfix_expression . {;}
building new item: unary_expression -> postfix_expression . {?}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {;}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {;}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {;}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {;}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {;}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {;}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {;}
building new item: unary_expression -> postfix_expression . {*}
building new item: unary_expression -> postfix_expression . {/}
building new item: unary_expression -> postfix_expression . {%}
building new item: unary_expression -> postfix_expression . {+}
building new item: unary_expression -> postfix_expression . {-}
building new item: unary_expression -> postfix_expression . {LEFT_OP}
building new item: unary_expression -> postfix_expression . {RIGHT_OP}
building new item: unary_expression -> postfix_expression . {<}
building new item: unary_expression -> postfix_expression . {>}
building new item: unary_expression -> postfix_expression . {LE_OP}
building new item: unary_expression -> postfix_expression . {GE_OP}
building new item: unary_expression -> postfix_expression . {EQ_OP}
building new item: unary_expression -> postfix_expression . {NE_OP}
building new item: unary_expression -> postfix_expression . {&}
building new item: unary_expression -> postfix_expression . {^}
building new item: unary_expression -> postfix_expression . {|}
building new item: unary_expression -> postfix_expression . {AND_OP}
building new item: unary_expression -> postfix_expression . {OR_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {?}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {?}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {?}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {?}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {?}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {?}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {?}
building new item: unary_expression -> postfix_expression . {,}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {*}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {*}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {*}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {*}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {*}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {*}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {*}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {/}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {/}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {/}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {/}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {/}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {/}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {/}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {%}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {%}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {%}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {%}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {%}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {%}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {%}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {+}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {+}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {+}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {+}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {+}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {+}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {+}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {-}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {-}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {-}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {-}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {-}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {-}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {-}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {<}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {<}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {<}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {<}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {<}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {<}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {<}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {>}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {>}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {>}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {>}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {>}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {>}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {>}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {LE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {LE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LE_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {LE_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LE_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LE_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LE_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {GE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {GE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {GE_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {GE_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {GE_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {GE_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {GE_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {NE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {NE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {NE_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {NE_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {NE_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {NE_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {NE_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {&}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {&}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {&}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {&}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {&}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {&}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {&}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {^}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {^}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {^}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {^}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {^}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {^}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {^}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {|}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {|}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {|}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {|}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {|}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {|}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {|}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {AND_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {AND_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {OR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {OR_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {,}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {,}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {,}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {,}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {,}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {,}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {,}
closure post reduce
LOOP: 91, token: (, token_value: (
[verbose dump (every loop)]
parser state:
current token: (, value: (
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    unary_expression -> postfix_expression . {=}
    unary_expression -> postfix_expression . {ADD_ASSIGN}
    unary_expression -> postfix_expression . {AND_ASSIGN}
    unary_expression -> postfix_expression . {DIV_ASSIGN}
    unary_expression -> postfix_expression . {LEFT_ASSIGN}
    unary_expression -> postfix_expression . {MOD_ASSIGN}
    unary_expression -> postfix_expression . {MUL_ASSIGN}
    unary_expression -> postfix_expression . {OR_ASSIGN}
    unary_expression -> postfix_expression . {RIGHT_ASSIGN}
    unary_expression -> postfix_expression . {SUB_ASSIGN}
    unary_expression -> postfix_expression . {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {=}
    postfix_expression -> postfix_expression . [(,(] [),)] {=}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {=}
    postfix_expression -> postfix_expression . [.,.] [id,id] {=}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {=}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {=}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {=}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {[}
    postfix_expression -> postfix_expression . [(,(] [),)] {[}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {[}
    postfix_expression -> postfix_expression . [.,.] [id,id] {[}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {[}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {[}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {[}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {(}
    postfix_expression -> postfix_expression . [(,(] [),)] {(}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {(}
    postfix_expression -> postfix_expression . [.,.] [id,id] {(}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {(}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {(}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {(}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {.}
    postfix_expression -> postfix_expression . [(,(] [),)] {.}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {.}
    postfix_expression -> postfix_expression . [.,.] [id,id] {.}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {.}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {.}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {.}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {PTR_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {PTR_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {PTR_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {PTR_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {PTR_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {PTR_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {PTR_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {INC_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {INC_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {INC_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {INC_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {INC_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {INC_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {INC_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {DEC_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {DEC_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DEC_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {DEC_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DEC_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DEC_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DEC_OP}
    unary_expression -> postfix_expression . {;}
    unary_expression -> postfix_expression . {?}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {;}
    postfix_expression -> postfix_expression . [(,(] [),)] {;}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {;}
    postfix_expression -> postfix_expression . [.,.] [id,id] {;}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {;}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {;}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {;}
    unary_expression -> postfix_expression . {*}
    unary_expression -> postfix_expression . {/}
    unary_expression -> postfix_expression . {%}
    unary_expression -> postfix_expression . {+}
    unary_expression -> postfix_expression . {-}
    unary_expression -> postfix_expression . {LEFT_OP}
    unary_expression -> postfix_expression . {RIGHT_OP}
    unary_expression -> postfix_expression . {<}
    unary_expression -> postfix_expression . {>}
    unary_expression -> postfix_expression . {LE_OP}
    unary_expression -> postfix_expression . {GE_OP}
    unary_expression -> postfix_expression . {EQ_OP}
    unary_expression -> postfix_expression . {NE_OP}
    unary_expression -> postfix_expression . {&}
    unary_expression -> postfix_expression . {^}
    unary_expression -> postfix_expression . {|}
    unary_expression -> postfix_expression . {AND_OP}
    unary_expression -> postfix_expression . {OR_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {?}
    postfix_expression -> postfix_expression . [(,(] [),)] {?}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {?}
    postfix_expression -> postfix_expression . [.,.] [id,id] {?}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {?}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {?}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {?}
    unary_expression -> postfix_expression . {,}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {*}
    postfix_expression -> postfix_expression . [(,(] [),)] {*}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {*}
    postfix_expression -> postfix_expression . [.,.] [id,id] {*}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {*}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {*}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {*}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {/}
    postfix_expression -> postfix_expression . [(,(] [),)] {/}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {/}
    postfix_expression -> postfix_expression . [.,.] [id,id] {/}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {/}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {/}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {/}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {%}
    postfix_expression -> postfix_expression . [(,(] [),)] {%}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {%}
    postfix_expression -> postfix_expression . [.,.] [id,id] {%}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {%}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {%}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {%}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {+}
    postfix_expression -> postfix_expression . [(,(] [),)] {+}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {+}
    postfix_expression -> postfix_expression . [.,.] [id,id] {+}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {+}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {+}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {+}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {-}
    postfix_expression -> postfix_expression . [(,(] [),)] {-}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {-}
    postfix_expression -> postfix_expression . [.,.] [id,id] {-}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {-}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {-}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {-}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {<}
    postfix_expression -> postfix_expression . [(,(] [),)] {<}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {<}
    postfix_expression -> postfix_expression . [.,.] [id,id] {<}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {<}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {<}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {<}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {>}
    postfix_expression -> postfix_expression . [(,(] [),)] {>}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {>}
    postfix_expression -> postfix_expression . [.,.] [id,id] {>}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {>}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {>}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {>}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {LE_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {LE_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LE_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {LE_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LE_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LE_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LE_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {GE_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {GE_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {GE_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {GE_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {GE_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {GE_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {GE_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {EQ_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {EQ_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {EQ_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {EQ_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {EQ_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {EQ_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {EQ_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {NE_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {NE_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {NE_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {NE_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {NE_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {NE_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {NE_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {&}
    postfix_expression -> postfix_expression . [(,(] [),)] {&}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {&}
    postfix_expression -> postfix_expression . [.,.] [id,id] {&}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {&}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {&}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {&}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {^}
    postfix_expression -> postfix_expression . [(,(] [),)] {^}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {^}
    postfix_expression -> postfix_expression . [.,.] [id,id] {^}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {^}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {^}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {^}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {|}
    postfix_expression -> postfix_expression . [(,(] [),)] {|}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {|}
    postfix_expression -> postfix_expression . [.,.] [id,id] {|}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {|}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {|}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {|}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {AND_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {AND_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {OR_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {OR_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {,}
    postfix_expression -> postfix_expression . [(,(] [),)] {,}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {,}
    postfix_expression -> postfix_expression . [.,.] [id,id] {,}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {,}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {,}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {,}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {=}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {=}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {ADD_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {ADD_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {AND_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {DIV_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DIV_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {MOD_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MOD_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {MUL_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MUL_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {OR_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {SUB_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {SUB_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {XOR_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {XOR_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {[}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {[}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {(}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {(}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {.}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {.}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {PTR_OP}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {PTR_OP}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {INC_OP}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {INC_OP}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {DEC_OP}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DEC_OP}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {;}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {;}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {?}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {?}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {*}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {*}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {/}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {/}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {%}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {%}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {+}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {+}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {-}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {-}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_OP}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_OP}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_OP}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_OP}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {<}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {<}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {>}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {>}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {LE_OP}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LE_OP}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {GE_OP}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {GE_OP}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {EQ_OP}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {EQ_OP}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {NE_OP}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {NE_OP}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {&}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {&}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {^}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {^}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {|}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {|}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {AND_OP}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_OP}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {OR_OP}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_OP}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {,}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {,}
shifts: 76, reduces: 0, accepts: 0
shifting [(,(]
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {=}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {=}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {[}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {[}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {(}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {(}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {.}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {.}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {PTR_OP}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {PTR_OP}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {INC_OP}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {INC_OP}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {DEC_OP}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {DEC_OP}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {;}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {;}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {?}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {?}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {*}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {*}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {/}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {/}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {%}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {%}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {+}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {+}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {-}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {-}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {LEFT_OP}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {LEFT_OP}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {<}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {<}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {>}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {>}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {LE_OP}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {LE_OP}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {GE_OP}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {GE_OP}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {EQ_OP}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {EQ_OP}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {NE_OP}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {NE_OP}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {&}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {&}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {^}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {^}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {|}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {|}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {AND_OP}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {AND_OP}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {OR_OP}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {OR_OP}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {,}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {,}
closure post shift
LOOP: 92, token: string, token_value: "%d!\n"
[verbose dump (every loop)]
parser state:
current token: string, value: "%d!\n"
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
 state stack (kernel items of top state only):
  state 6
   kernel items:
    postfix_expression -> postfix_expression [(,(] . [),)] {=}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {=}
    postfix_expression -> postfix_expression [(,(] . [),)] {ADD_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {ADD_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . [),)] {AND_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {AND_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . [),)] {DIV_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {DIV_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . [),)] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . [),)] {MOD_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {MOD_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . [),)] {MUL_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {MUL_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . [),)] {OR_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {OR_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . [),)] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . [),)] {SUB_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {SUB_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . [),)] {XOR_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {XOR_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . [),)] {[}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {[}
    postfix_expression -> postfix_expression [(,(] . [),)] {(}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {(}
    postfix_expression -> postfix_expression [(,(] . [),)] {.}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {.}
    postfix_expression -> postfix_expression [(,(] . [),)] {PTR_OP}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {PTR_OP}
    postfix_expression -> postfix_expression [(,(] . [),)] {INC_OP}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {INC_OP}
    postfix_expression -> postfix_expression [(,(] . [),)] {DEC_OP}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {DEC_OP}
    postfix_expression -> postfix_expression [(,(] . [),)] {;}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {;}
    postfix_expression -> postfix_expression [(,(] . [),)] {?}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {?}
    postfix_expression -> postfix_expression [(,(] . [),)] {*}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {*}
    postfix_expression -> postfix_expression [(,(] . [),)] {/}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {/}
    postfix_expression -> postfix_expression [(,(] . [),)] {%}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {%}
    postfix_expression -> postfix_expression [(,(] . [),)] {+}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {+}
    postfix_expression -> postfix_expression [(,(] . [),)] {-}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {-}
    postfix_expression -> postfix_expression [(,(] . [),)] {LEFT_OP}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {LEFT_OP}
    postfix_expression -> postfix_expression [(,(] . [),)] {RIGHT_OP}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {RIGHT_OP}
    postfix_expression -> postfix_expression [(,(] . [),)] {<}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {<}
    postfix_expression -> postfix_expression [(,(] . [),)] {>}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {>}
    postfix_expression -> postfix_expression [(,(] . [),)] {LE_OP}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {LE_OP}
    postfix_expression -> postfix_expression [(,(] . [),)] {GE_OP}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {GE_OP}
    postfix_expression -> postfix_expression [(,(] . [),)] {EQ_OP}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {EQ_OP}
    postfix_expression -> postfix_expression [(,(] . [),)] {NE_OP}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {NE_OP}
    postfix_expression -> postfix_expression [(,(] . [),)] {&}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {&}
    postfix_expression -> postfix_expression [(,(] . [),)] {^}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {^}
    postfix_expression -> postfix_expression [(,(] . [),)] {|}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {|}
    postfix_expression -> postfix_expression [(,(] . [),)] {AND_OP}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {AND_OP}
    postfix_expression -> postfix_expression [(,(] . [),)] {OR_OP}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {OR_OP}
    postfix_expression -> postfix_expression [(,(] . [),)] {,}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {,}
check: shift primary_expression -> . [string,string] {=}
check: shift primary_expression -> . [string,string] {ADD_ASSIGN}
check: shift primary_expression -> . [string,string] {AND_ASSIGN}
check: shift primary_expression -> . [string,string] {DIV_ASSIGN}
check: shift primary_expression -> . [string,string] {LEFT_ASSIGN}
check: shift primary_expression -> . [string,string] {MOD_ASSIGN}
check: shift primary_expression -> . [string,string] {MUL_ASSIGN}
check: shift primary_expression -> . [string,string] {OR_ASSIGN}
check: shift primary_expression -> . [string,string] {RIGHT_ASSIGN}
check: shift primary_expression -> . [string,string] {SUB_ASSIGN}
check: shift primary_expression -> . [string,string] {XOR_ASSIGN}
check: shift primary_expression -> . [string,string] {[}
check: shift primary_expression -> . [string,string] {(}
check: shift primary_expression -> . [string,string] {.}
check: shift primary_expression -> . [string,string] {PTR_OP}
check: shift primary_expression -> . [string,string] {INC_OP}
check: shift primary_expression -> . [string,string] {DEC_OP}
check: shift primary_expression -> . [string,string] {)}
check: shift primary_expression -> . [string,string] {?}
check: shift primary_expression -> . [string,string] {*}
check: shift primary_expression -> . [string,string] {/}
check: shift primary_expression -> . [string,string] {%}
check: shift primary_expression -> . [string,string] {+}
check: shift primary_expression -> . [string,string] {-}
check: shift primary_expression -> . [string,string] {LEFT_OP}
check: shift primary_expression -> . [string,string] {RIGHT_OP}
check: shift primary_expression -> . [string,string] {<}
check: shift primary_expression -> . [string,string] {>}
check: shift primary_expression -> . [string,string] {LE_OP}
check: shift primary_expression -> . [string,string] {GE_OP}
check: shift primary_expression -> . [string,string] {EQ_OP}
check: shift primary_expression -> . [string,string] {NE_OP}
check: shift primary_expression -> . [string,string] {&}
check: shift primary_expression -> . [string,string] {^}
check: shift primary_expression -> . [string,string] {|}
check: shift primary_expression -> . [string,string] {AND_OP}
check: shift primary_expression -> . [string,string] {OR_OP}
check: shift primary_expression -> . [string,string] {,}
shifts: 38, reduces: 0, accepts: 0
shifting [string,"%d!\n"]
building new item: primary_expression -> [string,string] . {=}
building new item: primary_expression -> [string,string] . {ADD_ASSIGN}
building new item: primary_expression -> [string,string] . {AND_ASSIGN}
building new item: primary_expression -> [string,string] . {DIV_ASSIGN}
building new item: primary_expression -> [string,string] . {LEFT_ASSIGN}
building new item: primary_expression -> [string,string] . {MOD_ASSIGN}
building new item: primary_expression -> [string,string] . {MUL_ASSIGN}
building new item: primary_expression -> [string,string] . {OR_ASSIGN}
building new item: primary_expression -> [string,string] . {RIGHT_ASSIGN}
building new item: primary_expression -> [string,string] . {SUB_ASSIGN}
building new item: primary_expression -> [string,string] . {XOR_ASSIGN}
building new item: primary_expression -> [string,string] . {[}
building new item: primary_expression -> [string,string] . {(}
building new item: primary_expression -> [string,string] . {.}
building new item: primary_expression -> [string,string] . {PTR_OP}
building new item: primary_expression -> [string,string] . {INC_OP}
building new item: primary_expression -> [string,string] . {DEC_OP}
building new item: primary_expression -> [string,string] . {)}
building new item: primary_expression -> [string,string] . {?}
building new item: primary_expression -> [string,string] . {*}
building new item: primary_expression -> [string,string] . {/}
building new item: primary_expression -> [string,string] . {%}
building new item: primary_expression -> [string,string] . {+}
building new item: primary_expression -> [string,string] . {-}
building new item: primary_expression -> [string,string] . {LEFT_OP}
building new item: primary_expression -> [string,string] . {RIGHT_OP}
building new item: primary_expression -> [string,string] . {<}
building new item: primary_expression -> [string,string] . {>}
building new item: primary_expression -> [string,string] . {LE_OP}
building new item: primary_expression -> [string,string] . {GE_OP}
building new item: primary_expression -> [string,string] . {EQ_OP}
building new item: primary_expression -> [string,string] . {NE_OP}
building new item: primary_expression -> [string,string] . {&}
building new item: primary_expression -> [string,string] . {^}
building new item: primary_expression -> [string,string] . {|}
building new item: primary_expression -> [string,string] . {AND_OP}
building new item: primary_expression -> [string,string] . {OR_OP}
building new item: primary_expression -> [string,string] . {,}
closure post shift
LOOP: 93, token: ,, token_value: ,
[verbose dump (every loop)]
parser state:
current token: ,, value: ,
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [string,"%d!\n"]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    primary_expression -> [string,string] . {=}
    primary_expression -> [string,string] . {ADD_ASSIGN}
    primary_expression -> [string,string] . {AND_ASSIGN}
    primary_expression -> [string,string] . {DIV_ASSIGN}
    primary_expression -> [string,string] . {LEFT_ASSIGN}
    primary_expression -> [string,string] . {MOD_ASSIGN}
    primary_expression -> [string,string] . {MUL_ASSIGN}
    primary_expression -> [string,string] . {OR_ASSIGN}
    primary_expression -> [string,string] . {RIGHT_ASSIGN}
    primary_expression -> [string,string] . {SUB_ASSIGN}
    primary_expression -> [string,string] . {XOR_ASSIGN}
    primary_expression -> [string,string] . {[}
    primary_expression -> [string,string] . {(}
    primary_expression -> [string,string] . {.}
    primary_expression -> [string,string] . {PTR_OP}
    primary_expression -> [string,string] . {INC_OP}
    primary_expression -> [string,string] . {DEC_OP}
    primary_expression -> [string,string] . {)}
    primary_expression -> [string,string] . {?}
    primary_expression -> [string,string] . {*}
    primary_expression -> [string,string] . {/}
    primary_expression -> [string,string] . {%}
    primary_expression -> [string,string] . {+}
    primary_expression -> [string,string] . {-}
    primary_expression -> [string,string] . {LEFT_OP}
    primary_expression -> [string,string] . {RIGHT_OP}
    primary_expression -> [string,string] . {<}
    primary_expression -> [string,string] . {>}
    primary_expression -> [string,string] . {LE_OP}
    primary_expression -> [string,string] . {GE_OP}
    primary_expression -> [string,string] . {EQ_OP}
    primary_expression -> [string,string] . {NE_OP}
    primary_expression -> [string,string] . {&}
    primary_expression -> [string,string] . {^}
    primary_expression -> [string,string] . {|}
    primary_expression -> [string,string] . {AND_OP}
    primary_expression -> [string,string] . {OR_OP}
    primary_expression -> [string,string] . {,}
check: reduce primary_expression -> [string,string] . {,}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: primary_expression -> [string,string] . {=}
trying to reduce by: primary_expression -> [string,string] . {ADD_ASSIGN}
trying to reduce by: primary_expression -> [string,string] . {AND_ASSIGN}
trying to reduce by: primary_expression -> [string,string] . {DIV_ASSIGN}
trying to reduce by: primary_expression -> [string,string] . {LEFT_ASSIGN}
trying to reduce by: primary_expression -> [string,string] . {MOD_ASSIGN}
trying to reduce by: primary_expression -> [string,string] . {MUL_ASSIGN}
trying to reduce by: primary_expression -> [string,string] . {OR_ASSIGN}
trying to reduce by: primary_expression -> [string,string] . {RIGHT_ASSIGN}
trying to reduce by: primary_expression -> [string,string] . {SUB_ASSIGN}
trying to reduce by: primary_expression -> [string,string] . {XOR_ASSIGN}
trying to reduce by: primary_expression -> [string,string] . {[}
trying to reduce by: primary_expression -> [string,string] . {(}
trying to reduce by: primary_expression -> [string,string] . {.}
trying to reduce by: primary_expression -> [string,string] . {PTR_OP}
trying to reduce by: primary_expression -> [string,string] . {INC_OP}
trying to reduce by: primary_expression -> [string,string] . {DEC_OP}
trying to reduce by: primary_expression -> [string,string] . {)}
trying to reduce by: primary_expression -> [string,string] . {?}
trying to reduce by: primary_expression -> [string,string] . {*}
trying to reduce by: primary_expression -> [string,string] . {/}
trying to reduce by: primary_expression -> [string,string] . {%}
trying to reduce by: primary_expression -> [string,string] . {+}
trying to reduce by: primary_expression -> [string,string] . {-}
trying to reduce by: primary_expression -> [string,string] . {LEFT_OP}
trying to reduce by: primary_expression -> [string,string] . {RIGHT_OP}
trying to reduce by: primary_expression -> [string,string] . {<}
trying to reduce by: primary_expression -> [string,string] . {>}
trying to reduce by: primary_expression -> [string,string] . {LE_OP}
trying to reduce by: primary_expression -> [string,string] . {GE_OP}
trying to reduce by: primary_expression -> [string,string] . {EQ_OP}
trying to reduce by: primary_expression -> [string,string] . {NE_OP}
trying to reduce by: primary_expression -> [string,string] . {&}
trying to reduce by: primary_expression -> [string,string] . {^}
trying to reduce by: primary_expression -> [string,string] . {|}
trying to reduce by: primary_expression -> [string,string] . {AND_OP}
trying to reduce by: primary_expression -> [string,string] . {OR_OP}
trying to reduce by: primary_expression -> [string,string] . {,}
reduce: primary_expression -> "%d!\n" 
reduce item: primary_expression -> [string,string] . {,}
building new item: postfix_expression -> primary_expression . {=}
building new item: postfix_expression -> primary_expression . {ADD_ASSIGN}
building new item: postfix_expression -> primary_expression . {AND_ASSIGN}
building new item: postfix_expression -> primary_expression . {DIV_ASSIGN}
building new item: postfix_expression -> primary_expression . {LEFT_ASSIGN}
building new item: postfix_expression -> primary_expression . {MOD_ASSIGN}
building new item: postfix_expression -> primary_expression . {MUL_ASSIGN}
building new item: postfix_expression -> primary_expression . {OR_ASSIGN}
building new item: postfix_expression -> primary_expression . {RIGHT_ASSIGN}
building new item: postfix_expression -> primary_expression . {SUB_ASSIGN}
building new item: postfix_expression -> primary_expression . {XOR_ASSIGN}
building new item: postfix_expression -> primary_expression . {[}
building new item: postfix_expression -> primary_expression . {(}
building new item: postfix_expression -> primary_expression . {.}
building new item: postfix_expression -> primary_expression . {PTR_OP}
building new item: postfix_expression -> primary_expression . {INC_OP}
building new item: postfix_expression -> primary_expression . {DEC_OP}
building new item: postfix_expression -> primary_expression . {)}
building new item: postfix_expression -> primary_expression . {?}
building new item: postfix_expression -> primary_expression . {*}
building new item: postfix_expression -> primary_expression . {/}
building new item: postfix_expression -> primary_expression . {%}
building new item: postfix_expression -> primary_expression . {+}
building new item: postfix_expression -> primary_expression . {-}
building new item: postfix_expression -> primary_expression . {LEFT_OP}
building new item: postfix_expression -> primary_expression . {RIGHT_OP}
building new item: postfix_expression -> primary_expression . {<}
building new item: postfix_expression -> primary_expression . {>}
building new item: postfix_expression -> primary_expression . {LE_OP}
building new item: postfix_expression -> primary_expression . {GE_OP}
building new item: postfix_expression -> primary_expression . {EQ_OP}
building new item: postfix_expression -> primary_expression . {NE_OP}
building new item: postfix_expression -> primary_expression . {&}
building new item: postfix_expression -> primary_expression . {^}
building new item: postfix_expression -> primary_expression . {|}
building new item: postfix_expression -> primary_expression . {AND_OP}
building new item: postfix_expression -> primary_expression . {OR_OP}
building new item: postfix_expression -> primary_expression . {,}
closure post reduce
LOOP: 94, token: ,, token_value: ,
[verbose dump (every loop)]
parser state:
current token: ,, value: ,
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [primary_expression,primary_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    postfix_expression -> primary_expression . {=}
    postfix_expression -> primary_expression . {ADD_ASSIGN}
    postfix_expression -> primary_expression . {AND_ASSIGN}
    postfix_expression -> primary_expression . {DIV_ASSIGN}
    postfix_expression -> primary_expression . {LEFT_ASSIGN}
    postfix_expression -> primary_expression . {MOD_ASSIGN}
    postfix_expression -> primary_expression . {MUL_ASSIGN}
    postfix_expression -> primary_expression . {OR_ASSIGN}
    postfix_expression -> primary_expression . {RIGHT_ASSIGN}
    postfix_expression -> primary_expression . {SUB_ASSIGN}
    postfix_expression -> primary_expression . {XOR_ASSIGN}
    postfix_expression -> primary_expression . {[}
    postfix_expression -> primary_expression . {(}
    postfix_expression -> primary_expression . {.}
    postfix_expression -> primary_expression . {PTR_OP}
    postfix_expression -> primary_expression . {INC_OP}
    postfix_expression -> primary_expression . {DEC_OP}
    postfix_expression -> primary_expression . {)}
    postfix_expression -> primary_expression . {?}
    postfix_expression -> primary_expression . {*}
    postfix_expression -> primary_expression . {/}
    postfix_expression -> primary_expression . {%}
    postfix_expression -> primary_expression . {+}
    postfix_expression -> primary_expression . {-}
    postfix_expression -> primary_expression . {LEFT_OP}
    postfix_expression -> primary_expression . {RIGHT_OP}
    postfix_expression -> primary_expression . {<}
    postfix_expression -> primary_expression . {>}
    postfix_expression -> primary_expression . {LE_OP}
    postfix_expression -> primary_expression . {GE_OP}
    postfix_expression -> primary_expression . {EQ_OP}
    postfix_expression -> primary_expression . {NE_OP}
    postfix_expression -> primary_expression . {&}
    postfix_expression -> primary_expression . {^}
    postfix_expression -> primary_expression . {|}
    postfix_expression -> primary_expression . {AND_OP}
    postfix_expression -> primary_expression . {OR_OP}
    postfix_expression -> primary_expression . {,}
check: reduce postfix_expression -> primary_expression . {,}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: postfix_expression -> primary_expression . {=}
trying to reduce by: postfix_expression -> primary_expression . {ADD_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {AND_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {DIV_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {MOD_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {MUL_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {OR_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {SUB_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {XOR_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {[}
trying to reduce by: postfix_expression -> primary_expression . {(}
trying to reduce by: postfix_expression -> primary_expression . {.}
trying to reduce by: postfix_expression -> primary_expression . {PTR_OP}
trying to reduce by: postfix_expression -> primary_expression . {INC_OP}
trying to reduce by: postfix_expression -> primary_expression . {DEC_OP}
trying to reduce by: postfix_expression -> primary_expression . {)}
trying to reduce by: postfix_expression -> primary_expression . {?}
trying to reduce by: postfix_expression -> primary_expression . {*}
trying to reduce by: postfix_expression -> primary_expression . {/}
trying to reduce by: postfix_expression -> primary_expression . {%}
trying to reduce by: postfix_expression -> primary_expression . {+}
trying to reduce by: postfix_expression -> primary_expression . {-}
trying to reduce by: postfix_expression -> primary_expression . {LEFT_OP}
trying to reduce by: postfix_expression -> primary_expression . {RIGHT_OP}
trying to reduce by: postfix_expression -> primary_expression . {<}
trying to reduce by: postfix_expression -> primary_expression . {>}
trying to reduce by: postfix_expression -> primary_expression . {LE_OP}
trying to reduce by: postfix_expression -> primary_expression . {GE_OP}
trying to reduce by: postfix_expression -> primary_expression . {EQ_OP}
trying to reduce by: postfix_expression -> primary_expression . {NE_OP}
trying to reduce by: postfix_expression -> primary_expression . {&}
trying to reduce by: postfix_expression -> primary_expression . {^}
trying to reduce by: postfix_expression -> primary_expression . {|}
trying to reduce by: postfix_expression -> primary_expression . {AND_OP}
trying to reduce by: postfix_expression -> primary_expression . {OR_OP}
trying to reduce by: postfix_expression -> primary_expression . {,}
reduce: postfix_expression -> "%d!\n" 
reduce item: postfix_expression -> primary_expression . {,}
building new item: unary_expression -> postfix_expression . {=}
building new item: unary_expression -> postfix_expression . {ADD_ASSIGN}
building new item: unary_expression -> postfix_expression . {AND_ASSIGN}
building new item: unary_expression -> postfix_expression . {DIV_ASSIGN}
building new item: unary_expression -> postfix_expression . {LEFT_ASSIGN}
building new item: unary_expression -> postfix_expression . {MOD_ASSIGN}
building new item: unary_expression -> postfix_expression . {MUL_ASSIGN}
building new item: unary_expression -> postfix_expression . {OR_ASSIGN}
building new item: unary_expression -> postfix_expression . {RIGHT_ASSIGN}
building new item: unary_expression -> postfix_expression . {SUB_ASSIGN}
building new item: unary_expression -> postfix_expression . {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {=}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {=}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {=}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {=}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {=}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {=}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {=}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {[}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {[}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {[}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {[}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {[}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {[}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {[}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {(}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {(}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {(}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {(}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {(}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {(}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {(}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {.}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {.}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {.}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {.}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {.}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {.}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {.}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {INC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {INC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {INC_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {INC_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {INC_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {INC_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {INC_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DEC_OP}
building new item: unary_expression -> postfix_expression . {)}
building new item: unary_expression -> postfix_expression . {?}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {)}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {)}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {)}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {)}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {)}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {)}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {)}
building new item: unary_expression -> postfix_expression . {*}
building new item: unary_expression -> postfix_expression . {/}
building new item: unary_expression -> postfix_expression . {%}
building new item: unary_expression -> postfix_expression . {+}
building new item: unary_expression -> postfix_expression . {-}
building new item: unary_expression -> postfix_expression . {LEFT_OP}
building new item: unary_expression -> postfix_expression . {RIGHT_OP}
building new item: unary_expression -> postfix_expression . {<}
building new item: unary_expression -> postfix_expression . {>}
building new item: unary_expression -> postfix_expression . {LE_OP}
building new item: unary_expression -> postfix_expression . {GE_OP}
building new item: unary_expression -> postfix_expression . {EQ_OP}
building new item: unary_expression -> postfix_expression . {NE_OP}
building new item: unary_expression -> postfix_expression . {&}
building new item: unary_expression -> postfix_expression . {^}
building new item: unary_expression -> postfix_expression . {|}
building new item: unary_expression -> postfix_expression . {AND_OP}
building new item: unary_expression -> postfix_expression . {OR_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {?}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {?}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {?}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {?}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {?}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {?}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {?}
building new item: unary_expression -> postfix_expression . {,}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {*}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {*}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {*}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {*}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {*}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {*}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {*}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {/}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {/}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {/}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {/}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {/}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {/}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {/}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {%}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {%}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {%}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {%}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {%}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {%}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {%}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {+}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {+}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {+}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {+}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {+}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {+}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {+}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {-}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {-}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {-}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {-}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {-}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {-}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {-}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {<}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {<}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {<}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {<}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {<}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {<}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {<}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {>}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {>}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {>}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {>}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {>}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {>}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {>}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {LE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {LE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LE_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {LE_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LE_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LE_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LE_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {GE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {GE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {GE_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {GE_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {GE_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {GE_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {GE_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {NE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {NE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {NE_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {NE_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {NE_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {NE_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {NE_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {&}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {&}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {&}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {&}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {&}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {&}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {&}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {^}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {^}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {^}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {^}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {^}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {^}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {^}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {|}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {|}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {|}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {|}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {|}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {|}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {|}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {AND_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {AND_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {OR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {OR_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {,}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {,}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {,}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {,}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {,}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {,}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {,}
closure post reduce
LOOP: 95, token: ,, token_value: ,
[verbose dump (every loop)]
parser state:
current token: ,, value: ,
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [postfix_expression,postfix_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    unary_expression -> postfix_expression . {=}
    unary_expression -> postfix_expression . {ADD_ASSIGN}
    unary_expression -> postfix_expression . {AND_ASSIGN}
    unary_expression -> postfix_expression . {DIV_ASSIGN}
    unary_expression -> postfix_expression . {LEFT_ASSIGN}
    unary_expression -> postfix_expression . {MOD_ASSIGN}
    unary_expression -> postfix_expression . {MUL_ASSIGN}
    unary_expression -> postfix_expression . {OR_ASSIGN}
    unary_expression -> postfix_expression . {RIGHT_ASSIGN}
    unary_expression -> postfix_expression . {SUB_ASSIGN}
    unary_expression -> postfix_expression . {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {=}
    postfix_expression -> postfix_expression . [(,(] [),)] {=}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {=}
    postfix_expression -> postfix_expression . [.,.] [id,id] {=}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {=}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {=}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {=}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {[}
    postfix_expression -> postfix_expression . [(,(] [),)] {[}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {[}
    postfix_expression -> postfix_expression . [.,.] [id,id] {[}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {[}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {[}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {[}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {(}
    postfix_expression -> postfix_expression . [(,(] [),)] {(}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {(}
    postfix_expression -> postfix_expression . [.,.] [id,id] {(}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {(}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {(}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {(}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {.}
    postfix_expression -> postfix_expression . [(,(] [),)] {.}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {.}
    postfix_expression -> postfix_expression . [.,.] [id,id] {.}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {.}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {.}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {.}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {PTR_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {PTR_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {PTR_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {PTR_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {PTR_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {PTR_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {PTR_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {INC_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {INC_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {INC_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {INC_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {INC_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {INC_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {INC_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {DEC_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {DEC_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DEC_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {DEC_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DEC_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DEC_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DEC_OP}
    unary_expression -> postfix_expression . {)}
    unary_expression -> postfix_expression . {?}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {)}
    postfix_expression -> postfix_expression . [(,(] [),)] {)}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {)}
    postfix_expression -> postfix_expression . [.,.] [id,id] {)}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {)}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {)}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {)}
    unary_expression -> postfix_expression . {*}
    unary_expression -> postfix_expression . {/}
    unary_expression -> postfix_expression . {%}
    unary_expression -> postfix_expression . {+}
    unary_expression -> postfix_expression . {-}
    unary_expression -> postfix_expression . {LEFT_OP}
    unary_expression -> postfix_expression . {RIGHT_OP}
    unary_expression -> postfix_expression . {<}
    unary_expression -> postfix_expression . {>}
    unary_expression -> postfix_expression . {LE_OP}
    unary_expression -> postfix_expression . {GE_OP}
    unary_expression -> postfix_expression . {EQ_OP}
    unary_expression -> postfix_expression . {NE_OP}
    unary_expression -> postfix_expression . {&}
    unary_expression -> postfix_expression . {^}
    unary_expression -> postfix_expression . {|}
    unary_expression -> postfix_expression . {AND_OP}
    unary_expression -> postfix_expression . {OR_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {?}
    postfix_expression -> postfix_expression . [(,(] [),)] {?}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {?}
    postfix_expression -> postfix_expression . [.,.] [id,id] {?}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {?}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {?}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {?}
    unary_expression -> postfix_expression . {,}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {*}
    postfix_expression -> postfix_expression . [(,(] [),)] {*}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {*}
    postfix_expression -> postfix_expression . [.,.] [id,id] {*}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {*}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {*}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {*}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {/}
    postfix_expression -> postfix_expression . [(,(] [),)] {/}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {/}
    postfix_expression -> postfix_expression . [.,.] [id,id] {/}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {/}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {/}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {/}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {%}
    postfix_expression -> postfix_expression . [(,(] [),)] {%}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {%}
    postfix_expression -> postfix_expression . [.,.] [id,id] {%}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {%}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {%}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {%}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {+}
    postfix_expression -> postfix_expression . [(,(] [),)] {+}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {+}
    postfix_expression -> postfix_expression . [.,.] [id,id] {+}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {+}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {+}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {+}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {-}
    postfix_expression -> postfix_expression . [(,(] [),)] {-}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {-}
    postfix_expression -> postfix_expression . [.,.] [id,id] {-}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {-}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {-}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {-}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {<}
    postfix_expression -> postfix_expression . [(,(] [),)] {<}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {<}
    postfix_expression -> postfix_expression . [.,.] [id,id] {<}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {<}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {<}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {<}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {>}
    postfix_expression -> postfix_expression . [(,(] [),)] {>}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {>}
    postfix_expression -> postfix_expression . [.,.] [id,id] {>}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {>}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {>}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {>}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {LE_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {LE_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LE_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {LE_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LE_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LE_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LE_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {GE_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {GE_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {GE_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {GE_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {GE_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {GE_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {GE_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {EQ_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {EQ_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {EQ_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {EQ_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {EQ_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {EQ_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {EQ_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {NE_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {NE_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {NE_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {NE_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {NE_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {NE_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {NE_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {&}
    postfix_expression -> postfix_expression . [(,(] [),)] {&}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {&}
    postfix_expression -> postfix_expression . [.,.] [id,id] {&}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {&}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {&}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {&}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {^}
    postfix_expression -> postfix_expression . [(,(] [),)] {^}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {^}
    postfix_expression -> postfix_expression . [.,.] [id,id] {^}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {^}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {^}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {^}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {|}
    postfix_expression -> postfix_expression . [(,(] [),)] {|}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {|}
    postfix_expression -> postfix_expression . [.,.] [id,id] {|}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {|}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {|}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {|}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {AND_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {AND_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {OR_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {OR_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {,}
    postfix_expression -> postfix_expression . [(,(] [),)] {,}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {,}
    postfix_expression -> postfix_expression . [.,.] [id,id] {,}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {,}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {,}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {,}
check: reduce unary_expression -> postfix_expression . {,}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: unary_expression -> postfix_expression . {=}
trying to reduce by: unary_expression -> postfix_expression . {ADD_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {AND_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {DIV_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {LEFT_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {MOD_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {MUL_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {OR_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {RIGHT_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {SUB_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {=}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {=}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {=}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {=}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {=}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {=}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {=}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {[}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {[}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {[}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {[}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {[}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {[}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {[}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {(}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {(}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {(}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {(}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {(}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {(}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {(}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {.}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {.}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {.}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {.}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {.}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {.}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {.}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DEC_OP}
trying to reduce by: unary_expression -> postfix_expression . {)}
trying to reduce by: unary_expression -> postfix_expression . {?}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {)}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {)}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {)}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {)}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {)}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {)}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {)}
trying to reduce by: unary_expression -> postfix_expression . {*}
trying to reduce by: unary_expression -> postfix_expression . {/}
trying to reduce by: unary_expression -> postfix_expression . {%}
trying to reduce by: unary_expression -> postfix_expression . {+}
trying to reduce by: unary_expression -> postfix_expression . {-}
trying to reduce by: unary_expression -> postfix_expression . {LEFT_OP}
trying to reduce by: unary_expression -> postfix_expression . {RIGHT_OP}
trying to reduce by: unary_expression -> postfix_expression . {<}
trying to reduce by: unary_expression -> postfix_expression . {>}
trying to reduce by: unary_expression -> postfix_expression . {LE_OP}
trying to reduce by: unary_expression -> postfix_expression . {GE_OP}
trying to reduce by: unary_expression -> postfix_expression . {EQ_OP}
trying to reduce by: unary_expression -> postfix_expression . {NE_OP}
trying to reduce by: unary_expression -> postfix_expression . {&}
trying to reduce by: unary_expression -> postfix_expression . {^}
trying to reduce by: unary_expression -> postfix_expression . {|}
trying to reduce by: unary_expression -> postfix_expression . {AND_OP}
trying to reduce by: unary_expression -> postfix_expression . {OR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {?}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {?}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {?}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {?}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {?}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {?}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {?}
trying to reduce by: unary_expression -> postfix_expression . {,}
reduce: unary_expression -> "%d!\n" 
reduce item: unary_expression -> postfix_expression . {,}
building new item: assignment_expression -> unary_expression . assignment_operator assignment_expression {)}
building new item: assignment_expression -> unary_expression . assignment_operator assignment_expression {,}
building new item: cast_expression -> unary_expression . {)}
building new item: cast_expression -> unary_expression . {?}
building new item: cast_expression -> unary_expression . {*}
building new item: cast_expression -> unary_expression . {/}
building new item: cast_expression -> unary_expression . {%}
building new item: cast_expression -> unary_expression . {+}
building new item: cast_expression -> unary_expression . {-}
building new item: cast_expression -> unary_expression . {LEFT_OP}
building new item: cast_expression -> unary_expression . {RIGHT_OP}
building new item: cast_expression -> unary_expression . {<}
building new item: cast_expression -> unary_expression . {>}
building new item: cast_expression -> unary_expression . {LE_OP}
building new item: cast_expression -> unary_expression . {GE_OP}
building new item: cast_expression -> unary_expression . {EQ_OP}
building new item: cast_expression -> unary_expression . {NE_OP}
building new item: cast_expression -> unary_expression . {&}
building new item: cast_expression -> unary_expression . {^}
building new item: cast_expression -> unary_expression . {|}
building new item: cast_expression -> unary_expression . {AND_OP}
building new item: cast_expression -> unary_expression . {OR_OP}
building new item: cast_expression -> unary_expression . {,}
closure post reduce
LOOP: 96, token: ,, token_value: ,
[verbose dump (every loop)]
parser state:
current token: ,, value: ,
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [unary_expression,unary_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    assignment_expression -> unary_expression . assignment_operator assignment_expression {)}
    assignment_expression -> unary_expression . assignment_operator assignment_expression {,}
    cast_expression -> unary_expression . {)}
    cast_expression -> unary_expression . {?}
    cast_expression -> unary_expression . {*}
    cast_expression -> unary_expression . {/}
    cast_expression -> unary_expression . {%}
    cast_expression -> unary_expression . {+}
    cast_expression -> unary_expression . {-}
    cast_expression -> unary_expression . {LEFT_OP}
    cast_expression -> unary_expression . {RIGHT_OP}
    cast_expression -> unary_expression . {<}
    cast_expression -> unary_expression . {>}
    cast_expression -> unary_expression . {LE_OP}
    cast_expression -> unary_expression . {GE_OP}
    cast_expression -> unary_expression . {EQ_OP}
    cast_expression -> unary_expression . {NE_OP}
    cast_expression -> unary_expression . {&}
    cast_expression -> unary_expression . {^}
    cast_expression -> unary_expression . {|}
    cast_expression -> unary_expression . {AND_OP}
    cast_expression -> unary_expression . {OR_OP}
    cast_expression -> unary_expression . {,}
check: reduce cast_expression -> unary_expression . {,}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: assignment_expression -> unary_expression . assignment_operator assignment_expression {)}
trying to reduce by: assignment_expression -> unary_expression . assignment_operator assignment_expression {,}
trying to reduce by: cast_expression -> unary_expression . {)}
trying to reduce by: cast_expression -> unary_expression . {?}
trying to reduce by: cast_expression -> unary_expression . {*}
trying to reduce by: cast_expression -> unary_expression . {/}
trying to reduce by: cast_expression -> unary_expression . {%}
trying to reduce by: cast_expression -> unary_expression . {+}
trying to reduce by: cast_expression -> unary_expression . {-}
trying to reduce by: cast_expression -> unary_expression . {LEFT_OP}
trying to reduce by: cast_expression -> unary_expression . {RIGHT_OP}
trying to reduce by: cast_expression -> unary_expression . {<}
trying to reduce by: cast_expression -> unary_expression . {>}
trying to reduce by: cast_expression -> unary_expression . {LE_OP}
trying to reduce by: cast_expression -> unary_expression . {GE_OP}
trying to reduce by: cast_expression -> unary_expression . {EQ_OP}
trying to reduce by: cast_expression -> unary_expression . {NE_OP}
trying to reduce by: cast_expression -> unary_expression . {&}
trying to reduce by: cast_expression -> unary_expression . {^}
trying to reduce by: cast_expression -> unary_expression . {|}
trying to reduce by: cast_expression -> unary_expression . {AND_OP}
trying to reduce by: cast_expression -> unary_expression . {OR_OP}
trying to reduce by: cast_expression -> unary_expression . {,}
reduce: cast_expression -> "%d!\n" 
reduce item: cast_expression -> unary_expression . {,}
building new item: multiplicative_expression -> cast_expression . {)}
building new item: multiplicative_expression -> cast_expression . {?}
building new item: multiplicative_expression -> cast_expression . {*}
building new item: multiplicative_expression -> cast_expression . {/}
building new item: multiplicative_expression -> cast_expression . {%}
building new item: multiplicative_expression -> cast_expression . {+}
building new item: multiplicative_expression -> cast_expression . {-}
building new item: multiplicative_expression -> cast_expression . {LEFT_OP}
building new item: multiplicative_expression -> cast_expression . {RIGHT_OP}
building new item: multiplicative_expression -> cast_expression . {<}
building new item: multiplicative_expression -> cast_expression . {>}
building new item: multiplicative_expression -> cast_expression . {LE_OP}
building new item: multiplicative_expression -> cast_expression . {GE_OP}
building new item: multiplicative_expression -> cast_expression . {EQ_OP}
building new item: multiplicative_expression -> cast_expression . {NE_OP}
building new item: multiplicative_expression -> cast_expression . {&}
building new item: multiplicative_expression -> cast_expression . {^}
building new item: multiplicative_expression -> cast_expression . {|}
building new item: multiplicative_expression -> cast_expression . {AND_OP}
building new item: multiplicative_expression -> cast_expression . {OR_OP}
building new item: multiplicative_expression -> cast_expression . {,}
closure post reduce
LOOP: 97, token: ,, token_value: ,
[verbose dump (every loop)]
parser state:
current token: ,, value: ,
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [cast_expression,cast_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    multiplicative_expression -> cast_expression . {)}
    multiplicative_expression -> cast_expression . {?}
    multiplicative_expression -> cast_expression . {*}
    multiplicative_expression -> cast_expression . {/}
    multiplicative_expression -> cast_expression . {%}
    multiplicative_expression -> cast_expression . {+}
    multiplicative_expression -> cast_expression . {-}
    multiplicative_expression -> cast_expression . {LEFT_OP}
    multiplicative_expression -> cast_expression . {RIGHT_OP}
    multiplicative_expression -> cast_expression . {<}
    multiplicative_expression -> cast_expression . {>}
    multiplicative_expression -> cast_expression . {LE_OP}
    multiplicative_expression -> cast_expression . {GE_OP}
    multiplicative_expression -> cast_expression . {EQ_OP}
    multiplicative_expression -> cast_expression . {NE_OP}
    multiplicative_expression -> cast_expression . {&}
    multiplicative_expression -> cast_expression . {^}
    multiplicative_expression -> cast_expression . {|}
    multiplicative_expression -> cast_expression . {AND_OP}
    multiplicative_expression -> cast_expression . {OR_OP}
    multiplicative_expression -> cast_expression . {,}
check: reduce multiplicative_expression -> cast_expression . {,}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: multiplicative_expression -> cast_expression . {)}
trying to reduce by: multiplicative_expression -> cast_expression . {?}
trying to reduce by: multiplicative_expression -> cast_expression . {*}
trying to reduce by: multiplicative_expression -> cast_expression . {/}
trying to reduce by: multiplicative_expression -> cast_expression . {%}
trying to reduce by: multiplicative_expression -> cast_expression . {+}
trying to reduce by: multiplicative_expression -> cast_expression . {-}
trying to reduce by: multiplicative_expression -> cast_expression . {LEFT_OP}
trying to reduce by: multiplicative_expression -> cast_expression . {RIGHT_OP}
trying to reduce by: multiplicative_expression -> cast_expression . {<}
trying to reduce by: multiplicative_expression -> cast_expression . {>}
trying to reduce by: multiplicative_expression -> cast_expression . {LE_OP}
trying to reduce by: multiplicative_expression -> cast_expression . {GE_OP}
trying to reduce by: multiplicative_expression -> cast_expression . {EQ_OP}
trying to reduce by: multiplicative_expression -> cast_expression . {NE_OP}
trying to reduce by: multiplicative_expression -> cast_expression . {&}
trying to reduce by: multiplicative_expression -> cast_expression . {^}
trying to reduce by: multiplicative_expression -> cast_expression . {|}
trying to reduce by: multiplicative_expression -> cast_expression . {AND_OP}
trying to reduce by: multiplicative_expression -> cast_expression . {OR_OP}
trying to reduce by: multiplicative_expression -> cast_expression . {,}
reduce: multiplicative_expression -> "%d!\n" 
reduce item: multiplicative_expression -> cast_expression . {,}
building new item: additive_expression -> multiplicative_expression . {)}
building new item: additive_expression -> multiplicative_expression . {?}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {)}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {)}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {)}
building new item: additive_expression -> multiplicative_expression . {+}
building new item: additive_expression -> multiplicative_expression . {-}
building new item: additive_expression -> multiplicative_expression . {LEFT_OP}
building new item: additive_expression -> multiplicative_expression . {RIGHT_OP}
building new item: additive_expression -> multiplicative_expression . {<}
building new item: additive_expression -> multiplicative_expression . {>}
building new item: additive_expression -> multiplicative_expression . {LE_OP}
building new item: additive_expression -> multiplicative_expression . {GE_OP}
building new item: additive_expression -> multiplicative_expression . {EQ_OP}
building new item: additive_expression -> multiplicative_expression . {NE_OP}
building new item: additive_expression -> multiplicative_expression . {&}
building new item: additive_expression -> multiplicative_expression . {^}
building new item: additive_expression -> multiplicative_expression . {|}
building new item: additive_expression -> multiplicative_expression . {AND_OP}
building new item: additive_expression -> multiplicative_expression . {OR_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {?}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {?}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {?}
building new item: additive_expression -> multiplicative_expression . {,}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {*}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {*}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {*}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {/}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {/}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {/}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {%}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {%}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {%}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {+}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {+}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {+}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {-}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {-}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {-}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {LEFT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {LEFT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {LEFT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {RIGHT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {RIGHT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {RIGHT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {<}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {<}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {<}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {>}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {>}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {>}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {LE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {LE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {LE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {GE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {GE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {GE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {EQ_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {EQ_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {EQ_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {NE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {NE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {NE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {&}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {&}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {&}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {^}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {^}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {^}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {|}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {|}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {|}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {AND_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {AND_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {AND_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {OR_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {OR_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {OR_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {,}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {,}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {,}
closure post reduce
LOOP: 98, token: ,, token_value: ,
[verbose dump (every loop)]
parser state:
current token: ,, value: ,
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [multiplicative_expression,multiplicative_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    additive_expression -> multiplicative_expression . {)}
    additive_expression -> multiplicative_expression . {?}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {)}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {)}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {)}
    additive_expression -> multiplicative_expression . {+}
    additive_expression -> multiplicative_expression . {-}
    additive_expression -> multiplicative_expression . {LEFT_OP}
    additive_expression -> multiplicative_expression . {RIGHT_OP}
    additive_expression -> multiplicative_expression . {<}
    additive_expression -> multiplicative_expression . {>}
    additive_expression -> multiplicative_expression . {LE_OP}
    additive_expression -> multiplicative_expression . {GE_OP}
    additive_expression -> multiplicative_expression . {EQ_OP}
    additive_expression -> multiplicative_expression . {NE_OP}
    additive_expression -> multiplicative_expression . {&}
    additive_expression -> multiplicative_expression . {^}
    additive_expression -> multiplicative_expression . {|}
    additive_expression -> multiplicative_expression . {AND_OP}
    additive_expression -> multiplicative_expression . {OR_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {?}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {?}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {?}
    additive_expression -> multiplicative_expression . {,}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {*}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {*}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {*}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {/}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {/}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {/}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {%}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {%}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {%}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {+}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {+}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {+}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {-}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {-}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {-}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {LEFT_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {LEFT_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {LEFT_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {RIGHT_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {RIGHT_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {RIGHT_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {<}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {<}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {<}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {>}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {>}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {>}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {LE_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {LE_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {LE_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {GE_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {GE_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {GE_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {EQ_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {EQ_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {EQ_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {NE_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {NE_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {NE_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {&}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {&}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {&}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {^}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {^}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {^}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {|}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {|}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {|}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {AND_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {AND_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {AND_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {OR_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {OR_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {OR_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {,}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {,}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {,}
check: reduce additive_expression -> multiplicative_expression . {,}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: additive_expression -> multiplicative_expression . {)}
trying to reduce by: additive_expression -> multiplicative_expression . {?}
trying to reduce by: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {)}
trying to reduce by: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {)}
trying to reduce by: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {)}
trying to reduce by: additive_expression -> multiplicative_expression . {+}
trying to reduce by: additive_expression -> multiplicative_expression . {-}
trying to reduce by: additive_expression -> multiplicative_expression . {LEFT_OP}
trying to reduce by: additive_expression -> multiplicative_expression . {RIGHT_OP}
trying to reduce by: additive_expression -> multiplicative_expression . {<}
trying to reduce by: additive_expression -> multiplicative_expression . {>}
trying to reduce by: additive_expression -> multiplicative_expression . {LE_OP}
trying to reduce by: additive_expression -> multiplicative_expression . {GE_OP}
trying to reduce by: additive_expression -> multiplicative_expression . {EQ_OP}
trying to reduce by: additive_expression -> multiplicative_expression . {NE_OP}
trying to reduce by: additive_expression -> multiplicative_expression . {&}
trying to reduce by: additive_expression -> multiplicative_expression . {^}
trying to reduce by: additive_expression -> multiplicative_expression . {|}
trying to reduce by: additive_expression -> multiplicative_expression . {AND_OP}
trying to reduce by: additive_expression -> multiplicative_expression . {OR_OP}
trying to reduce by: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {?}
trying to reduce by: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {?}
trying to reduce by: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {?}
trying to reduce by: additive_expression -> multiplicative_expression . {,}
reduce: additive_expression -> "%d!\n" 
reduce item: additive_expression -> multiplicative_expression . {,}
building new item: shift_expression -> additive_expression . {)}
building new item: shift_expression -> additive_expression . {?}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {)}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {)}
building new item: shift_expression -> additive_expression . {LEFT_OP}
building new item: shift_expression -> additive_expression . {RIGHT_OP}
building new item: shift_expression -> additive_expression . {<}
building new item: shift_expression -> additive_expression . {>}
building new item: shift_expression -> additive_expression . {LE_OP}
building new item: shift_expression -> additive_expression . {GE_OP}
building new item: shift_expression -> additive_expression . {EQ_OP}
building new item: shift_expression -> additive_expression . {NE_OP}
building new item: shift_expression -> additive_expression . {&}
building new item: shift_expression -> additive_expression . {^}
building new item: shift_expression -> additive_expression . {|}
building new item: shift_expression -> additive_expression . {AND_OP}
building new item: shift_expression -> additive_expression . {OR_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {?}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {?}
building new item: shift_expression -> additive_expression . {,}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {+}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {+}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {-}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {-}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {LEFT_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {LEFT_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {RIGHT_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {RIGHT_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {<}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {<}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {>}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {>}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {LE_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {LE_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {GE_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {GE_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {EQ_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {EQ_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {NE_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {NE_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {&}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {&}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {^}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {^}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {|}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {|}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {AND_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {AND_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {OR_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {OR_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {,}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {,}
closure post reduce
LOOP: 99, token: ,, token_value: ,
[verbose dump (every loop)]
parser state:
current token: ,, value: ,
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [additive_expression,additive_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    shift_expression -> additive_expression . {)}
    shift_expression -> additive_expression . {?}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {)}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {)}
    shift_expression -> additive_expression . {LEFT_OP}
    shift_expression -> additive_expression . {RIGHT_OP}
    shift_expression -> additive_expression . {<}
    shift_expression -> additive_expression . {>}
    shift_expression -> additive_expression . {LE_OP}
    shift_expression -> additive_expression . {GE_OP}
    shift_expression -> additive_expression . {EQ_OP}
    shift_expression -> additive_expression . {NE_OP}
    shift_expression -> additive_expression . {&}
    shift_expression -> additive_expression . {^}
    shift_expression -> additive_expression . {|}
    shift_expression -> additive_expression . {AND_OP}
    shift_expression -> additive_expression . {OR_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {?}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {?}
    shift_expression -> additive_expression . {,}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {+}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {+}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {-}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {-}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {LEFT_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {LEFT_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {RIGHT_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {RIGHT_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {<}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {<}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {>}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {>}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {LE_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {LE_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {GE_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {GE_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {EQ_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {EQ_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {NE_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {NE_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {&}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {&}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {^}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {^}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {|}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {|}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {AND_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {AND_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {OR_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {OR_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {,}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {,}
check: reduce shift_expression -> additive_expression . {,}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: shift_expression -> additive_expression . {)}
trying to reduce by: shift_expression -> additive_expression . {?}
trying to reduce by: additive_expression -> additive_expression . [+,+] multiplicative_expression {)}
trying to reduce by: additive_expression -> additive_expression . [-,-] multiplicative_expression {)}
trying to reduce by: shift_expression -> additive_expression . {LEFT_OP}
trying to reduce by: shift_expression -> additive_expression . {RIGHT_OP}
trying to reduce by: shift_expression -> additive_expression . {<}
trying to reduce by: shift_expression -> additive_expression . {>}
trying to reduce by: shift_expression -> additive_expression . {LE_OP}
trying to reduce by: shift_expression -> additive_expression . {GE_OP}
trying to reduce by: shift_expression -> additive_expression . {EQ_OP}
trying to reduce by: shift_expression -> additive_expression . {NE_OP}
trying to reduce by: shift_expression -> additive_expression . {&}
trying to reduce by: shift_expression -> additive_expression . {^}
trying to reduce by: shift_expression -> additive_expression . {|}
trying to reduce by: shift_expression -> additive_expression . {AND_OP}
trying to reduce by: shift_expression -> additive_expression . {OR_OP}
trying to reduce by: additive_expression -> additive_expression . [+,+] multiplicative_expression {?}
trying to reduce by: additive_expression -> additive_expression . [-,-] multiplicative_expression {?}
trying to reduce by: shift_expression -> additive_expression . {,}
reduce: shift_expression -> "%d!\n" 
reduce item: shift_expression -> additive_expression . {,}
building new item: relational_expression -> shift_expression . {)}
building new item: relational_expression -> shift_expression . {?}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {)}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {)}
building new item: relational_expression -> shift_expression . {<}
building new item: relational_expression -> shift_expression . {>}
building new item: relational_expression -> shift_expression . {LE_OP}
building new item: relational_expression -> shift_expression . {GE_OP}
building new item: relational_expression -> shift_expression . {EQ_OP}
building new item: relational_expression -> shift_expression . {NE_OP}
building new item: relational_expression -> shift_expression . {&}
building new item: relational_expression -> shift_expression . {^}
building new item: relational_expression -> shift_expression . {|}
building new item: relational_expression -> shift_expression . {AND_OP}
building new item: relational_expression -> shift_expression . {OR_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {?}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {?}
building new item: relational_expression -> shift_expression . {,}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {LEFT_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {LEFT_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {RIGHT_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {RIGHT_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {<}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {<}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {>}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {>}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {LE_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {LE_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {GE_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {GE_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {EQ_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {EQ_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {NE_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {NE_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {&}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {&}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {^}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {^}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {|}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {|}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {AND_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {AND_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {OR_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {OR_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {,}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {,}
closure post reduce
LOOP: 100, token: ,, token_value: ,
[verbose dump (every loop)]
parser state:
current token: ,, value: ,
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [shift_expression,shift_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    relational_expression -> shift_expression . {)}
    relational_expression -> shift_expression . {?}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {)}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {)}
    relational_expression -> shift_expression . {<}
    relational_expression -> shift_expression . {>}
    relational_expression -> shift_expression . {LE_OP}
    relational_expression -> shift_expression . {GE_OP}
    relational_expression -> shift_expression . {EQ_OP}
    relational_expression -> shift_expression . {NE_OP}
    relational_expression -> shift_expression . {&}
    relational_expression -> shift_expression . {^}
    relational_expression -> shift_expression . {|}
    relational_expression -> shift_expression . {AND_OP}
    relational_expression -> shift_expression . {OR_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {?}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {?}
    relational_expression -> shift_expression . {,}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {LEFT_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {LEFT_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {RIGHT_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {RIGHT_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {<}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {<}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {>}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {>}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {LE_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {LE_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {GE_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {GE_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {EQ_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {EQ_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {NE_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {NE_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {&}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {&}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {^}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {^}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {|}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {|}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {AND_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {AND_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {OR_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {OR_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {,}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {,}
check: reduce relational_expression -> shift_expression . {,}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: relational_expression -> shift_expression . {)}
trying to reduce by: relational_expression -> shift_expression . {?}
trying to reduce by: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {)}
trying to reduce by: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {)}
trying to reduce by: relational_expression -> shift_expression . {<}
trying to reduce by: relational_expression -> shift_expression . {>}
trying to reduce by: relational_expression -> shift_expression . {LE_OP}
trying to reduce by: relational_expression -> shift_expression . {GE_OP}
trying to reduce by: relational_expression -> shift_expression . {EQ_OP}
trying to reduce by: relational_expression -> shift_expression . {NE_OP}
trying to reduce by: relational_expression -> shift_expression . {&}
trying to reduce by: relational_expression -> shift_expression . {^}
trying to reduce by: relational_expression -> shift_expression . {|}
trying to reduce by: relational_expression -> shift_expression . {AND_OP}
trying to reduce by: relational_expression -> shift_expression . {OR_OP}
trying to reduce by: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {?}
trying to reduce by: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {?}
trying to reduce by: relational_expression -> shift_expression . {,}
reduce: relational_expression -> "%d!\n" 
reduce item: relational_expression -> shift_expression . {,}
building new item: equality_expression -> relational_expression . {)}
building new item: equality_expression -> relational_expression . {?}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {)}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {)}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {)}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {)}
building new item: equality_expression -> relational_expression . {EQ_OP}
building new item: equality_expression -> relational_expression . {NE_OP}
building new item: equality_expression -> relational_expression . {&}
building new item: equality_expression -> relational_expression . {^}
building new item: equality_expression -> relational_expression . {|}
building new item: equality_expression -> relational_expression . {AND_OP}
building new item: equality_expression -> relational_expression . {OR_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {?}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {?}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {?}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {?}
building new item: equality_expression -> relational_expression . {,}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {<}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {<}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {<}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {<}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {>}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {>}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {>}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {>}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {LE_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {LE_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {LE_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {LE_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {GE_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {GE_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {GE_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {GE_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {EQ_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {EQ_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {EQ_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {EQ_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {NE_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {NE_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {NE_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {NE_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {&}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {&}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {&}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {&}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {^}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {^}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {^}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {^}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {|}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {|}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {|}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {|}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {AND_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {AND_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {AND_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {AND_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {OR_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {OR_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {OR_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {OR_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {,}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {,}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {,}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {,}
closure post reduce
LOOP: 101, token: ,, token_value: ,
[verbose dump (every loop)]
parser state:
current token: ,, value: ,
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [relational_expression,relational_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    equality_expression -> relational_expression . {)}
    equality_expression -> relational_expression . {?}
    relational_expression -> relational_expression . [<,<] shift_expression {)}
    relational_expression -> relational_expression . [>,>] shift_expression {)}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {)}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {)}
    equality_expression -> relational_expression . {EQ_OP}
    equality_expression -> relational_expression . {NE_OP}
    equality_expression -> relational_expression . {&}
    equality_expression -> relational_expression . {^}
    equality_expression -> relational_expression . {|}
    equality_expression -> relational_expression . {AND_OP}
    equality_expression -> relational_expression . {OR_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {?}
    relational_expression -> relational_expression . [>,>] shift_expression {?}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {?}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {?}
    equality_expression -> relational_expression . {,}
    relational_expression -> relational_expression . [<,<] shift_expression {<}
    relational_expression -> relational_expression . [>,>] shift_expression {<}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {<}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {<}
    relational_expression -> relational_expression . [<,<] shift_expression {>}
    relational_expression -> relational_expression . [>,>] shift_expression {>}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {>}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {>}
    relational_expression -> relational_expression . [<,<] shift_expression {LE_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {LE_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {LE_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {LE_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {GE_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {GE_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {GE_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {GE_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {EQ_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {EQ_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {EQ_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {EQ_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {NE_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {NE_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {NE_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {NE_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {&}
    relational_expression -> relational_expression . [>,>] shift_expression {&}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {&}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {&}
    relational_expression -> relational_expression . [<,<] shift_expression {^}
    relational_expression -> relational_expression . [>,>] shift_expression {^}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {^}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {^}
    relational_expression -> relational_expression . [<,<] shift_expression {|}
    relational_expression -> relational_expression . [>,>] shift_expression {|}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {|}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {|}
    relational_expression -> relational_expression . [<,<] shift_expression {AND_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {AND_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {AND_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {AND_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {OR_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {OR_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {OR_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {OR_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {,}
    relational_expression -> relational_expression . [>,>] shift_expression {,}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {,}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {,}
check: reduce equality_expression -> relational_expression . {,}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: equality_expression -> relational_expression . {)}
trying to reduce by: equality_expression -> relational_expression . {?}
trying to reduce by: relational_expression -> relational_expression . [<,<] shift_expression {)}
trying to reduce by: relational_expression -> relational_expression . [>,>] shift_expression {)}
trying to reduce by: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {)}
trying to reduce by: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {)}
trying to reduce by: equality_expression -> relational_expression . {EQ_OP}
trying to reduce by: equality_expression -> relational_expression . {NE_OP}
trying to reduce by: equality_expression -> relational_expression . {&}
trying to reduce by: equality_expression -> relational_expression . {^}
trying to reduce by: equality_expression -> relational_expression . {|}
trying to reduce by: equality_expression -> relational_expression . {AND_OP}
trying to reduce by: equality_expression -> relational_expression . {OR_OP}
trying to reduce by: relational_expression -> relational_expression . [<,<] shift_expression {?}
trying to reduce by: relational_expression -> relational_expression . [>,>] shift_expression {?}
trying to reduce by: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {?}
trying to reduce by: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {?}
trying to reduce by: equality_expression -> relational_expression . {,}
reduce: equality_expression -> "%d!\n" 
reduce item: equality_expression -> relational_expression . {,}
building new item: and_expression -> equality_expression . {)}
building new item: and_expression -> equality_expression . {?}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {)}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {)}
building new item: and_expression -> equality_expression . {&}
building new item: and_expression -> equality_expression . {^}
building new item: and_expression -> equality_expression . {|}
building new item: and_expression -> equality_expression . {AND_OP}
building new item: and_expression -> equality_expression . {OR_OP}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {?}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {?}
building new item: and_expression -> equality_expression . {,}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {EQ_OP}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {EQ_OP}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {NE_OP}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {NE_OP}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {&}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {&}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {^}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {^}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {|}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {|}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {AND_OP}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {AND_OP}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {OR_OP}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {OR_OP}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {,}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {,}
closure post reduce
LOOP: 102, token: ,, token_value: ,
[verbose dump (every loop)]
parser state:
current token: ,, value: ,
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [equality_expression,equality_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    and_expression -> equality_expression . {)}
    and_expression -> equality_expression . {?}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {)}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {)}
    and_expression -> equality_expression . {&}
    and_expression -> equality_expression . {^}
    and_expression -> equality_expression . {|}
    and_expression -> equality_expression . {AND_OP}
    and_expression -> equality_expression . {OR_OP}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {?}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {?}
    and_expression -> equality_expression . {,}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {EQ_OP}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {EQ_OP}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {NE_OP}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {NE_OP}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {&}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {&}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {^}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {^}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {|}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {|}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {AND_OP}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {AND_OP}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {OR_OP}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {OR_OP}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {,}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {,}
check: reduce and_expression -> equality_expression . {,}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: and_expression -> equality_expression . {)}
trying to reduce by: and_expression -> equality_expression . {?}
trying to reduce by: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {)}
trying to reduce by: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {)}
trying to reduce by: and_expression -> equality_expression . {&}
trying to reduce by: and_expression -> equality_expression . {^}
trying to reduce by: and_expression -> equality_expression . {|}
trying to reduce by: and_expression -> equality_expression . {AND_OP}
trying to reduce by: and_expression -> equality_expression . {OR_OP}
trying to reduce by: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {?}
trying to reduce by: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {?}
trying to reduce by: and_expression -> equality_expression . {,}
reduce: and_expression -> "%d!\n" 
reduce item: and_expression -> equality_expression . {,}
building new item: exclusive_or_expression -> and_expression . {)}
building new item: exclusive_or_expression -> and_expression . {?}
building new item: and_expression -> and_expression . [&,&] equality_expression {)}
building new item: exclusive_or_expression -> and_expression . {^}
building new item: exclusive_or_expression -> and_expression . {|}
building new item: exclusive_or_expression -> and_expression . {AND_OP}
building new item: exclusive_or_expression -> and_expression . {OR_OP}
building new item: and_expression -> and_expression . [&,&] equality_expression {?}
building new item: exclusive_or_expression -> and_expression . {,}
building new item: and_expression -> and_expression . [&,&] equality_expression {&}
building new item: and_expression -> and_expression . [&,&] equality_expression {^}
building new item: and_expression -> and_expression . [&,&] equality_expression {|}
building new item: and_expression -> and_expression . [&,&] equality_expression {AND_OP}
building new item: and_expression -> and_expression . [&,&] equality_expression {OR_OP}
building new item: and_expression -> and_expression . [&,&] equality_expression {,}
closure post reduce
LOOP: 103, token: ,, token_value: ,
[verbose dump (every loop)]
parser state:
current token: ,, value: ,
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [and_expression,and_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    exclusive_or_expression -> and_expression . {)}
    exclusive_or_expression -> and_expression . {?}
    and_expression -> and_expression . [&,&] equality_expression {)}
    exclusive_or_expression -> and_expression . {^}
    exclusive_or_expression -> and_expression . {|}
    exclusive_or_expression -> and_expression . {AND_OP}
    exclusive_or_expression -> and_expression . {OR_OP}
    and_expression -> and_expression . [&,&] equality_expression {?}
    exclusive_or_expression -> and_expression . {,}
    and_expression -> and_expression . [&,&] equality_expression {&}
    and_expression -> and_expression . [&,&] equality_expression {^}
    and_expression -> and_expression . [&,&] equality_expression {|}
    and_expression -> and_expression . [&,&] equality_expression {AND_OP}
    and_expression -> and_expression . [&,&] equality_expression {OR_OP}
    and_expression -> and_expression . [&,&] equality_expression {,}
check: reduce exclusive_or_expression -> and_expression . {,}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: exclusive_or_expression -> and_expression . {)}
trying to reduce by: exclusive_or_expression -> and_expression . {?}
trying to reduce by: and_expression -> and_expression . [&,&] equality_expression {)}
trying to reduce by: exclusive_or_expression -> and_expression . {^}
trying to reduce by: exclusive_or_expression -> and_expression . {|}
trying to reduce by: exclusive_or_expression -> and_expression . {AND_OP}
trying to reduce by: exclusive_or_expression -> and_expression . {OR_OP}
trying to reduce by: and_expression -> and_expression . [&,&] equality_expression {?}
trying to reduce by: exclusive_or_expression -> and_expression . {,}
reduce: exclusive_or_expression -> "%d!\n" 
reduce item: exclusive_or_expression -> and_expression . {,}
building new item: inclusive_or_expression -> exclusive_or_expression . {)}
building new item: inclusive_or_expression -> exclusive_or_expression . {?}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {)}
building new item: inclusive_or_expression -> exclusive_or_expression . {|}
building new item: inclusive_or_expression -> exclusive_or_expression . {AND_OP}
building new item: inclusive_or_expression -> exclusive_or_expression . {OR_OP}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {?}
building new item: inclusive_or_expression -> exclusive_or_expression . {,}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {^}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {|}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {AND_OP}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {OR_OP}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {,}
closure post reduce
LOOP: 104, token: ,, token_value: ,
[verbose dump (every loop)]
parser state:
current token: ,, value: ,
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [exclusive_or_expression,exclusive_or_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    inclusive_or_expression -> exclusive_or_expression . {)}
    inclusive_or_expression -> exclusive_or_expression . {?}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {)}
    inclusive_or_expression -> exclusive_or_expression . {|}
    inclusive_or_expression -> exclusive_or_expression . {AND_OP}
    inclusive_or_expression -> exclusive_or_expression . {OR_OP}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {?}
    inclusive_or_expression -> exclusive_or_expression . {,}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {^}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {|}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {AND_OP}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {OR_OP}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {,}
check: reduce inclusive_or_expression -> exclusive_or_expression . {,}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: inclusive_or_expression -> exclusive_or_expression . {)}
trying to reduce by: inclusive_or_expression -> exclusive_or_expression . {?}
trying to reduce by: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {)}
trying to reduce by: inclusive_or_expression -> exclusive_or_expression . {|}
trying to reduce by: inclusive_or_expression -> exclusive_or_expression . {AND_OP}
trying to reduce by: inclusive_or_expression -> exclusive_or_expression . {OR_OP}
trying to reduce by: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {?}
trying to reduce by: inclusive_or_expression -> exclusive_or_expression . {,}
reduce: inclusive_or_expression -> "%d!\n" 
reduce item: inclusive_or_expression -> exclusive_or_expression . {,}
building new item: logical_and_expression -> inclusive_or_expression . {)}
building new item: logical_and_expression -> inclusive_or_expression . {?}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {)}
building new item: logical_and_expression -> inclusive_or_expression . {AND_OP}
building new item: logical_and_expression -> inclusive_or_expression . {OR_OP}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {?}
building new item: logical_and_expression -> inclusive_or_expression . {,}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {|}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {AND_OP}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {OR_OP}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {,}
closure post reduce
LOOP: 105, token: ,, token_value: ,
[verbose dump (every loop)]
parser state:
current token: ,, value: ,
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [inclusive_or_expression,inclusive_or_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    logical_and_expression -> inclusive_or_expression . {)}
    logical_and_expression -> inclusive_or_expression . {?}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {)}
    logical_and_expression -> inclusive_or_expression . {AND_OP}
    logical_and_expression -> inclusive_or_expression . {OR_OP}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {?}
    logical_and_expression -> inclusive_or_expression . {,}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {|}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {AND_OP}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {OR_OP}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {,}
check: reduce logical_and_expression -> inclusive_or_expression . {,}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: logical_and_expression -> inclusive_or_expression . {)}
trying to reduce by: logical_and_expression -> inclusive_or_expression . {?}
trying to reduce by: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {)}
trying to reduce by: logical_and_expression -> inclusive_or_expression . {AND_OP}
trying to reduce by: logical_and_expression -> inclusive_or_expression . {OR_OP}
trying to reduce by: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {?}
trying to reduce by: logical_and_expression -> inclusive_or_expression . {,}
reduce: logical_and_expression -> "%d!\n" 
reduce item: logical_and_expression -> inclusive_or_expression . {,}
building new item: logical_or_expression -> logical_and_expression . {)}
building new item: logical_or_expression -> logical_and_expression . {?}
building new item: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {)}
building new item: logical_or_expression -> logical_and_expression . {OR_OP}
building new item: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {?}
building new item: logical_or_expression -> logical_and_expression . {,}
building new item: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {AND_OP}
building new item: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {OR_OP}
building new item: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {,}
closure post reduce
LOOP: 106, token: ,, token_value: ,
[verbose dump (every loop)]
parser state:
current token: ,, value: ,
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [logical_and_expression,logical_and_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    logical_or_expression -> logical_and_expression . {)}
    logical_or_expression -> logical_and_expression . {?}
    logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {)}
    logical_or_expression -> logical_and_expression . {OR_OP}
    logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {?}
    logical_or_expression -> logical_and_expression . {,}
    logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {AND_OP}
    logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {OR_OP}
    logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {,}
check: reduce logical_or_expression -> logical_and_expression . {,}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: logical_or_expression -> logical_and_expression . {)}
trying to reduce by: logical_or_expression -> logical_and_expression . {?}
trying to reduce by: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {)}
trying to reduce by: logical_or_expression -> logical_and_expression . {OR_OP}
trying to reduce by: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {?}
trying to reduce by: logical_or_expression -> logical_and_expression . {,}
reduce: logical_or_expression -> "%d!\n" 
reduce item: logical_or_expression -> logical_and_expression . {,}
building new item: conditional_expression -> logical_or_expression . {)}
building new item: conditional_expression -> logical_or_expression . [?,?] expression [:,:] conditional_expression {)}
building new item: logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {)}
building new item: logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {?}
building new item: conditional_expression -> logical_or_expression . {,}
building new item: conditional_expression -> logical_or_expression . [?,?] expression [:,:] conditional_expression {,}
building new item: logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {OR_OP}
building new item: logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {,}
closure post reduce
LOOP: 107, token: ,, token_value: ,
[verbose dump (every loop)]
parser state:
current token: ,, value: ,
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [logical_or_expression,logical_or_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    conditional_expression -> logical_or_expression . {)}
    conditional_expression -> logical_or_expression . [?,?] expression [:,:] conditional_expression {)}
    logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {)}
    logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {?}
    conditional_expression -> logical_or_expression . {,}
    conditional_expression -> logical_or_expression . [?,?] expression [:,:] conditional_expression {,}
    logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {OR_OP}
    logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {,}
check: reduce conditional_expression -> logical_or_expression . {,}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: conditional_expression -> logical_or_expression . {)}
trying to reduce by: conditional_expression -> logical_or_expression . [?,?] expression [:,:] conditional_expression {)}
trying to reduce by: logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {)}
trying to reduce by: logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {?}
trying to reduce by: conditional_expression -> logical_or_expression . {,}
reduce: conditional_expression -> "%d!\n" 
reduce item: conditional_expression -> logical_or_expression . {,}
building new item: assignment_expression -> conditional_expression . {)}
building new item: assignment_expression -> conditional_expression . {,}
closure post reduce
LOOP: 108, token: ,, token_value: ,
[verbose dump (every loop)]
parser state:
current token: ,, value: ,
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [conditional_expression,conditional_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    assignment_expression -> conditional_expression . {)}
    assignment_expression -> conditional_expression . {,}
check: reduce assignment_expression -> conditional_expression . {,}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: assignment_expression -> conditional_expression . {)}
trying to reduce by: assignment_expression -> conditional_expression . {,}
reduce: assignment_expression -> "%d!\n" 
reduce item: assignment_expression -> conditional_expression . {,}
building new item: argument_expression_list -> assignment_expression . {)}
building new item: argument_expression_list -> assignment_expression . {,}
closure post reduce
LOOP: 109, token: ,, token_value: ,
[verbose dump (every loop)]
parser state:
current token: ,, value: ,
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [assignment_expression,assignment_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    argument_expression_list -> assignment_expression . {)}
    argument_expression_list -> assignment_expression . {,}
check: reduce argument_expression_list -> assignment_expression . {,}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: argument_expression_list -> assignment_expression . {)}
trying to reduce by: argument_expression_list -> assignment_expression . {,}
reduce: argument_expression_list -> "%d!\n" 
reduce item: argument_expression_list -> assignment_expression . {,}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {=}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {[}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {(}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {.}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {PTR_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {INC_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {DEC_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {;}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {?}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {*}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {/}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {%}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {+}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {-}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {LEFT_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {<}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {>}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {LE_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {GE_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {EQ_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {NE_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {&}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {^}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {|}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {AND_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {OR_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {,}
building new item: argument_expression_list -> argument_expression_list . [,,,] assignment_expression {)}
building new item: argument_expression_list -> argument_expression_list . [,,,] assignment_expression {,}
closure post reduce
LOOP: 110, token: ,, token_value: ,
[verbose dump (every loop)]
parser state:
current token: ,, value: ,
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {=}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {ADD_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {AND_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {DIV_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {MOD_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {MUL_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {OR_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {SUB_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {XOR_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {[}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {(}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {.}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {PTR_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {INC_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {DEC_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {;}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {?}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {*}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {/}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {%}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {+}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {-}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {LEFT_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {RIGHT_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {<}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {>}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {LE_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {GE_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {EQ_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {NE_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {&}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {^}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {|}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {AND_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {OR_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {,}
    argument_expression_list -> argument_expression_list . [,,,] assignment_expression {)}
    argument_expression_list -> argument_expression_list . [,,,] assignment_expression {,}
check: shift argument_expression_list -> argument_expression_list . [,,,] assignment_expression {)}
check: shift argument_expression_list -> argument_expression_list . [,,,] assignment_expression {,}
shifts: 2, reduces: 0, accepts: 0
shifting [,,,]
building new item: argument_expression_list -> argument_expression_list [,,,] . assignment_expression {)}
building new item: argument_expression_list -> argument_expression_list [,,,] . assignment_expression {,}
closure post shift
LOOP: 111, token: id, token_value: foo
[verbose dump (every loop)]
parser state:
current token: id, value: foo
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
 state stack (kernel items of top state only):
  state 8
   kernel items:
    argument_expression_list -> argument_expression_list [,,,] . assignment_expression {)}
    argument_expression_list -> argument_expression_list [,,,] . assignment_expression {,}
check: shift primary_expression -> . [id,id] {=}
check: shift primary_expression -> . [id,id] {ADD_ASSIGN}
check: shift primary_expression -> . [id,id] {AND_ASSIGN}
check: shift primary_expression -> . [id,id] {DIV_ASSIGN}
check: shift primary_expression -> . [id,id] {LEFT_ASSIGN}
check: shift primary_expression -> . [id,id] {MOD_ASSIGN}
check: shift primary_expression -> . [id,id] {MUL_ASSIGN}
check: shift primary_expression -> . [id,id] {OR_ASSIGN}
check: shift primary_expression -> . [id,id] {RIGHT_ASSIGN}
check: shift primary_expression -> . [id,id] {SUB_ASSIGN}
check: shift primary_expression -> . [id,id] {XOR_ASSIGN}
check: shift primary_expression -> . [id,id] {[}
check: shift primary_expression -> . [id,id] {(}
check: shift primary_expression -> . [id,id] {.}
check: shift primary_expression -> . [id,id] {PTR_OP}
check: shift primary_expression -> . [id,id] {INC_OP}
check: shift primary_expression -> . [id,id] {DEC_OP}
check: shift primary_expression -> . [id,id] {)}
check: shift primary_expression -> . [id,id] {?}
check: shift primary_expression -> . [id,id] {,}
check: shift primary_expression -> . [id,id] {*}
check: shift primary_expression -> . [id,id] {/}
check: shift primary_expression -> . [id,id] {%}
check: shift primary_expression -> . [id,id] {+}
check: shift primary_expression -> . [id,id] {-}
check: shift primary_expression -> . [id,id] {LEFT_OP}
check: shift primary_expression -> . [id,id] {RIGHT_OP}
check: shift primary_expression -> . [id,id] {<}
check: shift primary_expression -> . [id,id] {>}
check: shift primary_expression -> . [id,id] {LE_OP}
check: shift primary_expression -> . [id,id] {GE_OP}
check: shift primary_expression -> . [id,id] {EQ_OP}
check: shift primary_expression -> . [id,id] {NE_OP}
check: shift primary_expression -> . [id,id] {&}
check: shift primary_expression -> . [id,id] {^}
check: shift primary_expression -> . [id,id] {|}
check: shift primary_expression -> . [id,id] {AND_OP}
check: shift primary_expression -> . [id,id] {OR_OP}
shifts: 38, reduces: 0, accepts: 0
shifting [id,foo]
building new item: primary_expression -> [id,id] . {=}
building new item: primary_expression -> [id,id] . {ADD_ASSIGN}
building new item: primary_expression -> [id,id] . {AND_ASSIGN}
building new item: primary_expression -> [id,id] . {DIV_ASSIGN}
building new item: primary_expression -> [id,id] . {LEFT_ASSIGN}
building new item: primary_expression -> [id,id] . {MOD_ASSIGN}
building new item: primary_expression -> [id,id] . {MUL_ASSIGN}
building new item: primary_expression -> [id,id] . {OR_ASSIGN}
building new item: primary_expression -> [id,id] . {RIGHT_ASSIGN}
building new item: primary_expression -> [id,id] . {SUB_ASSIGN}
building new item: primary_expression -> [id,id] . {XOR_ASSIGN}
building new item: primary_expression -> [id,id] . {[}
building new item: primary_expression -> [id,id] . {(}
building new item: primary_expression -> [id,id] . {.}
building new item: primary_expression -> [id,id] . {PTR_OP}
building new item: primary_expression -> [id,id] . {INC_OP}
building new item: primary_expression -> [id,id] . {DEC_OP}
building new item: primary_expression -> [id,id] . {)}
building new item: primary_expression -> [id,id] . {?}
building new item: primary_expression -> [id,id] . {,}
building new item: primary_expression -> [id,id] . {*}
building new item: primary_expression -> [id,id] . {/}
building new item: primary_expression -> [id,id] . {%}
building new item: primary_expression -> [id,id] . {+}
building new item: primary_expression -> [id,id] . {-}
building new item: primary_expression -> [id,id] . {LEFT_OP}
building new item: primary_expression -> [id,id] . {RIGHT_OP}
building new item: primary_expression -> [id,id] . {<}
building new item: primary_expression -> [id,id] . {>}
building new item: primary_expression -> [id,id] . {LE_OP}
building new item: primary_expression -> [id,id] . {GE_OP}
building new item: primary_expression -> [id,id] . {EQ_OP}
building new item: primary_expression -> [id,id] . {NE_OP}
building new item: primary_expression -> [id,id] . {&}
building new item: primary_expression -> [id,id] . {^}
building new item: primary_expression -> [id,id] . {|}
building new item: primary_expression -> [id,id] . {AND_OP}
building new item: primary_expression -> [id,id] . {OR_OP}
closure post shift
LOOP: 112, token: (, token_value: (
[verbose dump (every loop)]
parser state:
current token: (, value: (
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [id,foo]
 state stack (kernel items of top state only):
  state 9
   kernel items:
    primary_expression -> [id,id] . {=}
    primary_expression -> [id,id] . {ADD_ASSIGN}
    primary_expression -> [id,id] . {AND_ASSIGN}
    primary_expression -> [id,id] . {DIV_ASSIGN}
    primary_expression -> [id,id] . {LEFT_ASSIGN}
    primary_expression -> [id,id] . {MOD_ASSIGN}
    primary_expression -> [id,id] . {MUL_ASSIGN}
    primary_expression -> [id,id] . {OR_ASSIGN}
    primary_expression -> [id,id] . {RIGHT_ASSIGN}
    primary_expression -> [id,id] . {SUB_ASSIGN}
    primary_expression -> [id,id] . {XOR_ASSIGN}
    primary_expression -> [id,id] . {[}
    primary_expression -> [id,id] . {(}
    primary_expression -> [id,id] . {.}
    primary_expression -> [id,id] . {PTR_OP}
    primary_expression -> [id,id] . {INC_OP}
    primary_expression -> [id,id] . {DEC_OP}
    primary_expression -> [id,id] . {)}
    primary_expression -> [id,id] . {?}
    primary_expression -> [id,id] . {,}
    primary_expression -> [id,id] . {*}
    primary_expression -> [id,id] . {/}
    primary_expression -> [id,id] . {%}
    primary_expression -> [id,id] . {+}
    primary_expression -> [id,id] . {-}
    primary_expression -> [id,id] . {LEFT_OP}
    primary_expression -> [id,id] . {RIGHT_OP}
    primary_expression -> [id,id] . {<}
    primary_expression -> [id,id] . {>}
    primary_expression -> [id,id] . {LE_OP}
    primary_expression -> [id,id] . {GE_OP}
    primary_expression -> [id,id] . {EQ_OP}
    primary_expression -> [id,id] . {NE_OP}
    primary_expression -> [id,id] . {&}
    primary_expression -> [id,id] . {^}
    primary_expression -> [id,id] . {|}
    primary_expression -> [id,id] . {AND_OP}
    primary_expression -> [id,id] . {OR_OP}
check: reduce primary_expression -> [id,id] . {(}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: primary_expression -> [id,id] . {=}
trying to reduce by: primary_expression -> [id,id] . {ADD_ASSIGN}
trying to reduce by: primary_expression -> [id,id] . {AND_ASSIGN}
trying to reduce by: primary_expression -> [id,id] . {DIV_ASSIGN}
trying to reduce by: primary_expression -> [id,id] . {LEFT_ASSIGN}
trying to reduce by: primary_expression -> [id,id] . {MOD_ASSIGN}
trying to reduce by: primary_expression -> [id,id] . {MUL_ASSIGN}
trying to reduce by: primary_expression -> [id,id] . {OR_ASSIGN}
trying to reduce by: primary_expression -> [id,id] . {RIGHT_ASSIGN}
trying to reduce by: primary_expression -> [id,id] . {SUB_ASSIGN}
trying to reduce by: primary_expression -> [id,id] . {XOR_ASSIGN}
trying to reduce by: primary_expression -> [id,id] . {[}
trying to reduce by: primary_expression -> [id,id] . {(}
reduce: primary_expression -> foo 
reduce item: primary_expression -> [id,id] . {(}
building new item: postfix_expression -> primary_expression . {=}
building new item: postfix_expression -> primary_expression . {ADD_ASSIGN}
building new item: postfix_expression -> primary_expression . {AND_ASSIGN}
building new item: postfix_expression -> primary_expression . {DIV_ASSIGN}
building new item: postfix_expression -> primary_expression . {LEFT_ASSIGN}
building new item: postfix_expression -> primary_expression . {MOD_ASSIGN}
building new item: postfix_expression -> primary_expression . {MUL_ASSIGN}
building new item: postfix_expression -> primary_expression . {OR_ASSIGN}
building new item: postfix_expression -> primary_expression . {RIGHT_ASSIGN}
building new item: postfix_expression -> primary_expression . {SUB_ASSIGN}
building new item: postfix_expression -> primary_expression . {XOR_ASSIGN}
building new item: postfix_expression -> primary_expression . {[}
building new item: postfix_expression -> primary_expression . {(}
building new item: postfix_expression -> primary_expression . {.}
building new item: postfix_expression -> primary_expression . {PTR_OP}
building new item: postfix_expression -> primary_expression . {INC_OP}
building new item: postfix_expression -> primary_expression . {DEC_OP}
building new item: postfix_expression -> primary_expression . {)}
building new item: postfix_expression -> primary_expression . {?}
building new item: postfix_expression -> primary_expression . {,}
building new item: postfix_expression -> primary_expression . {*}
building new item: postfix_expression -> primary_expression . {/}
building new item: postfix_expression -> primary_expression . {%}
building new item: postfix_expression -> primary_expression . {+}
building new item: postfix_expression -> primary_expression . {-}
building new item: postfix_expression -> primary_expression . {LEFT_OP}
building new item: postfix_expression -> primary_expression . {RIGHT_OP}
building new item: postfix_expression -> primary_expression . {<}
building new item: postfix_expression -> primary_expression . {>}
building new item: postfix_expression -> primary_expression . {LE_OP}
building new item: postfix_expression -> primary_expression . {GE_OP}
building new item: postfix_expression -> primary_expression . {EQ_OP}
building new item: postfix_expression -> primary_expression . {NE_OP}
building new item: postfix_expression -> primary_expression . {&}
building new item: postfix_expression -> primary_expression . {^}
building new item: postfix_expression -> primary_expression . {|}
building new item: postfix_expression -> primary_expression . {AND_OP}
building new item: postfix_expression -> primary_expression . {OR_OP}
closure post reduce
LOOP: 113, token: (, token_value: (
[verbose dump (every loop)]
parser state:
current token: (, value: (
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [primary_expression,primary_expression]
 state stack (kernel items of top state only):
  state 9
   kernel items:
    postfix_expression -> primary_expression . {=}
    postfix_expression -> primary_expression . {ADD_ASSIGN}
    postfix_expression -> primary_expression . {AND_ASSIGN}
    postfix_expression -> primary_expression . {DIV_ASSIGN}
    postfix_expression -> primary_expression . {LEFT_ASSIGN}
    postfix_expression -> primary_expression . {MOD_ASSIGN}
    postfix_expression -> primary_expression . {MUL_ASSIGN}
    postfix_expression -> primary_expression . {OR_ASSIGN}
    postfix_expression -> primary_expression . {RIGHT_ASSIGN}
    postfix_expression -> primary_expression . {SUB_ASSIGN}
    postfix_expression -> primary_expression . {XOR_ASSIGN}
    postfix_expression -> primary_expression . {[}
    postfix_expression -> primary_expression . {(}
    postfix_expression -> primary_expression . {.}
    postfix_expression -> primary_expression . {PTR_OP}
    postfix_expression -> primary_expression . {INC_OP}
    postfix_expression -> primary_expression . {DEC_OP}
    postfix_expression -> primary_expression . {)}
    postfix_expression -> primary_expression . {?}
    postfix_expression -> primary_expression . {,}
    postfix_expression -> primary_expression . {*}
    postfix_expression -> primary_expression . {/}
    postfix_expression -> primary_expression . {%}
    postfix_expression -> primary_expression . {+}
    postfix_expression -> primary_expression . {-}
    postfix_expression -> primary_expression . {LEFT_OP}
    postfix_expression -> primary_expression . {RIGHT_OP}
    postfix_expression -> primary_expression . {<}
    postfix_expression -> primary_expression . {>}
    postfix_expression -> primary_expression . {LE_OP}
    postfix_expression -> primary_expression . {GE_OP}
    postfix_expression -> primary_expression . {EQ_OP}
    postfix_expression -> primary_expression . {NE_OP}
    postfix_expression -> primary_expression . {&}
    postfix_expression -> primary_expression . {^}
    postfix_expression -> primary_expression . {|}
    postfix_expression -> primary_expression . {AND_OP}
    postfix_expression -> primary_expression . {OR_OP}
check: reduce postfix_expression -> primary_expression . {(}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: postfix_expression -> primary_expression . {=}
trying to reduce by: postfix_expression -> primary_expression . {ADD_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {AND_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {DIV_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {MOD_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {MUL_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {OR_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {SUB_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {XOR_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {[}
trying to reduce by: postfix_expression -> primary_expression . {(}
reduce: postfix_expression -> foo 
reduce item: postfix_expression -> primary_expression . {(}
building new item: unary_expression -> postfix_expression . {=}
building new item: unary_expression -> postfix_expression . {ADD_ASSIGN}
building new item: unary_expression -> postfix_expression . {AND_ASSIGN}
building new item: unary_expression -> postfix_expression . {DIV_ASSIGN}
building new item: unary_expression -> postfix_expression . {LEFT_ASSIGN}
building new item: unary_expression -> postfix_expression . {MOD_ASSIGN}
building new item: unary_expression -> postfix_expression . {MUL_ASSIGN}
building new item: unary_expression -> postfix_expression . {OR_ASSIGN}
building new item: unary_expression -> postfix_expression . {RIGHT_ASSIGN}
building new item: unary_expression -> postfix_expression . {SUB_ASSIGN}
building new item: unary_expression -> postfix_expression . {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {=}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {=}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {=}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {=}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {=}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {=}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {=}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {[}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {[}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {[}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {[}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {[}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {[}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {[}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {(}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {(}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {(}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {(}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {(}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {(}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {(}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {.}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {.}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {.}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {.}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {.}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {.}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {.}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {INC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {INC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {INC_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {INC_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {INC_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {INC_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {INC_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DEC_OP}
building new item: unary_expression -> postfix_expression . {)}
building new item: unary_expression -> postfix_expression . {?}
building new item: unary_expression -> postfix_expression . {,}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {)}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {)}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {)}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {)}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {)}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {)}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {)}
building new item: unary_expression -> postfix_expression . {*}
building new item: unary_expression -> postfix_expression . {/}
building new item: unary_expression -> postfix_expression . {%}
building new item: unary_expression -> postfix_expression . {+}
building new item: unary_expression -> postfix_expression . {-}
building new item: unary_expression -> postfix_expression . {LEFT_OP}
building new item: unary_expression -> postfix_expression . {RIGHT_OP}
building new item: unary_expression -> postfix_expression . {<}
building new item: unary_expression -> postfix_expression . {>}
building new item: unary_expression -> postfix_expression . {LE_OP}
building new item: unary_expression -> postfix_expression . {GE_OP}
building new item: unary_expression -> postfix_expression . {EQ_OP}
building new item: unary_expression -> postfix_expression . {NE_OP}
building new item: unary_expression -> postfix_expression . {&}
building new item: unary_expression -> postfix_expression . {^}
building new item: unary_expression -> postfix_expression . {|}
building new item: unary_expression -> postfix_expression . {AND_OP}
building new item: unary_expression -> postfix_expression . {OR_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {?}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {?}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {?}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {?}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {?}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {?}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {?}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {,}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {,}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {,}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {,}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {,}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {,}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {,}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {*}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {*}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {*}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {*}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {*}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {*}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {*}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {/}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {/}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {/}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {/}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {/}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {/}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {/}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {%}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {%}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {%}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {%}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {%}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {%}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {%}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {+}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {+}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {+}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {+}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {+}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {+}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {+}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {-}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {-}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {-}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {-}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {-}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {-}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {-}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {<}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {<}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {<}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {<}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {<}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {<}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {<}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {>}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {>}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {>}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {>}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {>}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {>}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {>}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {LE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {LE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LE_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {LE_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LE_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LE_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LE_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {GE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {GE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {GE_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {GE_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {GE_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {GE_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {GE_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {NE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {NE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {NE_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {NE_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {NE_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {NE_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {NE_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {&}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {&}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {&}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {&}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {&}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {&}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {&}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {^}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {^}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {^}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {^}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {^}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {^}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {^}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {|}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {|}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {|}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {|}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {|}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {|}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {|}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {AND_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {AND_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {OR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {OR_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_OP}
closure post reduce
LOOP: 114, token: (, token_value: (
[verbose dump (every loop)]
parser state:
current token: (, value: (
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [postfix_expression,postfix_expression]
 state stack (kernel items of top state only):
  state 9
   kernel items:
    unary_expression -> postfix_expression . {=}
    unary_expression -> postfix_expression . {ADD_ASSIGN}
    unary_expression -> postfix_expression . {AND_ASSIGN}
    unary_expression -> postfix_expression . {DIV_ASSIGN}
    unary_expression -> postfix_expression . {LEFT_ASSIGN}
    unary_expression -> postfix_expression . {MOD_ASSIGN}
    unary_expression -> postfix_expression . {MUL_ASSIGN}
    unary_expression -> postfix_expression . {OR_ASSIGN}
    unary_expression -> postfix_expression . {RIGHT_ASSIGN}
    unary_expression -> postfix_expression . {SUB_ASSIGN}
    unary_expression -> postfix_expression . {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {=}
    postfix_expression -> postfix_expression . [(,(] [),)] {=}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {=}
    postfix_expression -> postfix_expression . [.,.] [id,id] {=}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {=}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {=}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {=}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {[}
    postfix_expression -> postfix_expression . [(,(] [),)] {[}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {[}
    postfix_expression -> postfix_expression . [.,.] [id,id] {[}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {[}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {[}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {[}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {(}
    postfix_expression -> postfix_expression . [(,(] [),)] {(}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {(}
    postfix_expression -> postfix_expression . [.,.] [id,id] {(}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {(}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {(}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {(}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {.}
    postfix_expression -> postfix_expression . [(,(] [),)] {.}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {.}
    postfix_expression -> postfix_expression . [.,.] [id,id] {.}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {.}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {.}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {.}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {PTR_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {PTR_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {PTR_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {PTR_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {PTR_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {PTR_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {PTR_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {INC_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {INC_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {INC_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {INC_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {INC_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {INC_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {INC_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {DEC_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {DEC_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DEC_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {DEC_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DEC_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DEC_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DEC_OP}
    unary_expression -> postfix_expression . {)}
    unary_expression -> postfix_expression . {?}
    unary_expression -> postfix_expression . {,}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {)}
    postfix_expression -> postfix_expression . [(,(] [),)] {)}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {)}
    postfix_expression -> postfix_expression . [.,.] [id,id] {)}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {)}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {)}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {)}
    unary_expression -> postfix_expression . {*}
    unary_expression -> postfix_expression . {/}
    unary_expression -> postfix_expression . {%}
    unary_expression -> postfix_expression . {+}
    unary_expression -> postfix_expression . {-}
    unary_expression -> postfix_expression . {LEFT_OP}
    unary_expression -> postfix_expression . {RIGHT_OP}
    unary_expression -> postfix_expression . {<}
    unary_expression -> postfix_expression . {>}
    unary_expression -> postfix_expression . {LE_OP}
    unary_expression -> postfix_expression . {GE_OP}
    unary_expression -> postfix_expression . {EQ_OP}
    unary_expression -> postfix_expression . {NE_OP}
    unary_expression -> postfix_expression . {&}
    unary_expression -> postfix_expression . {^}
    unary_expression -> postfix_expression . {|}
    unary_expression -> postfix_expression . {AND_OP}
    unary_expression -> postfix_expression . {OR_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {?}
    postfix_expression -> postfix_expression . [(,(] [),)] {?}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {?}
    postfix_expression -> postfix_expression . [.,.] [id,id] {?}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {?}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {?}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {?}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {,}
    postfix_expression -> postfix_expression . [(,(] [),)] {,}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {,}
    postfix_expression -> postfix_expression . [.,.] [id,id] {,}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {,}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {,}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {,}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {*}
    postfix_expression -> postfix_expression . [(,(] [),)] {*}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {*}
    postfix_expression -> postfix_expression . [.,.] [id,id] {*}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {*}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {*}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {*}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {/}
    postfix_expression -> postfix_expression . [(,(] [),)] {/}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {/}
    postfix_expression -> postfix_expression . [.,.] [id,id] {/}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {/}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {/}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {/}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {%}
    postfix_expression -> postfix_expression . [(,(] [),)] {%}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {%}
    postfix_expression -> postfix_expression . [.,.] [id,id] {%}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {%}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {%}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {%}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {+}
    postfix_expression -> postfix_expression . [(,(] [),)] {+}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {+}
    postfix_expression -> postfix_expression . [.,.] [id,id] {+}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {+}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {+}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {+}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {-}
    postfix_expression -> postfix_expression . [(,(] [),)] {-}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {-}
    postfix_expression -> postfix_expression . [.,.] [id,id] {-}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {-}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {-}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {-}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {<}
    postfix_expression -> postfix_expression . [(,(] [),)] {<}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {<}
    postfix_expression -> postfix_expression . [.,.] [id,id] {<}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {<}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {<}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {<}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {>}
    postfix_expression -> postfix_expression . [(,(] [),)] {>}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {>}
    postfix_expression -> postfix_expression . [.,.] [id,id] {>}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {>}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {>}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {>}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {LE_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {LE_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LE_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {LE_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LE_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LE_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LE_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {GE_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {GE_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {GE_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {GE_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {GE_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {GE_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {GE_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {EQ_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {EQ_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {EQ_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {EQ_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {EQ_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {EQ_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {EQ_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {NE_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {NE_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {NE_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {NE_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {NE_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {NE_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {NE_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {&}
    postfix_expression -> postfix_expression . [(,(] [),)] {&}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {&}
    postfix_expression -> postfix_expression . [.,.] [id,id] {&}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {&}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {&}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {&}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {^}
    postfix_expression -> postfix_expression . [(,(] [),)] {^}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {^}
    postfix_expression -> postfix_expression . [.,.] [id,id] {^}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {^}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {^}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {^}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {|}
    postfix_expression -> postfix_expression . [(,(] [),)] {|}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {|}
    postfix_expression -> postfix_expression . [.,.] [id,id] {|}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {|}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {|}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {|}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {AND_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {AND_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {OR_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {OR_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_OP}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {=}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {=}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {ADD_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {ADD_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {AND_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {DIV_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DIV_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {MOD_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MOD_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {MUL_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MUL_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {OR_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {SUB_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {SUB_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {XOR_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {XOR_ASSIGN}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {[}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {[}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {(}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {(}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {.}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {.}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {PTR_OP}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {PTR_OP}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {INC_OP}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {INC_OP}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {DEC_OP}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DEC_OP}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {)}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {)}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {?}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {?}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {,}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {,}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {*}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {*}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {/}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {/}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {%}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {%}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {+}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {+}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {-}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {-}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_OP}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_OP}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_OP}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_OP}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {<}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {<}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {>}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {>}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {LE_OP}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LE_OP}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {GE_OP}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {GE_OP}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {EQ_OP}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {EQ_OP}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {NE_OP}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {NE_OP}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {&}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {&}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {^}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {^}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {|}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {|}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {AND_OP}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_OP}
check: shift postfix_expression -> postfix_expression . [(,(] [),)] {OR_OP}
check: shift postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_OP}
shifts: 76, reduces: 0, accepts: 0
shifting [(,(]
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {=}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {=}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {[}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {[}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {(}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {(}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {.}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {.}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {PTR_OP}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {PTR_OP}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {INC_OP}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {INC_OP}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {DEC_OP}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {DEC_OP}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {)}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {)}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {?}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {?}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {,}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {,}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {*}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {*}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {/}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {/}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {%}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {%}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {+}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {+}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {-}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {-}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {LEFT_OP}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {LEFT_OP}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {<}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {<}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {>}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {>}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {LE_OP}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {LE_OP}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {GE_OP}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {GE_OP}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {EQ_OP}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {EQ_OP}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {NE_OP}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {NE_OP}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {&}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {&}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {^}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {^}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {|}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {|}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {AND_OP}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {AND_OP}
building new item: postfix_expression -> postfix_expression [(,(] . [),)] {OR_OP}
building new item: postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {OR_OP}
closure post shift
LOOP: 115, token: num, token_value: 2
[verbose dump (every loop)]
parser state:
current token: num, value: 2
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [postfix_expression,postfix_expression]
  [(,(]
 state stack (kernel items of top state only):
  state 10
   kernel items:
    postfix_expression -> postfix_expression [(,(] . [),)] {=}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {=}
    postfix_expression -> postfix_expression [(,(] . [),)] {ADD_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {ADD_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . [),)] {AND_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {AND_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . [),)] {DIV_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {DIV_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . [),)] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . [),)] {MOD_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {MOD_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . [),)] {MUL_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {MUL_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . [),)] {OR_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {OR_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . [),)] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . [),)] {SUB_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {SUB_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . [),)] {XOR_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {XOR_ASSIGN}
    postfix_expression -> postfix_expression [(,(] . [),)] {[}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {[}
    postfix_expression -> postfix_expression [(,(] . [),)] {(}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {(}
    postfix_expression -> postfix_expression [(,(] . [),)] {.}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {.}
    postfix_expression -> postfix_expression [(,(] . [),)] {PTR_OP}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {PTR_OP}
    postfix_expression -> postfix_expression [(,(] . [),)] {INC_OP}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {INC_OP}
    postfix_expression -> postfix_expression [(,(] . [),)] {DEC_OP}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {DEC_OP}
    postfix_expression -> postfix_expression [(,(] . [),)] {)}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {)}
    postfix_expression -> postfix_expression [(,(] . [),)] {?}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {?}
    postfix_expression -> postfix_expression [(,(] . [),)] {,}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {,}
    postfix_expression -> postfix_expression [(,(] . [),)] {*}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {*}
    postfix_expression -> postfix_expression [(,(] . [),)] {/}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {/}
    postfix_expression -> postfix_expression [(,(] . [),)] {%}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {%}
    postfix_expression -> postfix_expression [(,(] . [),)] {+}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {+}
    postfix_expression -> postfix_expression [(,(] . [),)] {-}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {-}
    postfix_expression -> postfix_expression [(,(] . [),)] {LEFT_OP}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {LEFT_OP}
    postfix_expression -> postfix_expression [(,(] . [),)] {RIGHT_OP}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {RIGHT_OP}
    postfix_expression -> postfix_expression [(,(] . [),)] {<}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {<}
    postfix_expression -> postfix_expression [(,(] . [),)] {>}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {>}
    postfix_expression -> postfix_expression [(,(] . [),)] {LE_OP}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {LE_OP}
    postfix_expression -> postfix_expression [(,(] . [),)] {GE_OP}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {GE_OP}
    postfix_expression -> postfix_expression [(,(] . [),)] {EQ_OP}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {EQ_OP}
    postfix_expression -> postfix_expression [(,(] . [),)] {NE_OP}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {NE_OP}
    postfix_expression -> postfix_expression [(,(] . [),)] {&}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {&}
    postfix_expression -> postfix_expression [(,(] . [),)] {^}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {^}
    postfix_expression -> postfix_expression [(,(] . [),)] {|}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {|}
    postfix_expression -> postfix_expression [(,(] . [),)] {AND_OP}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {AND_OP}
    postfix_expression -> postfix_expression [(,(] . [),)] {OR_OP}
    postfix_expression -> postfix_expression [(,(] . argument_expression_list [),)] {OR_OP}
check: shift primary_expression -> . [num,num] {=}
check: shift primary_expression -> . [num,num] {ADD_ASSIGN}
check: shift primary_expression -> . [num,num] {AND_ASSIGN}
check: shift primary_expression -> . [num,num] {DIV_ASSIGN}
check: shift primary_expression -> . [num,num] {LEFT_ASSIGN}
check: shift primary_expression -> . [num,num] {MOD_ASSIGN}
check: shift primary_expression -> . [num,num] {MUL_ASSIGN}
check: shift primary_expression -> . [num,num] {OR_ASSIGN}
check: shift primary_expression -> . [num,num] {RIGHT_ASSIGN}
check: shift primary_expression -> . [num,num] {SUB_ASSIGN}
check: shift primary_expression -> . [num,num] {XOR_ASSIGN}
check: shift primary_expression -> . [num,num] {[}
check: shift primary_expression -> . [num,num] {(}
check: shift primary_expression -> . [num,num] {.}
check: shift primary_expression -> . [num,num] {PTR_OP}
check: shift primary_expression -> . [num,num] {INC_OP}
check: shift primary_expression -> . [num,num] {DEC_OP}
check: shift primary_expression -> . [num,num] {)}
check: shift primary_expression -> . [num,num] {?}
check: shift primary_expression -> . [num,num] {*}
check: shift primary_expression -> . [num,num] {/}
check: shift primary_expression -> . [num,num] {%}
check: shift primary_expression -> . [num,num] {+}
check: shift primary_expression -> . [num,num] {-}
check: shift primary_expression -> . [num,num] {LEFT_OP}
check: shift primary_expression -> . [num,num] {RIGHT_OP}
check: shift primary_expression -> . [num,num] {<}
check: shift primary_expression -> . [num,num] {>}
check: shift primary_expression -> . [num,num] {LE_OP}
check: shift primary_expression -> . [num,num] {GE_OP}
check: shift primary_expression -> . [num,num] {EQ_OP}
check: shift primary_expression -> . [num,num] {NE_OP}
check: shift primary_expression -> . [num,num] {&}
check: shift primary_expression -> . [num,num] {^}
check: shift primary_expression -> . [num,num] {|}
check: shift primary_expression -> . [num,num] {AND_OP}
check: shift primary_expression -> . [num,num] {OR_OP}
check: shift primary_expression -> . [num,num] {,}
shifts: 38, reduces: 0, accepts: 0
shifting [num,2]
building new item: primary_expression -> [num,num] . {=}
building new item: primary_expression -> [num,num] . {ADD_ASSIGN}
building new item: primary_expression -> [num,num] . {AND_ASSIGN}
building new item: primary_expression -> [num,num] . {DIV_ASSIGN}
building new item: primary_expression -> [num,num] . {LEFT_ASSIGN}
building new item: primary_expression -> [num,num] . {MOD_ASSIGN}
building new item: primary_expression -> [num,num] . {MUL_ASSIGN}
building new item: primary_expression -> [num,num] . {OR_ASSIGN}
building new item: primary_expression -> [num,num] . {RIGHT_ASSIGN}
building new item: primary_expression -> [num,num] . {SUB_ASSIGN}
building new item: primary_expression -> [num,num] . {XOR_ASSIGN}
building new item: primary_expression -> [num,num] . {[}
building new item: primary_expression -> [num,num] . {(}
building new item: primary_expression -> [num,num] . {.}
building new item: primary_expression -> [num,num] . {PTR_OP}
building new item: primary_expression -> [num,num] . {INC_OP}
building new item: primary_expression -> [num,num] . {DEC_OP}
building new item: primary_expression -> [num,num] . {)}
building new item: primary_expression -> [num,num] . {?}
building new item: primary_expression -> [num,num] . {*}
building new item: primary_expression -> [num,num] . {/}
building new item: primary_expression -> [num,num] . {%}
building new item: primary_expression -> [num,num] . {+}
building new item: primary_expression -> [num,num] . {-}
building new item: primary_expression -> [num,num] . {LEFT_OP}
building new item: primary_expression -> [num,num] . {RIGHT_OP}
building new item: primary_expression -> [num,num] . {<}
building new item: primary_expression -> [num,num] . {>}
building new item: primary_expression -> [num,num] . {LE_OP}
building new item: primary_expression -> [num,num] . {GE_OP}
building new item: primary_expression -> [num,num] . {EQ_OP}
building new item: primary_expression -> [num,num] . {NE_OP}
building new item: primary_expression -> [num,num] . {&}
building new item: primary_expression -> [num,num] . {^}
building new item: primary_expression -> [num,num] . {|}
building new item: primary_expression -> [num,num] . {AND_OP}
building new item: primary_expression -> [num,num] . {OR_OP}
building new item: primary_expression -> [num,num] . {,}
closure post shift
LOOP: 116, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [postfix_expression,postfix_expression]
  [(,(]
  [num,2]
 state stack (kernel items of top state only):
  state 11
   kernel items:
    primary_expression -> [num,num] . {=}
    primary_expression -> [num,num] . {ADD_ASSIGN}
    primary_expression -> [num,num] . {AND_ASSIGN}
    primary_expression -> [num,num] . {DIV_ASSIGN}
    primary_expression -> [num,num] . {LEFT_ASSIGN}
    primary_expression -> [num,num] . {MOD_ASSIGN}
    primary_expression -> [num,num] . {MUL_ASSIGN}
    primary_expression -> [num,num] . {OR_ASSIGN}
    primary_expression -> [num,num] . {RIGHT_ASSIGN}
    primary_expression -> [num,num] . {SUB_ASSIGN}
    primary_expression -> [num,num] . {XOR_ASSIGN}
    primary_expression -> [num,num] . {[}
    primary_expression -> [num,num] . {(}
    primary_expression -> [num,num] . {.}
    primary_expression -> [num,num] . {PTR_OP}
    primary_expression -> [num,num] . {INC_OP}
    primary_expression -> [num,num] . {DEC_OP}
    primary_expression -> [num,num] . {)}
    primary_expression -> [num,num] . {?}
    primary_expression -> [num,num] . {*}
    primary_expression -> [num,num] . {/}
    primary_expression -> [num,num] . {%}
    primary_expression -> [num,num] . {+}
    primary_expression -> [num,num] . {-}
    primary_expression -> [num,num] . {LEFT_OP}
    primary_expression -> [num,num] . {RIGHT_OP}
    primary_expression -> [num,num] . {<}
    primary_expression -> [num,num] . {>}
    primary_expression -> [num,num] . {LE_OP}
    primary_expression -> [num,num] . {GE_OP}
    primary_expression -> [num,num] . {EQ_OP}
    primary_expression -> [num,num] . {NE_OP}
    primary_expression -> [num,num] . {&}
    primary_expression -> [num,num] . {^}
    primary_expression -> [num,num] . {|}
    primary_expression -> [num,num] . {AND_OP}
    primary_expression -> [num,num] . {OR_OP}
    primary_expression -> [num,num] . {,}
check: reduce primary_expression -> [num,num] . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: primary_expression -> [num,num] . {=}
trying to reduce by: primary_expression -> [num,num] . {ADD_ASSIGN}
trying to reduce by: primary_expression -> [num,num] . {AND_ASSIGN}
trying to reduce by: primary_expression -> [num,num] . {DIV_ASSIGN}
trying to reduce by: primary_expression -> [num,num] . {LEFT_ASSIGN}
trying to reduce by: primary_expression -> [num,num] . {MOD_ASSIGN}
trying to reduce by: primary_expression -> [num,num] . {MUL_ASSIGN}
trying to reduce by: primary_expression -> [num,num] . {OR_ASSIGN}
trying to reduce by: primary_expression -> [num,num] . {RIGHT_ASSIGN}
trying to reduce by: primary_expression -> [num,num] . {SUB_ASSIGN}
trying to reduce by: primary_expression -> [num,num] . {XOR_ASSIGN}
trying to reduce by: primary_expression -> [num,num] . {[}
trying to reduce by: primary_expression -> [num,num] . {(}
trying to reduce by: primary_expression -> [num,num] . {.}
trying to reduce by: primary_expression -> [num,num] . {PTR_OP}
trying to reduce by: primary_expression -> [num,num] . {INC_OP}
trying to reduce by: primary_expression -> [num,num] . {DEC_OP}
trying to reduce by: primary_expression -> [num,num] . {)}
reduce: primary_expression -> 2 
reduce item: primary_expression -> [num,num] . {)}
building new item: postfix_expression -> primary_expression . {=}
building new item: postfix_expression -> primary_expression . {ADD_ASSIGN}
building new item: postfix_expression -> primary_expression . {AND_ASSIGN}
building new item: postfix_expression -> primary_expression . {DIV_ASSIGN}
building new item: postfix_expression -> primary_expression . {LEFT_ASSIGN}
building new item: postfix_expression -> primary_expression . {MOD_ASSIGN}
building new item: postfix_expression -> primary_expression . {MUL_ASSIGN}
building new item: postfix_expression -> primary_expression . {OR_ASSIGN}
building new item: postfix_expression -> primary_expression . {RIGHT_ASSIGN}
building new item: postfix_expression -> primary_expression . {SUB_ASSIGN}
building new item: postfix_expression -> primary_expression . {XOR_ASSIGN}
building new item: postfix_expression -> primary_expression . {[}
building new item: postfix_expression -> primary_expression . {(}
building new item: postfix_expression -> primary_expression . {.}
building new item: postfix_expression -> primary_expression . {PTR_OP}
building new item: postfix_expression -> primary_expression . {INC_OP}
building new item: postfix_expression -> primary_expression . {DEC_OP}
building new item: postfix_expression -> primary_expression . {)}
building new item: postfix_expression -> primary_expression . {?}
building new item: postfix_expression -> primary_expression . {*}
building new item: postfix_expression -> primary_expression . {/}
building new item: postfix_expression -> primary_expression . {%}
building new item: postfix_expression -> primary_expression . {+}
building new item: postfix_expression -> primary_expression . {-}
building new item: postfix_expression -> primary_expression . {LEFT_OP}
building new item: postfix_expression -> primary_expression . {RIGHT_OP}
building new item: postfix_expression -> primary_expression . {<}
building new item: postfix_expression -> primary_expression . {>}
building new item: postfix_expression -> primary_expression . {LE_OP}
building new item: postfix_expression -> primary_expression . {GE_OP}
building new item: postfix_expression -> primary_expression . {EQ_OP}
building new item: postfix_expression -> primary_expression . {NE_OP}
building new item: postfix_expression -> primary_expression . {&}
building new item: postfix_expression -> primary_expression . {^}
building new item: postfix_expression -> primary_expression . {|}
building new item: postfix_expression -> primary_expression . {AND_OP}
building new item: postfix_expression -> primary_expression . {OR_OP}
building new item: postfix_expression -> primary_expression . {,}
closure post reduce
LOOP: 117, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [postfix_expression,postfix_expression]
  [(,(]
  [primary_expression,primary_expression]
 state stack (kernel items of top state only):
  state 11
   kernel items:
    postfix_expression -> primary_expression . {=}
    postfix_expression -> primary_expression . {ADD_ASSIGN}
    postfix_expression -> primary_expression . {AND_ASSIGN}
    postfix_expression -> primary_expression . {DIV_ASSIGN}
    postfix_expression -> primary_expression . {LEFT_ASSIGN}
    postfix_expression -> primary_expression . {MOD_ASSIGN}
    postfix_expression -> primary_expression . {MUL_ASSIGN}
    postfix_expression -> primary_expression . {OR_ASSIGN}
    postfix_expression -> primary_expression . {RIGHT_ASSIGN}
    postfix_expression -> primary_expression . {SUB_ASSIGN}
    postfix_expression -> primary_expression . {XOR_ASSIGN}
    postfix_expression -> primary_expression . {[}
    postfix_expression -> primary_expression . {(}
    postfix_expression -> primary_expression . {.}
    postfix_expression -> primary_expression . {PTR_OP}
    postfix_expression -> primary_expression . {INC_OP}
    postfix_expression -> primary_expression . {DEC_OP}
    postfix_expression -> primary_expression . {)}
    postfix_expression -> primary_expression . {?}
    postfix_expression -> primary_expression . {*}
    postfix_expression -> primary_expression . {/}
    postfix_expression -> primary_expression . {%}
    postfix_expression -> primary_expression . {+}
    postfix_expression -> primary_expression . {-}
    postfix_expression -> primary_expression . {LEFT_OP}
    postfix_expression -> primary_expression . {RIGHT_OP}
    postfix_expression -> primary_expression . {<}
    postfix_expression -> primary_expression . {>}
    postfix_expression -> primary_expression . {LE_OP}
    postfix_expression -> primary_expression . {GE_OP}
    postfix_expression -> primary_expression . {EQ_OP}
    postfix_expression -> primary_expression . {NE_OP}
    postfix_expression -> primary_expression . {&}
    postfix_expression -> primary_expression . {^}
    postfix_expression -> primary_expression . {|}
    postfix_expression -> primary_expression . {AND_OP}
    postfix_expression -> primary_expression . {OR_OP}
    postfix_expression -> primary_expression . {,}
check: reduce postfix_expression -> primary_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: postfix_expression -> primary_expression . {=}
trying to reduce by: postfix_expression -> primary_expression . {ADD_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {AND_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {DIV_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {MOD_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {MUL_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {OR_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {SUB_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {XOR_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {[}
trying to reduce by: postfix_expression -> primary_expression . {(}
trying to reduce by: postfix_expression -> primary_expression . {.}
trying to reduce by: postfix_expression -> primary_expression . {PTR_OP}
trying to reduce by: postfix_expression -> primary_expression . {INC_OP}
trying to reduce by: postfix_expression -> primary_expression . {DEC_OP}
trying to reduce by: postfix_expression -> primary_expression . {)}
reduce: postfix_expression -> 2 
reduce item: postfix_expression -> primary_expression . {)}
building new item: unary_expression -> postfix_expression . {=}
building new item: unary_expression -> postfix_expression . {ADD_ASSIGN}
building new item: unary_expression -> postfix_expression . {AND_ASSIGN}
building new item: unary_expression -> postfix_expression . {DIV_ASSIGN}
building new item: unary_expression -> postfix_expression . {LEFT_ASSIGN}
building new item: unary_expression -> postfix_expression . {MOD_ASSIGN}
building new item: unary_expression -> postfix_expression . {MUL_ASSIGN}
building new item: unary_expression -> postfix_expression . {OR_ASSIGN}
building new item: unary_expression -> postfix_expression . {RIGHT_ASSIGN}
building new item: unary_expression -> postfix_expression . {SUB_ASSIGN}
building new item: unary_expression -> postfix_expression . {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {=}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {=}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {=}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {=}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {=}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {=}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {=}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {[}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {[}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {[}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {[}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {[}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {[}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {[}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {(}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {(}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {(}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {(}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {(}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {(}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {(}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {.}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {.}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {.}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {.}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {.}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {.}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {.}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {INC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {INC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {INC_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {INC_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {INC_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {INC_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {INC_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DEC_OP}
building new item: unary_expression -> postfix_expression . {)}
building new item: unary_expression -> postfix_expression . {?}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {)}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {)}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {)}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {)}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {)}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {)}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {)}
building new item: unary_expression -> postfix_expression . {*}
building new item: unary_expression -> postfix_expression . {/}
building new item: unary_expression -> postfix_expression . {%}
building new item: unary_expression -> postfix_expression . {+}
building new item: unary_expression -> postfix_expression . {-}
building new item: unary_expression -> postfix_expression . {LEFT_OP}
building new item: unary_expression -> postfix_expression . {RIGHT_OP}
building new item: unary_expression -> postfix_expression . {<}
building new item: unary_expression -> postfix_expression . {>}
building new item: unary_expression -> postfix_expression . {LE_OP}
building new item: unary_expression -> postfix_expression . {GE_OP}
building new item: unary_expression -> postfix_expression . {EQ_OP}
building new item: unary_expression -> postfix_expression . {NE_OP}
building new item: unary_expression -> postfix_expression . {&}
building new item: unary_expression -> postfix_expression . {^}
building new item: unary_expression -> postfix_expression . {|}
building new item: unary_expression -> postfix_expression . {AND_OP}
building new item: unary_expression -> postfix_expression . {OR_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {?}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {?}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {?}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {?}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {?}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {?}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {?}
building new item: unary_expression -> postfix_expression . {,}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {*}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {*}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {*}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {*}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {*}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {*}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {*}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {/}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {/}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {/}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {/}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {/}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {/}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {/}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {%}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {%}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {%}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {%}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {%}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {%}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {%}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {+}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {+}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {+}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {+}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {+}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {+}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {+}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {-}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {-}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {-}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {-}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {-}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {-}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {-}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {<}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {<}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {<}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {<}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {<}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {<}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {<}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {>}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {>}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {>}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {>}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {>}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {>}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {>}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {LE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {LE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LE_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {LE_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LE_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LE_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LE_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {GE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {GE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {GE_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {GE_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {GE_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {GE_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {GE_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {NE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {NE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {NE_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {NE_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {NE_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {NE_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {NE_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {&}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {&}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {&}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {&}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {&}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {&}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {&}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {^}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {^}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {^}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {^}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {^}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {^}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {^}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {|}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {|}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {|}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {|}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {|}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {|}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {|}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {AND_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {AND_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {OR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {OR_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {,}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {,}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {,}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {,}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {,}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {,}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {,}
closure post reduce
LOOP: 118, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [postfix_expression,postfix_expression]
  [(,(]
  [postfix_expression,postfix_expression]
 state stack (kernel items of top state only):
  state 11
   kernel items:
    unary_expression -> postfix_expression . {=}
    unary_expression -> postfix_expression . {ADD_ASSIGN}
    unary_expression -> postfix_expression . {AND_ASSIGN}
    unary_expression -> postfix_expression . {DIV_ASSIGN}
    unary_expression -> postfix_expression . {LEFT_ASSIGN}
    unary_expression -> postfix_expression . {MOD_ASSIGN}
    unary_expression -> postfix_expression . {MUL_ASSIGN}
    unary_expression -> postfix_expression . {OR_ASSIGN}
    unary_expression -> postfix_expression . {RIGHT_ASSIGN}
    unary_expression -> postfix_expression . {SUB_ASSIGN}
    unary_expression -> postfix_expression . {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {=}
    postfix_expression -> postfix_expression . [(,(] [),)] {=}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {=}
    postfix_expression -> postfix_expression . [.,.] [id,id] {=}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {=}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {=}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {=}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {[}
    postfix_expression -> postfix_expression . [(,(] [),)] {[}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {[}
    postfix_expression -> postfix_expression . [.,.] [id,id] {[}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {[}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {[}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {[}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {(}
    postfix_expression -> postfix_expression . [(,(] [),)] {(}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {(}
    postfix_expression -> postfix_expression . [.,.] [id,id] {(}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {(}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {(}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {(}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {.}
    postfix_expression -> postfix_expression . [(,(] [),)] {.}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {.}
    postfix_expression -> postfix_expression . [.,.] [id,id] {.}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {.}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {.}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {.}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {PTR_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {PTR_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {PTR_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {PTR_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {PTR_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {PTR_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {PTR_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {INC_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {INC_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {INC_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {INC_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {INC_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {INC_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {INC_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {DEC_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {DEC_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DEC_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {DEC_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DEC_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DEC_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DEC_OP}
    unary_expression -> postfix_expression . {)}
    unary_expression -> postfix_expression . {?}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {)}
    postfix_expression -> postfix_expression . [(,(] [),)] {)}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {)}
    postfix_expression -> postfix_expression . [.,.] [id,id] {)}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {)}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {)}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {)}
    unary_expression -> postfix_expression . {*}
    unary_expression -> postfix_expression . {/}
    unary_expression -> postfix_expression . {%}
    unary_expression -> postfix_expression . {+}
    unary_expression -> postfix_expression . {-}
    unary_expression -> postfix_expression . {LEFT_OP}
    unary_expression -> postfix_expression . {RIGHT_OP}
    unary_expression -> postfix_expression . {<}
    unary_expression -> postfix_expression . {>}
    unary_expression -> postfix_expression . {LE_OP}
    unary_expression -> postfix_expression . {GE_OP}
    unary_expression -> postfix_expression . {EQ_OP}
    unary_expression -> postfix_expression . {NE_OP}
    unary_expression -> postfix_expression . {&}
    unary_expression -> postfix_expression . {^}
    unary_expression -> postfix_expression . {|}
    unary_expression -> postfix_expression . {AND_OP}
    unary_expression -> postfix_expression . {OR_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {?}
    postfix_expression -> postfix_expression . [(,(] [),)] {?}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {?}
    postfix_expression -> postfix_expression . [.,.] [id,id] {?}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {?}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {?}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {?}
    unary_expression -> postfix_expression . {,}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {*}
    postfix_expression -> postfix_expression . [(,(] [),)] {*}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {*}
    postfix_expression -> postfix_expression . [.,.] [id,id] {*}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {*}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {*}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {*}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {/}
    postfix_expression -> postfix_expression . [(,(] [),)] {/}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {/}
    postfix_expression -> postfix_expression . [.,.] [id,id] {/}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {/}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {/}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {/}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {%}
    postfix_expression -> postfix_expression . [(,(] [),)] {%}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {%}
    postfix_expression -> postfix_expression . [.,.] [id,id] {%}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {%}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {%}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {%}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {+}
    postfix_expression -> postfix_expression . [(,(] [),)] {+}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {+}
    postfix_expression -> postfix_expression . [.,.] [id,id] {+}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {+}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {+}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {+}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {-}
    postfix_expression -> postfix_expression . [(,(] [),)] {-}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {-}
    postfix_expression -> postfix_expression . [.,.] [id,id] {-}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {-}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {-}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {-}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {<}
    postfix_expression -> postfix_expression . [(,(] [),)] {<}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {<}
    postfix_expression -> postfix_expression . [.,.] [id,id] {<}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {<}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {<}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {<}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {>}
    postfix_expression -> postfix_expression . [(,(] [),)] {>}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {>}
    postfix_expression -> postfix_expression . [.,.] [id,id] {>}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {>}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {>}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {>}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {LE_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {LE_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LE_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {LE_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LE_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LE_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LE_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {GE_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {GE_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {GE_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {GE_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {GE_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {GE_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {GE_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {EQ_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {EQ_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {EQ_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {EQ_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {EQ_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {EQ_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {EQ_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {NE_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {NE_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {NE_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {NE_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {NE_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {NE_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {NE_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {&}
    postfix_expression -> postfix_expression . [(,(] [),)] {&}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {&}
    postfix_expression -> postfix_expression . [.,.] [id,id] {&}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {&}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {&}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {&}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {^}
    postfix_expression -> postfix_expression . [(,(] [),)] {^}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {^}
    postfix_expression -> postfix_expression . [.,.] [id,id] {^}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {^}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {^}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {^}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {|}
    postfix_expression -> postfix_expression . [(,(] [),)] {|}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {|}
    postfix_expression -> postfix_expression . [.,.] [id,id] {|}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {|}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {|}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {|}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {AND_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {AND_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {OR_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {OR_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {,}
    postfix_expression -> postfix_expression . [(,(] [),)] {,}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {,}
    postfix_expression -> postfix_expression . [.,.] [id,id] {,}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {,}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {,}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {,}
check: reduce unary_expression -> postfix_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: unary_expression -> postfix_expression . {=}
trying to reduce by: unary_expression -> postfix_expression . {ADD_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {AND_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {DIV_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {LEFT_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {MOD_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {MUL_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {OR_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {RIGHT_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {SUB_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {=}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {=}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {=}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {=}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {=}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {=}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {=}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {[}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {[}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {[}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {[}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {[}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {[}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {[}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {(}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {(}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {(}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {(}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {(}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {(}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {(}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {.}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {.}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {.}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {.}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {.}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {.}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {.}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DEC_OP}
trying to reduce by: unary_expression -> postfix_expression . {)}
reduce: unary_expression -> 2 
reduce item: unary_expression -> postfix_expression . {)}
building new item: assignment_expression -> unary_expression . assignment_operator assignment_expression {)}
building new item: assignment_expression -> unary_expression . assignment_operator assignment_expression {,}
building new item: cast_expression -> unary_expression . {)}
building new item: cast_expression -> unary_expression . {?}
building new item: cast_expression -> unary_expression . {*}
building new item: cast_expression -> unary_expression . {/}
building new item: cast_expression -> unary_expression . {%}
building new item: cast_expression -> unary_expression . {+}
building new item: cast_expression -> unary_expression . {-}
building new item: cast_expression -> unary_expression . {LEFT_OP}
building new item: cast_expression -> unary_expression . {RIGHT_OP}
building new item: cast_expression -> unary_expression . {<}
building new item: cast_expression -> unary_expression . {>}
building new item: cast_expression -> unary_expression . {LE_OP}
building new item: cast_expression -> unary_expression . {GE_OP}
building new item: cast_expression -> unary_expression . {EQ_OP}
building new item: cast_expression -> unary_expression . {NE_OP}
building new item: cast_expression -> unary_expression . {&}
building new item: cast_expression -> unary_expression . {^}
building new item: cast_expression -> unary_expression . {|}
building new item: cast_expression -> unary_expression . {AND_OP}
building new item: cast_expression -> unary_expression . {OR_OP}
building new item: cast_expression -> unary_expression . {,}
closure post reduce
LOOP: 119, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [postfix_expression,postfix_expression]
  [(,(]
  [unary_expression,unary_expression]
 state stack (kernel items of top state only):
  state 11
   kernel items:
    assignment_expression -> unary_expression . assignment_operator assignment_expression {)}
    assignment_expression -> unary_expression . assignment_operator assignment_expression {,}
    cast_expression -> unary_expression . {)}
    cast_expression -> unary_expression . {?}
    cast_expression -> unary_expression . {*}
    cast_expression -> unary_expression . {/}
    cast_expression -> unary_expression . {%}
    cast_expression -> unary_expression . {+}
    cast_expression -> unary_expression . {-}
    cast_expression -> unary_expression . {LEFT_OP}
    cast_expression -> unary_expression . {RIGHT_OP}
    cast_expression -> unary_expression . {<}
    cast_expression -> unary_expression . {>}
    cast_expression -> unary_expression . {LE_OP}
    cast_expression -> unary_expression . {GE_OP}
    cast_expression -> unary_expression . {EQ_OP}
    cast_expression -> unary_expression . {NE_OP}
    cast_expression -> unary_expression . {&}
    cast_expression -> unary_expression . {^}
    cast_expression -> unary_expression . {|}
    cast_expression -> unary_expression . {AND_OP}
    cast_expression -> unary_expression . {OR_OP}
    cast_expression -> unary_expression . {,}
check: reduce cast_expression -> unary_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: assignment_expression -> unary_expression . assignment_operator assignment_expression {)}
trying to reduce by: assignment_expression -> unary_expression . assignment_operator assignment_expression {,}
trying to reduce by: cast_expression -> unary_expression . {)}
reduce: cast_expression -> 2 
reduce item: cast_expression -> unary_expression . {)}
building new item: multiplicative_expression -> cast_expression . {)}
building new item: multiplicative_expression -> cast_expression . {?}
building new item: multiplicative_expression -> cast_expression . {*}
building new item: multiplicative_expression -> cast_expression . {/}
building new item: multiplicative_expression -> cast_expression . {%}
building new item: multiplicative_expression -> cast_expression . {+}
building new item: multiplicative_expression -> cast_expression . {-}
building new item: multiplicative_expression -> cast_expression . {LEFT_OP}
building new item: multiplicative_expression -> cast_expression . {RIGHT_OP}
building new item: multiplicative_expression -> cast_expression . {<}
building new item: multiplicative_expression -> cast_expression . {>}
building new item: multiplicative_expression -> cast_expression . {LE_OP}
building new item: multiplicative_expression -> cast_expression . {GE_OP}
building new item: multiplicative_expression -> cast_expression . {EQ_OP}
building new item: multiplicative_expression -> cast_expression . {NE_OP}
building new item: multiplicative_expression -> cast_expression . {&}
building new item: multiplicative_expression -> cast_expression . {^}
building new item: multiplicative_expression -> cast_expression . {|}
building new item: multiplicative_expression -> cast_expression . {AND_OP}
building new item: multiplicative_expression -> cast_expression . {OR_OP}
building new item: multiplicative_expression -> cast_expression . {,}
closure post reduce
LOOP: 120, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [postfix_expression,postfix_expression]
  [(,(]
  [cast_expression,cast_expression]
 state stack (kernel items of top state only):
  state 11
   kernel items:
    multiplicative_expression -> cast_expression . {)}
    multiplicative_expression -> cast_expression . {?}
    multiplicative_expression -> cast_expression . {*}
    multiplicative_expression -> cast_expression . {/}
    multiplicative_expression -> cast_expression . {%}
    multiplicative_expression -> cast_expression . {+}
    multiplicative_expression -> cast_expression . {-}
    multiplicative_expression -> cast_expression . {LEFT_OP}
    multiplicative_expression -> cast_expression . {RIGHT_OP}
    multiplicative_expression -> cast_expression . {<}
    multiplicative_expression -> cast_expression . {>}
    multiplicative_expression -> cast_expression . {LE_OP}
    multiplicative_expression -> cast_expression . {GE_OP}
    multiplicative_expression -> cast_expression . {EQ_OP}
    multiplicative_expression -> cast_expression . {NE_OP}
    multiplicative_expression -> cast_expression . {&}
    multiplicative_expression -> cast_expression . {^}
    multiplicative_expression -> cast_expression . {|}
    multiplicative_expression -> cast_expression . {AND_OP}
    multiplicative_expression -> cast_expression . {OR_OP}
    multiplicative_expression -> cast_expression . {,}
check: reduce multiplicative_expression -> cast_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: multiplicative_expression -> cast_expression . {)}
reduce: multiplicative_expression -> 2 
reduce item: multiplicative_expression -> cast_expression . {)}
building new item: additive_expression -> multiplicative_expression . {)}
building new item: additive_expression -> multiplicative_expression . {?}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {)}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {)}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {)}
building new item: additive_expression -> multiplicative_expression . {+}
building new item: additive_expression -> multiplicative_expression . {-}
building new item: additive_expression -> multiplicative_expression . {LEFT_OP}
building new item: additive_expression -> multiplicative_expression . {RIGHT_OP}
building new item: additive_expression -> multiplicative_expression . {<}
building new item: additive_expression -> multiplicative_expression . {>}
building new item: additive_expression -> multiplicative_expression . {LE_OP}
building new item: additive_expression -> multiplicative_expression . {GE_OP}
building new item: additive_expression -> multiplicative_expression . {EQ_OP}
building new item: additive_expression -> multiplicative_expression . {NE_OP}
building new item: additive_expression -> multiplicative_expression . {&}
building new item: additive_expression -> multiplicative_expression . {^}
building new item: additive_expression -> multiplicative_expression . {|}
building new item: additive_expression -> multiplicative_expression . {AND_OP}
building new item: additive_expression -> multiplicative_expression . {OR_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {?}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {?}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {?}
building new item: additive_expression -> multiplicative_expression . {,}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {*}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {*}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {*}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {/}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {/}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {/}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {%}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {%}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {%}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {+}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {+}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {+}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {-}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {-}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {-}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {LEFT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {LEFT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {LEFT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {RIGHT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {RIGHT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {RIGHT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {<}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {<}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {<}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {>}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {>}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {>}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {LE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {LE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {LE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {GE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {GE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {GE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {EQ_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {EQ_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {EQ_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {NE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {NE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {NE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {&}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {&}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {&}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {^}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {^}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {^}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {|}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {|}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {|}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {AND_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {AND_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {AND_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {OR_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {OR_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {OR_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {,}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {,}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {,}
closure post reduce
LOOP: 121, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [postfix_expression,postfix_expression]
  [(,(]
  [multiplicative_expression,multiplicative_expression]
 state stack (kernel items of top state only):
  state 11
   kernel items:
    additive_expression -> multiplicative_expression . {)}
    additive_expression -> multiplicative_expression . {?}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {)}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {)}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {)}
    additive_expression -> multiplicative_expression . {+}
    additive_expression -> multiplicative_expression . {-}
    additive_expression -> multiplicative_expression . {LEFT_OP}
    additive_expression -> multiplicative_expression . {RIGHT_OP}
    additive_expression -> multiplicative_expression . {<}
    additive_expression -> multiplicative_expression . {>}
    additive_expression -> multiplicative_expression . {LE_OP}
    additive_expression -> multiplicative_expression . {GE_OP}
    additive_expression -> multiplicative_expression . {EQ_OP}
    additive_expression -> multiplicative_expression . {NE_OP}
    additive_expression -> multiplicative_expression . {&}
    additive_expression -> multiplicative_expression . {^}
    additive_expression -> multiplicative_expression . {|}
    additive_expression -> multiplicative_expression . {AND_OP}
    additive_expression -> multiplicative_expression . {OR_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {?}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {?}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {?}
    additive_expression -> multiplicative_expression . {,}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {*}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {*}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {*}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {/}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {/}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {/}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {%}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {%}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {%}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {+}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {+}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {+}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {-}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {-}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {-}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {LEFT_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {LEFT_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {LEFT_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {RIGHT_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {RIGHT_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {RIGHT_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {<}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {<}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {<}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {>}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {>}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {>}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {LE_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {LE_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {LE_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {GE_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {GE_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {GE_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {EQ_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {EQ_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {EQ_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {NE_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {NE_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {NE_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {&}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {&}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {&}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {^}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {^}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {^}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {|}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {|}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {|}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {AND_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {AND_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {AND_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {OR_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {OR_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {OR_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {,}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {,}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {,}
check: reduce additive_expression -> multiplicative_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: additive_expression -> multiplicative_expression . {)}
reduce: additive_expression -> 2 
reduce item: additive_expression -> multiplicative_expression . {)}
building new item: shift_expression -> additive_expression . {)}
building new item: shift_expression -> additive_expression . {?}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {)}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {)}
building new item: shift_expression -> additive_expression . {LEFT_OP}
building new item: shift_expression -> additive_expression . {RIGHT_OP}
building new item: shift_expression -> additive_expression . {<}
building new item: shift_expression -> additive_expression . {>}
building new item: shift_expression -> additive_expression . {LE_OP}
building new item: shift_expression -> additive_expression . {GE_OP}
building new item: shift_expression -> additive_expression . {EQ_OP}
building new item: shift_expression -> additive_expression . {NE_OP}
building new item: shift_expression -> additive_expression . {&}
building new item: shift_expression -> additive_expression . {^}
building new item: shift_expression -> additive_expression . {|}
building new item: shift_expression -> additive_expression . {AND_OP}
building new item: shift_expression -> additive_expression . {OR_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {?}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {?}
building new item: shift_expression -> additive_expression . {,}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {+}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {+}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {-}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {-}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {LEFT_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {LEFT_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {RIGHT_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {RIGHT_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {<}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {<}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {>}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {>}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {LE_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {LE_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {GE_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {GE_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {EQ_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {EQ_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {NE_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {NE_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {&}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {&}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {^}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {^}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {|}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {|}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {AND_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {AND_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {OR_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {OR_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {,}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {,}
closure post reduce
LOOP: 122, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [postfix_expression,postfix_expression]
  [(,(]
  [additive_expression,additive_expression]
 state stack (kernel items of top state only):
  state 11
   kernel items:
    shift_expression -> additive_expression . {)}
    shift_expression -> additive_expression . {?}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {)}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {)}
    shift_expression -> additive_expression . {LEFT_OP}
    shift_expression -> additive_expression . {RIGHT_OP}
    shift_expression -> additive_expression . {<}
    shift_expression -> additive_expression . {>}
    shift_expression -> additive_expression . {LE_OP}
    shift_expression -> additive_expression . {GE_OP}
    shift_expression -> additive_expression . {EQ_OP}
    shift_expression -> additive_expression . {NE_OP}
    shift_expression -> additive_expression . {&}
    shift_expression -> additive_expression . {^}
    shift_expression -> additive_expression . {|}
    shift_expression -> additive_expression . {AND_OP}
    shift_expression -> additive_expression . {OR_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {?}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {?}
    shift_expression -> additive_expression . {,}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {+}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {+}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {-}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {-}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {LEFT_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {LEFT_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {RIGHT_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {RIGHT_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {<}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {<}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {>}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {>}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {LE_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {LE_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {GE_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {GE_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {EQ_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {EQ_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {NE_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {NE_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {&}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {&}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {^}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {^}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {|}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {|}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {AND_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {AND_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {OR_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {OR_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {,}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {,}
check: reduce shift_expression -> additive_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: shift_expression -> additive_expression . {)}
reduce: shift_expression -> 2 
reduce item: shift_expression -> additive_expression . {)}
building new item: relational_expression -> shift_expression . {)}
building new item: relational_expression -> shift_expression . {?}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {)}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {)}
building new item: relational_expression -> shift_expression . {<}
building new item: relational_expression -> shift_expression . {>}
building new item: relational_expression -> shift_expression . {LE_OP}
building new item: relational_expression -> shift_expression . {GE_OP}
building new item: relational_expression -> shift_expression . {EQ_OP}
building new item: relational_expression -> shift_expression . {NE_OP}
building new item: relational_expression -> shift_expression . {&}
building new item: relational_expression -> shift_expression . {^}
building new item: relational_expression -> shift_expression . {|}
building new item: relational_expression -> shift_expression . {AND_OP}
building new item: relational_expression -> shift_expression . {OR_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {?}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {?}
building new item: relational_expression -> shift_expression . {,}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {LEFT_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {LEFT_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {RIGHT_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {RIGHT_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {<}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {<}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {>}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {>}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {LE_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {LE_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {GE_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {GE_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {EQ_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {EQ_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {NE_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {NE_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {&}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {&}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {^}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {^}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {|}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {|}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {AND_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {AND_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {OR_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {OR_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {,}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {,}
closure post reduce
LOOP: 123, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [postfix_expression,postfix_expression]
  [(,(]
  [shift_expression,shift_expression]
 state stack (kernel items of top state only):
  state 11
   kernel items:
    relational_expression -> shift_expression . {)}
    relational_expression -> shift_expression . {?}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {)}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {)}
    relational_expression -> shift_expression . {<}
    relational_expression -> shift_expression . {>}
    relational_expression -> shift_expression . {LE_OP}
    relational_expression -> shift_expression . {GE_OP}
    relational_expression -> shift_expression . {EQ_OP}
    relational_expression -> shift_expression . {NE_OP}
    relational_expression -> shift_expression . {&}
    relational_expression -> shift_expression . {^}
    relational_expression -> shift_expression . {|}
    relational_expression -> shift_expression . {AND_OP}
    relational_expression -> shift_expression . {OR_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {?}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {?}
    relational_expression -> shift_expression . {,}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {LEFT_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {LEFT_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {RIGHT_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {RIGHT_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {<}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {<}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {>}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {>}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {LE_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {LE_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {GE_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {GE_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {EQ_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {EQ_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {NE_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {NE_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {&}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {&}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {^}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {^}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {|}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {|}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {AND_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {AND_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {OR_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {OR_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {,}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {,}
check: reduce relational_expression -> shift_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: relational_expression -> shift_expression . {)}
reduce: relational_expression -> 2 
reduce item: relational_expression -> shift_expression . {)}
building new item: equality_expression -> relational_expression . {)}
building new item: equality_expression -> relational_expression . {?}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {)}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {)}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {)}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {)}
building new item: equality_expression -> relational_expression . {EQ_OP}
building new item: equality_expression -> relational_expression . {NE_OP}
building new item: equality_expression -> relational_expression . {&}
building new item: equality_expression -> relational_expression . {^}
building new item: equality_expression -> relational_expression . {|}
building new item: equality_expression -> relational_expression . {AND_OP}
building new item: equality_expression -> relational_expression . {OR_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {?}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {?}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {?}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {?}
building new item: equality_expression -> relational_expression . {,}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {<}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {<}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {<}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {<}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {>}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {>}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {>}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {>}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {LE_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {LE_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {LE_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {LE_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {GE_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {GE_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {GE_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {GE_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {EQ_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {EQ_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {EQ_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {EQ_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {NE_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {NE_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {NE_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {NE_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {&}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {&}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {&}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {&}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {^}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {^}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {^}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {^}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {|}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {|}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {|}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {|}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {AND_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {AND_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {AND_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {AND_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {OR_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {OR_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {OR_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {OR_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {,}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {,}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {,}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {,}
closure post reduce
LOOP: 124, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [postfix_expression,postfix_expression]
  [(,(]
  [relational_expression,relational_expression]
 state stack (kernel items of top state only):
  state 11
   kernel items:
    equality_expression -> relational_expression . {)}
    equality_expression -> relational_expression . {?}
    relational_expression -> relational_expression . [<,<] shift_expression {)}
    relational_expression -> relational_expression . [>,>] shift_expression {)}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {)}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {)}
    equality_expression -> relational_expression . {EQ_OP}
    equality_expression -> relational_expression . {NE_OP}
    equality_expression -> relational_expression . {&}
    equality_expression -> relational_expression . {^}
    equality_expression -> relational_expression . {|}
    equality_expression -> relational_expression . {AND_OP}
    equality_expression -> relational_expression . {OR_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {?}
    relational_expression -> relational_expression . [>,>] shift_expression {?}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {?}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {?}
    equality_expression -> relational_expression . {,}
    relational_expression -> relational_expression . [<,<] shift_expression {<}
    relational_expression -> relational_expression . [>,>] shift_expression {<}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {<}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {<}
    relational_expression -> relational_expression . [<,<] shift_expression {>}
    relational_expression -> relational_expression . [>,>] shift_expression {>}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {>}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {>}
    relational_expression -> relational_expression . [<,<] shift_expression {LE_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {LE_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {LE_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {LE_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {GE_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {GE_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {GE_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {GE_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {EQ_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {EQ_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {EQ_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {EQ_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {NE_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {NE_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {NE_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {NE_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {&}
    relational_expression -> relational_expression . [>,>] shift_expression {&}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {&}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {&}
    relational_expression -> relational_expression . [<,<] shift_expression {^}
    relational_expression -> relational_expression . [>,>] shift_expression {^}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {^}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {^}
    relational_expression -> relational_expression . [<,<] shift_expression {|}
    relational_expression -> relational_expression . [>,>] shift_expression {|}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {|}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {|}
    relational_expression -> relational_expression . [<,<] shift_expression {AND_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {AND_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {AND_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {AND_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {OR_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {OR_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {OR_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {OR_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {,}
    relational_expression -> relational_expression . [>,>] shift_expression {,}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {,}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {,}
check: reduce equality_expression -> relational_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: equality_expression -> relational_expression . {)}
reduce: equality_expression -> 2 
reduce item: equality_expression -> relational_expression . {)}
building new item: and_expression -> equality_expression . {)}
building new item: and_expression -> equality_expression . {?}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {)}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {)}
building new item: and_expression -> equality_expression . {&}
building new item: and_expression -> equality_expression . {^}
building new item: and_expression -> equality_expression . {|}
building new item: and_expression -> equality_expression . {AND_OP}
building new item: and_expression -> equality_expression . {OR_OP}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {?}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {?}
building new item: and_expression -> equality_expression . {,}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {EQ_OP}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {EQ_OP}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {NE_OP}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {NE_OP}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {&}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {&}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {^}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {^}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {|}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {|}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {AND_OP}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {AND_OP}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {OR_OP}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {OR_OP}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {,}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {,}
closure post reduce
LOOP: 125, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [postfix_expression,postfix_expression]
  [(,(]
  [equality_expression,equality_expression]
 state stack (kernel items of top state only):
  state 11
   kernel items:
    and_expression -> equality_expression . {)}
    and_expression -> equality_expression . {?}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {)}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {)}
    and_expression -> equality_expression . {&}
    and_expression -> equality_expression . {^}
    and_expression -> equality_expression . {|}
    and_expression -> equality_expression . {AND_OP}
    and_expression -> equality_expression . {OR_OP}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {?}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {?}
    and_expression -> equality_expression . {,}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {EQ_OP}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {EQ_OP}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {NE_OP}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {NE_OP}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {&}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {&}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {^}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {^}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {|}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {|}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {AND_OP}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {AND_OP}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {OR_OP}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {OR_OP}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {,}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {,}
check: reduce and_expression -> equality_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: and_expression -> equality_expression . {)}
reduce: and_expression -> 2 
reduce item: and_expression -> equality_expression . {)}
building new item: exclusive_or_expression -> and_expression . {)}
building new item: exclusive_or_expression -> and_expression . {?}
building new item: and_expression -> and_expression . [&,&] equality_expression {)}
building new item: exclusive_or_expression -> and_expression . {^}
building new item: exclusive_or_expression -> and_expression . {|}
building new item: exclusive_or_expression -> and_expression . {AND_OP}
building new item: exclusive_or_expression -> and_expression . {OR_OP}
building new item: and_expression -> and_expression . [&,&] equality_expression {?}
building new item: exclusive_or_expression -> and_expression . {,}
building new item: and_expression -> and_expression . [&,&] equality_expression {&}
building new item: and_expression -> and_expression . [&,&] equality_expression {^}
building new item: and_expression -> and_expression . [&,&] equality_expression {|}
building new item: and_expression -> and_expression . [&,&] equality_expression {AND_OP}
building new item: and_expression -> and_expression . [&,&] equality_expression {OR_OP}
building new item: and_expression -> and_expression . [&,&] equality_expression {,}
closure post reduce
LOOP: 126, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [postfix_expression,postfix_expression]
  [(,(]
  [and_expression,and_expression]
 state stack (kernel items of top state only):
  state 11
   kernel items:
    exclusive_or_expression -> and_expression . {)}
    exclusive_or_expression -> and_expression . {?}
    and_expression -> and_expression . [&,&] equality_expression {)}
    exclusive_or_expression -> and_expression . {^}
    exclusive_or_expression -> and_expression . {|}
    exclusive_or_expression -> and_expression . {AND_OP}
    exclusive_or_expression -> and_expression . {OR_OP}
    and_expression -> and_expression . [&,&] equality_expression {?}
    exclusive_or_expression -> and_expression . {,}
    and_expression -> and_expression . [&,&] equality_expression {&}
    and_expression -> and_expression . [&,&] equality_expression {^}
    and_expression -> and_expression . [&,&] equality_expression {|}
    and_expression -> and_expression . [&,&] equality_expression {AND_OP}
    and_expression -> and_expression . [&,&] equality_expression {OR_OP}
    and_expression -> and_expression . [&,&] equality_expression {,}
check: reduce exclusive_or_expression -> and_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: exclusive_or_expression -> and_expression . {)}
reduce: exclusive_or_expression -> 2 
reduce item: exclusive_or_expression -> and_expression . {)}
building new item: inclusive_or_expression -> exclusive_or_expression . {)}
building new item: inclusive_or_expression -> exclusive_or_expression . {?}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {)}
building new item: inclusive_or_expression -> exclusive_or_expression . {|}
building new item: inclusive_or_expression -> exclusive_or_expression . {AND_OP}
building new item: inclusive_or_expression -> exclusive_or_expression . {OR_OP}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {?}
building new item: inclusive_or_expression -> exclusive_or_expression . {,}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {^}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {|}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {AND_OP}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {OR_OP}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {,}
closure post reduce
LOOP: 127, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [postfix_expression,postfix_expression]
  [(,(]
  [exclusive_or_expression,exclusive_or_expression]
 state stack (kernel items of top state only):
  state 11
   kernel items:
    inclusive_or_expression -> exclusive_or_expression . {)}
    inclusive_or_expression -> exclusive_or_expression . {?}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {)}
    inclusive_or_expression -> exclusive_or_expression . {|}
    inclusive_or_expression -> exclusive_or_expression . {AND_OP}
    inclusive_or_expression -> exclusive_or_expression . {OR_OP}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {?}
    inclusive_or_expression -> exclusive_or_expression . {,}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {^}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {|}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {AND_OP}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {OR_OP}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {,}
check: reduce inclusive_or_expression -> exclusive_or_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: inclusive_or_expression -> exclusive_or_expression . {)}
reduce: inclusive_or_expression -> 2 
reduce item: inclusive_or_expression -> exclusive_or_expression . {)}
building new item: logical_and_expression -> inclusive_or_expression . {)}
building new item: logical_and_expression -> inclusive_or_expression . {?}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {)}
building new item: logical_and_expression -> inclusive_or_expression . {AND_OP}
building new item: logical_and_expression -> inclusive_or_expression . {OR_OP}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {?}
building new item: logical_and_expression -> inclusive_or_expression . {,}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {|}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {AND_OP}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {OR_OP}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {,}
closure post reduce
LOOP: 128, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [postfix_expression,postfix_expression]
  [(,(]
  [inclusive_or_expression,inclusive_or_expression]
 state stack (kernel items of top state only):
  state 11
   kernel items:
    logical_and_expression -> inclusive_or_expression . {)}
    logical_and_expression -> inclusive_or_expression . {?}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {)}
    logical_and_expression -> inclusive_or_expression . {AND_OP}
    logical_and_expression -> inclusive_or_expression . {OR_OP}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {?}
    logical_and_expression -> inclusive_or_expression . {,}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {|}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {AND_OP}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {OR_OP}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {,}
check: reduce logical_and_expression -> inclusive_or_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: logical_and_expression -> inclusive_or_expression . {)}
reduce: logical_and_expression -> 2 
reduce item: logical_and_expression -> inclusive_or_expression . {)}
building new item: logical_or_expression -> logical_and_expression . {)}
building new item: logical_or_expression -> logical_and_expression . {?}
building new item: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {)}
building new item: logical_or_expression -> logical_and_expression . {OR_OP}
building new item: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {?}
building new item: logical_or_expression -> logical_and_expression . {,}
building new item: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {AND_OP}
building new item: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {OR_OP}
building new item: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {,}
closure post reduce
LOOP: 129, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [postfix_expression,postfix_expression]
  [(,(]
  [logical_and_expression,logical_and_expression]
 state stack (kernel items of top state only):
  state 11
   kernel items:
    logical_or_expression -> logical_and_expression . {)}
    logical_or_expression -> logical_and_expression . {?}
    logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {)}
    logical_or_expression -> logical_and_expression . {OR_OP}
    logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {?}
    logical_or_expression -> logical_and_expression . {,}
    logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {AND_OP}
    logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {OR_OP}
    logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {,}
check: reduce logical_or_expression -> logical_and_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: logical_or_expression -> logical_and_expression . {)}
reduce: logical_or_expression -> 2 
reduce item: logical_or_expression -> logical_and_expression . {)}
building new item: conditional_expression -> logical_or_expression . {)}
building new item: conditional_expression -> logical_or_expression . [?,?] expression [:,:] conditional_expression {)}
building new item: logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {)}
building new item: logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {?}
building new item: conditional_expression -> logical_or_expression . {,}
building new item: conditional_expression -> logical_or_expression . [?,?] expression [:,:] conditional_expression {,}
building new item: logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {OR_OP}
building new item: logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {,}
closure post reduce
LOOP: 130, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [postfix_expression,postfix_expression]
  [(,(]
  [logical_or_expression,logical_or_expression]
 state stack (kernel items of top state only):
  state 11
   kernel items:
    conditional_expression -> logical_or_expression . {)}
    conditional_expression -> logical_or_expression . [?,?] expression [:,:] conditional_expression {)}
    logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {)}
    logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {?}
    conditional_expression -> logical_or_expression . {,}
    conditional_expression -> logical_or_expression . [?,?] expression [:,:] conditional_expression {,}
    logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {OR_OP}
    logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {,}
check: reduce conditional_expression -> logical_or_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: conditional_expression -> logical_or_expression . {)}
reduce: conditional_expression -> 2 
reduce item: conditional_expression -> logical_or_expression . {)}
building new item: assignment_expression -> conditional_expression . {)}
building new item: assignment_expression -> conditional_expression . {,}
closure post reduce
LOOP: 131, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [postfix_expression,postfix_expression]
  [(,(]
  [conditional_expression,conditional_expression]
 state stack (kernel items of top state only):
  state 11
   kernel items:
    assignment_expression -> conditional_expression . {)}
    assignment_expression -> conditional_expression . {,}
check: reduce assignment_expression -> conditional_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: assignment_expression -> conditional_expression . {)}
reduce: assignment_expression -> 2 
reduce item: assignment_expression -> conditional_expression . {)}
building new item: argument_expression_list -> assignment_expression . {)}
building new item: argument_expression_list -> assignment_expression . {,}
closure post reduce
LOOP: 132, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [postfix_expression,postfix_expression]
  [(,(]
  [assignment_expression,assignment_expression]
 state stack (kernel items of top state only):
  state 11
   kernel items:
    argument_expression_list -> assignment_expression . {)}
    argument_expression_list -> assignment_expression . {,}
check: reduce argument_expression_list -> assignment_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: argument_expression_list -> assignment_expression . {)}
reduce: argument_expression_list -> 2 
reduce item: argument_expression_list -> assignment_expression . {)}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {=}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {[}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {(}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {.}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {PTR_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {INC_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {DEC_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {)}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {?}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {,}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {*}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {/}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {%}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {+}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {-}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {LEFT_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {<}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {>}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {LE_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {GE_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {EQ_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {NE_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {&}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {^}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {|}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {AND_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {OR_OP}
building new item: argument_expression_list -> argument_expression_list . [,,,] assignment_expression {)}
building new item: argument_expression_list -> argument_expression_list . [,,,] assignment_expression {,}
closure post reduce
LOOP: 133, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
 state stack (kernel items of top state only):
  state 11
   kernel items:
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {=}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {ADD_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {AND_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {DIV_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {MOD_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {MUL_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {OR_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {SUB_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {XOR_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {[}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {(}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {.}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {PTR_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {INC_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {DEC_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {)}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {?}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {,}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {*}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {/}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {%}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {+}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {-}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {LEFT_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {RIGHT_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {<}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {>}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {LE_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {GE_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {EQ_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {NE_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {&}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {^}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {|}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {AND_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {OR_OP}
    argument_expression_list -> argument_expression_list . [,,,] assignment_expression {)}
    argument_expression_list -> argument_expression_list . [,,,] assignment_expression {,}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {=}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {ADD_ASSIGN}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {AND_ASSIGN}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {DIV_ASSIGN}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {LEFT_ASSIGN}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {MOD_ASSIGN}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {MUL_ASSIGN}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {OR_ASSIGN}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {RIGHT_ASSIGN}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {SUB_ASSIGN}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {XOR_ASSIGN}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {[}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {(}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {.}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {PTR_OP}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {INC_OP}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {DEC_OP}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {)}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {?}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {,}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {*}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {/}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {%}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {+}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {-}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {LEFT_OP}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {RIGHT_OP}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {<}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {>}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {LE_OP}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {GE_OP}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {EQ_OP}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {NE_OP}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {&}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {^}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {|}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {AND_OP}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {OR_OP}
shifts: 38, reduces: 0, accepts: 0
shifting [),)]
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {=}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {[}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {(}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {.}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {PTR_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {INC_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {DEC_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {)}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {?}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {,}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {*}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {/}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {%}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {+}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {-}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {LEFT_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {RIGHT_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {<}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {>}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {LE_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {GE_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {EQ_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {NE_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {&}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {^}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {|}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {AND_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {OR_OP}
closure post shift
LOOP: 134, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [),)]
 state stack (kernel items of top state only):
  state 12
   kernel items:
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {=}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {ADD_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {AND_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {DIV_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {LEFT_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {MOD_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {MUL_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {OR_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {SUB_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {XOR_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {[}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {(}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {.}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {PTR_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {INC_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {DEC_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {)}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {?}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {,}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {*}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {/}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {%}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {+}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {-}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {LEFT_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {RIGHT_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {<}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {>}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {LE_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {GE_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {EQ_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {NE_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {&}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {^}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {|}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {AND_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {OR_OP}
check: reduce postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {=}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {[}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {(}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {.}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {)}
reduce: postfix_expression -> foo ( 2 ) 
reduce item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {)}
building new item: unary_expression -> postfix_expression . {=}
building new item: unary_expression -> postfix_expression . {ADD_ASSIGN}
building new item: unary_expression -> postfix_expression . {AND_ASSIGN}
building new item: unary_expression -> postfix_expression . {DIV_ASSIGN}
building new item: unary_expression -> postfix_expression . {LEFT_ASSIGN}
building new item: unary_expression -> postfix_expression . {MOD_ASSIGN}
building new item: unary_expression -> postfix_expression . {MUL_ASSIGN}
building new item: unary_expression -> postfix_expression . {OR_ASSIGN}
building new item: unary_expression -> postfix_expression . {RIGHT_ASSIGN}
building new item: unary_expression -> postfix_expression . {SUB_ASSIGN}
building new item: unary_expression -> postfix_expression . {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {=}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {=}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {=}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {=}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {=}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {=}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {=}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {[}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {[}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {[}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {[}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {[}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {[}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {[}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {(}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {(}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {(}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {(}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {(}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {(}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {(}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {.}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {.}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {.}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {.}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {.}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {.}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {.}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {INC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {INC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {INC_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {INC_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {INC_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {INC_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {INC_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DEC_OP}
building new item: unary_expression -> postfix_expression . {)}
building new item: unary_expression -> postfix_expression . {?}
building new item: unary_expression -> postfix_expression . {,}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {)}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {)}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {)}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {)}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {)}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {)}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {)}
building new item: unary_expression -> postfix_expression . {*}
building new item: unary_expression -> postfix_expression . {/}
building new item: unary_expression -> postfix_expression . {%}
building new item: unary_expression -> postfix_expression . {+}
building new item: unary_expression -> postfix_expression . {-}
building new item: unary_expression -> postfix_expression . {LEFT_OP}
building new item: unary_expression -> postfix_expression . {RIGHT_OP}
building new item: unary_expression -> postfix_expression . {<}
building new item: unary_expression -> postfix_expression . {>}
building new item: unary_expression -> postfix_expression . {LE_OP}
building new item: unary_expression -> postfix_expression . {GE_OP}
building new item: unary_expression -> postfix_expression . {EQ_OP}
building new item: unary_expression -> postfix_expression . {NE_OP}
building new item: unary_expression -> postfix_expression . {&}
building new item: unary_expression -> postfix_expression . {^}
building new item: unary_expression -> postfix_expression . {|}
building new item: unary_expression -> postfix_expression . {AND_OP}
building new item: unary_expression -> postfix_expression . {OR_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {?}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {?}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {?}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {?}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {?}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {?}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {?}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {,}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {,}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {,}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {,}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {,}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {,}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {,}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {*}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {*}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {*}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {*}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {*}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {*}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {*}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {/}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {/}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {/}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {/}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {/}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {/}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {/}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {%}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {%}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {%}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {%}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {%}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {%}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {%}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {+}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {+}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {+}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {+}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {+}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {+}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {+}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {-}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {-}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {-}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {-}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {-}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {-}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {-}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {<}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {<}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {<}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {<}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {<}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {<}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {<}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {>}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {>}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {>}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {>}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {>}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {>}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {>}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {LE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {LE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LE_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {LE_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LE_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LE_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LE_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {GE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {GE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {GE_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {GE_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {GE_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {GE_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {GE_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {NE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {NE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {NE_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {NE_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {NE_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {NE_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {NE_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {&}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {&}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {&}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {&}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {&}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {&}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {&}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {^}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {^}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {^}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {^}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {^}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {^}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {^}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {|}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {|}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {|}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {|}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {|}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {|}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {|}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {AND_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {AND_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {OR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {OR_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_OP}
closure post reduce
LOOP: 135, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [postfix_expression,postfix_expression]
 state stack (kernel items of top state only):
  state 9
   kernel items:
    unary_expression -> postfix_expression . {=}
    unary_expression -> postfix_expression . {ADD_ASSIGN}
    unary_expression -> postfix_expression . {AND_ASSIGN}
    unary_expression -> postfix_expression . {DIV_ASSIGN}
    unary_expression -> postfix_expression . {LEFT_ASSIGN}
    unary_expression -> postfix_expression . {MOD_ASSIGN}
    unary_expression -> postfix_expression . {MUL_ASSIGN}
    unary_expression -> postfix_expression . {OR_ASSIGN}
    unary_expression -> postfix_expression . {RIGHT_ASSIGN}
    unary_expression -> postfix_expression . {SUB_ASSIGN}
    unary_expression -> postfix_expression . {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {=}
    postfix_expression -> postfix_expression . [(,(] [),)] {=}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {=}
    postfix_expression -> postfix_expression . [.,.] [id,id] {=}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {=}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {=}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {=}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {[}
    postfix_expression -> postfix_expression . [(,(] [),)] {[}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {[}
    postfix_expression -> postfix_expression . [.,.] [id,id] {[}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {[}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {[}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {[}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {(}
    postfix_expression -> postfix_expression . [(,(] [),)] {(}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {(}
    postfix_expression -> postfix_expression . [.,.] [id,id] {(}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {(}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {(}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {(}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {.}
    postfix_expression -> postfix_expression . [(,(] [),)] {.}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {.}
    postfix_expression -> postfix_expression . [.,.] [id,id] {.}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {.}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {.}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {.}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {PTR_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {PTR_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {PTR_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {PTR_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {PTR_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {PTR_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {PTR_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {INC_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {INC_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {INC_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {INC_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {INC_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {INC_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {INC_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {DEC_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {DEC_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DEC_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {DEC_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DEC_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DEC_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DEC_OP}
    unary_expression -> postfix_expression . {)}
    unary_expression -> postfix_expression . {?}
    unary_expression -> postfix_expression . {,}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {)}
    postfix_expression -> postfix_expression . [(,(] [),)] {)}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {)}
    postfix_expression -> postfix_expression . [.,.] [id,id] {)}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {)}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {)}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {)}
    unary_expression -> postfix_expression . {*}
    unary_expression -> postfix_expression . {/}
    unary_expression -> postfix_expression . {%}
    unary_expression -> postfix_expression . {+}
    unary_expression -> postfix_expression . {-}
    unary_expression -> postfix_expression . {LEFT_OP}
    unary_expression -> postfix_expression . {RIGHT_OP}
    unary_expression -> postfix_expression . {<}
    unary_expression -> postfix_expression . {>}
    unary_expression -> postfix_expression . {LE_OP}
    unary_expression -> postfix_expression . {GE_OP}
    unary_expression -> postfix_expression . {EQ_OP}
    unary_expression -> postfix_expression . {NE_OP}
    unary_expression -> postfix_expression . {&}
    unary_expression -> postfix_expression . {^}
    unary_expression -> postfix_expression . {|}
    unary_expression -> postfix_expression . {AND_OP}
    unary_expression -> postfix_expression . {OR_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {?}
    postfix_expression -> postfix_expression . [(,(] [),)] {?}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {?}
    postfix_expression -> postfix_expression . [.,.] [id,id] {?}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {?}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {?}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {?}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {,}
    postfix_expression -> postfix_expression . [(,(] [),)] {,}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {,}
    postfix_expression -> postfix_expression . [.,.] [id,id] {,}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {,}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {,}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {,}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {*}
    postfix_expression -> postfix_expression . [(,(] [),)] {*}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {*}
    postfix_expression -> postfix_expression . [.,.] [id,id] {*}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {*}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {*}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {*}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {/}
    postfix_expression -> postfix_expression . [(,(] [),)] {/}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {/}
    postfix_expression -> postfix_expression . [.,.] [id,id] {/}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {/}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {/}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {/}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {%}
    postfix_expression -> postfix_expression . [(,(] [),)] {%}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {%}
    postfix_expression -> postfix_expression . [.,.] [id,id] {%}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {%}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {%}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {%}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {+}
    postfix_expression -> postfix_expression . [(,(] [),)] {+}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {+}
    postfix_expression -> postfix_expression . [.,.] [id,id] {+}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {+}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {+}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {+}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {-}
    postfix_expression -> postfix_expression . [(,(] [),)] {-}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {-}
    postfix_expression -> postfix_expression . [.,.] [id,id] {-}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {-}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {-}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {-}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {<}
    postfix_expression -> postfix_expression . [(,(] [),)] {<}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {<}
    postfix_expression -> postfix_expression . [.,.] [id,id] {<}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {<}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {<}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {<}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {>}
    postfix_expression -> postfix_expression . [(,(] [),)] {>}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {>}
    postfix_expression -> postfix_expression . [.,.] [id,id] {>}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {>}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {>}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {>}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {LE_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {LE_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LE_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {LE_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LE_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LE_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LE_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {GE_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {GE_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {GE_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {GE_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {GE_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {GE_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {GE_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {EQ_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {EQ_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {EQ_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {EQ_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {EQ_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {EQ_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {EQ_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {NE_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {NE_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {NE_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {NE_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {NE_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {NE_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {NE_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {&}
    postfix_expression -> postfix_expression . [(,(] [),)] {&}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {&}
    postfix_expression -> postfix_expression . [.,.] [id,id] {&}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {&}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {&}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {&}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {^}
    postfix_expression -> postfix_expression . [(,(] [),)] {^}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {^}
    postfix_expression -> postfix_expression . [.,.] [id,id] {^}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {^}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {^}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {^}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {|}
    postfix_expression -> postfix_expression . [(,(] [),)] {|}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {|}
    postfix_expression -> postfix_expression . [.,.] [id,id] {|}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {|}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {|}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {|}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {AND_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {AND_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {OR_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {OR_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_OP}
check: reduce unary_expression -> postfix_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: unary_expression -> postfix_expression . {=}
trying to reduce by: unary_expression -> postfix_expression . {ADD_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {AND_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {DIV_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {LEFT_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {MOD_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {MUL_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {OR_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {RIGHT_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {SUB_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {=}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {=}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {=}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {=}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {=}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {=}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {=}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {[}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {[}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {[}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {[}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {[}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {[}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {[}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {(}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {(}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {(}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {(}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {(}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {(}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {(}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {.}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {.}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {.}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {.}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {.}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {.}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {.}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DEC_OP}
trying to reduce by: unary_expression -> postfix_expression . {)}
reduce: unary_expression -> foo ( 2 ) 
reduce item: unary_expression -> postfix_expression . {)}
building new item: assignment_expression -> unary_expression . assignment_operator assignment_expression {)}
building new item: assignment_expression -> unary_expression . assignment_operator assignment_expression {,}
building new item: cast_expression -> unary_expression . {)}
building new item: cast_expression -> unary_expression . {?}
building new item: cast_expression -> unary_expression . {,}
building new item: cast_expression -> unary_expression . {*}
building new item: cast_expression -> unary_expression . {/}
building new item: cast_expression -> unary_expression . {%}
building new item: cast_expression -> unary_expression . {+}
building new item: cast_expression -> unary_expression . {-}
building new item: cast_expression -> unary_expression . {LEFT_OP}
building new item: cast_expression -> unary_expression . {RIGHT_OP}
building new item: cast_expression -> unary_expression . {<}
building new item: cast_expression -> unary_expression . {>}
building new item: cast_expression -> unary_expression . {LE_OP}
building new item: cast_expression -> unary_expression . {GE_OP}
building new item: cast_expression -> unary_expression . {EQ_OP}
building new item: cast_expression -> unary_expression . {NE_OP}
building new item: cast_expression -> unary_expression . {&}
building new item: cast_expression -> unary_expression . {^}
building new item: cast_expression -> unary_expression . {|}
building new item: cast_expression -> unary_expression . {AND_OP}
building new item: cast_expression -> unary_expression . {OR_OP}
closure post reduce
LOOP: 136, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [unary_expression,unary_expression]
 state stack (kernel items of top state only):
  state 9
   kernel items:
    assignment_expression -> unary_expression . assignment_operator assignment_expression {)}
    assignment_expression -> unary_expression . assignment_operator assignment_expression {,}
    cast_expression -> unary_expression . {)}
    cast_expression -> unary_expression . {?}
    cast_expression -> unary_expression . {,}
    cast_expression -> unary_expression . {*}
    cast_expression -> unary_expression . {/}
    cast_expression -> unary_expression . {%}
    cast_expression -> unary_expression . {+}
    cast_expression -> unary_expression . {-}
    cast_expression -> unary_expression . {LEFT_OP}
    cast_expression -> unary_expression . {RIGHT_OP}
    cast_expression -> unary_expression . {<}
    cast_expression -> unary_expression . {>}
    cast_expression -> unary_expression . {LE_OP}
    cast_expression -> unary_expression . {GE_OP}
    cast_expression -> unary_expression . {EQ_OP}
    cast_expression -> unary_expression . {NE_OP}
    cast_expression -> unary_expression . {&}
    cast_expression -> unary_expression . {^}
    cast_expression -> unary_expression . {|}
    cast_expression -> unary_expression . {AND_OP}
    cast_expression -> unary_expression . {OR_OP}
check: reduce cast_expression -> unary_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: assignment_expression -> unary_expression . assignment_operator assignment_expression {)}
trying to reduce by: assignment_expression -> unary_expression . assignment_operator assignment_expression {,}
trying to reduce by: cast_expression -> unary_expression . {)}
reduce: cast_expression -> foo ( 2 ) 
reduce item: cast_expression -> unary_expression . {)}
building new item: multiplicative_expression -> cast_expression . {)}
building new item: multiplicative_expression -> cast_expression . {?}
building new item: multiplicative_expression -> cast_expression . {,}
building new item: multiplicative_expression -> cast_expression . {*}
building new item: multiplicative_expression -> cast_expression . {/}
building new item: multiplicative_expression -> cast_expression . {%}
building new item: multiplicative_expression -> cast_expression . {+}
building new item: multiplicative_expression -> cast_expression . {-}
building new item: multiplicative_expression -> cast_expression . {LEFT_OP}
building new item: multiplicative_expression -> cast_expression . {RIGHT_OP}
building new item: multiplicative_expression -> cast_expression . {<}
building new item: multiplicative_expression -> cast_expression . {>}
building new item: multiplicative_expression -> cast_expression . {LE_OP}
building new item: multiplicative_expression -> cast_expression . {GE_OP}
building new item: multiplicative_expression -> cast_expression . {EQ_OP}
building new item: multiplicative_expression -> cast_expression . {NE_OP}
building new item: multiplicative_expression -> cast_expression . {&}
building new item: multiplicative_expression -> cast_expression . {^}
building new item: multiplicative_expression -> cast_expression . {|}
building new item: multiplicative_expression -> cast_expression . {AND_OP}
building new item: multiplicative_expression -> cast_expression . {OR_OP}
closure post reduce
LOOP: 137, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [cast_expression,cast_expression]
 state stack (kernel items of top state only):
  state 9
   kernel items:
    multiplicative_expression -> cast_expression . {)}
    multiplicative_expression -> cast_expression . {?}
    multiplicative_expression -> cast_expression . {,}
    multiplicative_expression -> cast_expression . {*}
    multiplicative_expression -> cast_expression . {/}
    multiplicative_expression -> cast_expression . {%}
    multiplicative_expression -> cast_expression . {+}
    multiplicative_expression -> cast_expression . {-}
    multiplicative_expression -> cast_expression . {LEFT_OP}
    multiplicative_expression -> cast_expression . {RIGHT_OP}
    multiplicative_expression -> cast_expression . {<}
    multiplicative_expression -> cast_expression . {>}
    multiplicative_expression -> cast_expression . {LE_OP}
    multiplicative_expression -> cast_expression . {GE_OP}
    multiplicative_expression -> cast_expression . {EQ_OP}
    multiplicative_expression -> cast_expression . {NE_OP}
    multiplicative_expression -> cast_expression . {&}
    multiplicative_expression -> cast_expression . {^}
    multiplicative_expression -> cast_expression . {|}
    multiplicative_expression -> cast_expression . {AND_OP}
    multiplicative_expression -> cast_expression . {OR_OP}
check: reduce multiplicative_expression -> cast_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: multiplicative_expression -> cast_expression . {)}
reduce: multiplicative_expression -> foo ( 2 ) 
reduce item: multiplicative_expression -> cast_expression . {)}
building new item: additive_expression -> multiplicative_expression . {)}
building new item: additive_expression -> multiplicative_expression . {?}
building new item: additive_expression -> multiplicative_expression . {,}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {)}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {)}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {)}
building new item: additive_expression -> multiplicative_expression . {+}
building new item: additive_expression -> multiplicative_expression . {-}
building new item: additive_expression -> multiplicative_expression . {LEFT_OP}
building new item: additive_expression -> multiplicative_expression . {RIGHT_OP}
building new item: additive_expression -> multiplicative_expression . {<}
building new item: additive_expression -> multiplicative_expression . {>}
building new item: additive_expression -> multiplicative_expression . {LE_OP}
building new item: additive_expression -> multiplicative_expression . {GE_OP}
building new item: additive_expression -> multiplicative_expression . {EQ_OP}
building new item: additive_expression -> multiplicative_expression . {NE_OP}
building new item: additive_expression -> multiplicative_expression . {&}
building new item: additive_expression -> multiplicative_expression . {^}
building new item: additive_expression -> multiplicative_expression . {|}
building new item: additive_expression -> multiplicative_expression . {AND_OP}
building new item: additive_expression -> multiplicative_expression . {OR_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {?}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {?}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {?}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {,}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {,}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {,}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {*}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {*}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {*}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {/}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {/}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {/}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {%}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {%}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {%}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {+}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {+}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {+}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {-}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {-}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {-}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {LEFT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {LEFT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {LEFT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {RIGHT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {RIGHT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {RIGHT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {<}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {<}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {<}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {>}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {>}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {>}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {LE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {LE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {LE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {GE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {GE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {GE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {EQ_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {EQ_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {EQ_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {NE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {NE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {NE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {&}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {&}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {&}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {^}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {^}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {^}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {|}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {|}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {|}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {AND_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {AND_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {AND_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {OR_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {OR_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {OR_OP}
closure post reduce
LOOP: 138, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [multiplicative_expression,multiplicative_expression]
 state stack (kernel items of top state only):
  state 9
   kernel items:
    additive_expression -> multiplicative_expression . {)}
    additive_expression -> multiplicative_expression . {?}
    additive_expression -> multiplicative_expression . {,}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {)}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {)}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {)}
    additive_expression -> multiplicative_expression . {+}
    additive_expression -> multiplicative_expression . {-}
    additive_expression -> multiplicative_expression . {LEFT_OP}
    additive_expression -> multiplicative_expression . {RIGHT_OP}
    additive_expression -> multiplicative_expression . {<}
    additive_expression -> multiplicative_expression . {>}
    additive_expression -> multiplicative_expression . {LE_OP}
    additive_expression -> multiplicative_expression . {GE_OP}
    additive_expression -> multiplicative_expression . {EQ_OP}
    additive_expression -> multiplicative_expression . {NE_OP}
    additive_expression -> multiplicative_expression . {&}
    additive_expression -> multiplicative_expression . {^}
    additive_expression -> multiplicative_expression . {|}
    additive_expression -> multiplicative_expression . {AND_OP}
    additive_expression -> multiplicative_expression . {OR_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {?}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {?}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {?}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {,}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {,}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {,}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {*}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {*}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {*}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {/}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {/}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {/}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {%}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {%}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {%}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {+}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {+}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {+}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {-}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {-}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {-}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {LEFT_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {LEFT_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {LEFT_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {RIGHT_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {RIGHT_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {RIGHT_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {<}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {<}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {<}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {>}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {>}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {>}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {LE_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {LE_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {LE_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {GE_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {GE_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {GE_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {EQ_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {EQ_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {EQ_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {NE_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {NE_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {NE_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {&}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {&}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {&}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {^}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {^}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {^}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {|}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {|}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {|}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {AND_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {AND_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {AND_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {OR_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {OR_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {OR_OP}
check: reduce additive_expression -> multiplicative_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: additive_expression -> multiplicative_expression . {)}
reduce: additive_expression -> foo ( 2 ) 
reduce item: additive_expression -> multiplicative_expression . {)}
building new item: shift_expression -> additive_expression . {)}
building new item: shift_expression -> additive_expression . {?}
building new item: shift_expression -> additive_expression . {,}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {)}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {)}
building new item: shift_expression -> additive_expression . {LEFT_OP}
building new item: shift_expression -> additive_expression . {RIGHT_OP}
building new item: shift_expression -> additive_expression . {<}
building new item: shift_expression -> additive_expression . {>}
building new item: shift_expression -> additive_expression . {LE_OP}
building new item: shift_expression -> additive_expression . {GE_OP}
building new item: shift_expression -> additive_expression . {EQ_OP}
building new item: shift_expression -> additive_expression . {NE_OP}
building new item: shift_expression -> additive_expression . {&}
building new item: shift_expression -> additive_expression . {^}
building new item: shift_expression -> additive_expression . {|}
building new item: shift_expression -> additive_expression . {AND_OP}
building new item: shift_expression -> additive_expression . {OR_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {?}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {?}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {,}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {,}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {+}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {+}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {-}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {-}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {LEFT_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {LEFT_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {RIGHT_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {RIGHT_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {<}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {<}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {>}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {>}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {LE_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {LE_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {GE_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {GE_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {EQ_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {EQ_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {NE_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {NE_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {&}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {&}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {^}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {^}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {|}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {|}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {AND_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {AND_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {OR_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {OR_OP}
closure post reduce
LOOP: 139, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [additive_expression,additive_expression]
 state stack (kernel items of top state only):
  state 9
   kernel items:
    shift_expression -> additive_expression . {)}
    shift_expression -> additive_expression . {?}
    shift_expression -> additive_expression . {,}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {)}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {)}
    shift_expression -> additive_expression . {LEFT_OP}
    shift_expression -> additive_expression . {RIGHT_OP}
    shift_expression -> additive_expression . {<}
    shift_expression -> additive_expression . {>}
    shift_expression -> additive_expression . {LE_OP}
    shift_expression -> additive_expression . {GE_OP}
    shift_expression -> additive_expression . {EQ_OP}
    shift_expression -> additive_expression . {NE_OP}
    shift_expression -> additive_expression . {&}
    shift_expression -> additive_expression . {^}
    shift_expression -> additive_expression . {|}
    shift_expression -> additive_expression . {AND_OP}
    shift_expression -> additive_expression . {OR_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {?}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {?}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {,}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {,}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {+}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {+}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {-}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {-}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {LEFT_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {LEFT_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {RIGHT_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {RIGHT_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {<}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {<}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {>}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {>}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {LE_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {LE_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {GE_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {GE_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {EQ_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {EQ_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {NE_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {NE_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {&}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {&}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {^}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {^}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {|}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {|}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {AND_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {AND_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {OR_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {OR_OP}
check: reduce shift_expression -> additive_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: shift_expression -> additive_expression . {)}
reduce: shift_expression -> foo ( 2 ) 
reduce item: shift_expression -> additive_expression . {)}
building new item: relational_expression -> shift_expression . {)}
building new item: relational_expression -> shift_expression . {?}
building new item: relational_expression -> shift_expression . {,}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {)}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {)}
building new item: relational_expression -> shift_expression . {<}
building new item: relational_expression -> shift_expression . {>}
building new item: relational_expression -> shift_expression . {LE_OP}
building new item: relational_expression -> shift_expression . {GE_OP}
building new item: relational_expression -> shift_expression . {EQ_OP}
building new item: relational_expression -> shift_expression . {NE_OP}
building new item: relational_expression -> shift_expression . {&}
building new item: relational_expression -> shift_expression . {^}
building new item: relational_expression -> shift_expression . {|}
building new item: relational_expression -> shift_expression . {AND_OP}
building new item: relational_expression -> shift_expression . {OR_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {?}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {?}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {,}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {,}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {LEFT_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {LEFT_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {RIGHT_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {RIGHT_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {<}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {<}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {>}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {>}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {LE_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {LE_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {GE_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {GE_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {EQ_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {EQ_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {NE_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {NE_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {&}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {&}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {^}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {^}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {|}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {|}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {AND_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {AND_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {OR_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {OR_OP}
closure post reduce
LOOP: 140, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [shift_expression,shift_expression]
 state stack (kernel items of top state only):
  state 9
   kernel items:
    relational_expression -> shift_expression . {)}
    relational_expression -> shift_expression . {?}
    relational_expression -> shift_expression . {,}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {)}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {)}
    relational_expression -> shift_expression . {<}
    relational_expression -> shift_expression . {>}
    relational_expression -> shift_expression . {LE_OP}
    relational_expression -> shift_expression . {GE_OP}
    relational_expression -> shift_expression . {EQ_OP}
    relational_expression -> shift_expression . {NE_OP}
    relational_expression -> shift_expression . {&}
    relational_expression -> shift_expression . {^}
    relational_expression -> shift_expression . {|}
    relational_expression -> shift_expression . {AND_OP}
    relational_expression -> shift_expression . {OR_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {?}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {?}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {,}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {,}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {LEFT_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {LEFT_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {RIGHT_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {RIGHT_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {<}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {<}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {>}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {>}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {LE_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {LE_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {GE_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {GE_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {EQ_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {EQ_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {NE_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {NE_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {&}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {&}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {^}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {^}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {|}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {|}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {AND_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {AND_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {OR_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {OR_OP}
check: reduce relational_expression -> shift_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: relational_expression -> shift_expression . {)}
reduce: relational_expression -> foo ( 2 ) 
reduce item: relational_expression -> shift_expression . {)}
building new item: equality_expression -> relational_expression . {)}
building new item: equality_expression -> relational_expression . {?}
building new item: equality_expression -> relational_expression . {,}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {)}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {)}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {)}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {)}
building new item: equality_expression -> relational_expression . {EQ_OP}
building new item: equality_expression -> relational_expression . {NE_OP}
building new item: equality_expression -> relational_expression . {&}
building new item: equality_expression -> relational_expression . {^}
building new item: equality_expression -> relational_expression . {|}
building new item: equality_expression -> relational_expression . {AND_OP}
building new item: equality_expression -> relational_expression . {OR_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {?}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {?}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {?}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {?}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {,}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {,}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {,}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {,}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {<}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {<}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {<}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {<}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {>}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {>}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {>}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {>}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {LE_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {LE_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {LE_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {LE_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {GE_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {GE_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {GE_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {GE_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {EQ_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {EQ_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {EQ_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {EQ_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {NE_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {NE_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {NE_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {NE_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {&}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {&}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {&}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {&}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {^}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {^}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {^}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {^}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {|}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {|}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {|}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {|}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {AND_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {AND_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {AND_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {AND_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {OR_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {OR_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {OR_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {OR_OP}
closure post reduce
LOOP: 141, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [relational_expression,relational_expression]
 state stack (kernel items of top state only):
  state 9
   kernel items:
    equality_expression -> relational_expression . {)}
    equality_expression -> relational_expression . {?}
    equality_expression -> relational_expression . {,}
    relational_expression -> relational_expression . [<,<] shift_expression {)}
    relational_expression -> relational_expression . [>,>] shift_expression {)}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {)}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {)}
    equality_expression -> relational_expression . {EQ_OP}
    equality_expression -> relational_expression . {NE_OP}
    equality_expression -> relational_expression . {&}
    equality_expression -> relational_expression . {^}
    equality_expression -> relational_expression . {|}
    equality_expression -> relational_expression . {AND_OP}
    equality_expression -> relational_expression . {OR_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {?}
    relational_expression -> relational_expression . [>,>] shift_expression {?}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {?}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {?}
    relational_expression -> relational_expression . [<,<] shift_expression {,}
    relational_expression -> relational_expression . [>,>] shift_expression {,}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {,}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {,}
    relational_expression -> relational_expression . [<,<] shift_expression {<}
    relational_expression -> relational_expression . [>,>] shift_expression {<}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {<}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {<}
    relational_expression -> relational_expression . [<,<] shift_expression {>}
    relational_expression -> relational_expression . [>,>] shift_expression {>}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {>}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {>}
    relational_expression -> relational_expression . [<,<] shift_expression {LE_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {LE_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {LE_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {LE_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {GE_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {GE_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {GE_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {GE_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {EQ_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {EQ_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {EQ_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {EQ_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {NE_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {NE_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {NE_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {NE_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {&}
    relational_expression -> relational_expression . [>,>] shift_expression {&}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {&}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {&}
    relational_expression -> relational_expression . [<,<] shift_expression {^}
    relational_expression -> relational_expression . [>,>] shift_expression {^}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {^}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {^}
    relational_expression -> relational_expression . [<,<] shift_expression {|}
    relational_expression -> relational_expression . [>,>] shift_expression {|}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {|}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {|}
    relational_expression -> relational_expression . [<,<] shift_expression {AND_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {AND_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {AND_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {AND_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {OR_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {OR_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {OR_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {OR_OP}
check: reduce equality_expression -> relational_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: equality_expression -> relational_expression . {)}
reduce: equality_expression -> foo ( 2 ) 
reduce item: equality_expression -> relational_expression . {)}
building new item: and_expression -> equality_expression . {)}
building new item: and_expression -> equality_expression . {?}
building new item: and_expression -> equality_expression . {,}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {)}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {)}
building new item: and_expression -> equality_expression . {&}
building new item: and_expression -> equality_expression . {^}
building new item: and_expression -> equality_expression . {|}
building new item: and_expression -> equality_expression . {AND_OP}
building new item: and_expression -> equality_expression . {OR_OP}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {?}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {?}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {,}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {,}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {EQ_OP}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {EQ_OP}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {NE_OP}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {NE_OP}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {&}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {&}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {^}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {^}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {|}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {|}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {AND_OP}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {AND_OP}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {OR_OP}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {OR_OP}
closure post reduce
LOOP: 142, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [equality_expression,equality_expression]
 state stack (kernel items of top state only):
  state 9
   kernel items:
    and_expression -> equality_expression . {)}
    and_expression -> equality_expression . {?}
    and_expression -> equality_expression . {,}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {)}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {)}
    and_expression -> equality_expression . {&}
    and_expression -> equality_expression . {^}
    and_expression -> equality_expression . {|}
    and_expression -> equality_expression . {AND_OP}
    and_expression -> equality_expression . {OR_OP}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {?}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {?}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {,}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {,}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {EQ_OP}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {EQ_OP}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {NE_OP}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {NE_OP}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {&}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {&}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {^}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {^}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {|}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {|}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {AND_OP}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {AND_OP}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {OR_OP}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {OR_OP}
check: reduce and_expression -> equality_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: and_expression -> equality_expression . {)}
reduce: and_expression -> foo ( 2 ) 
reduce item: and_expression -> equality_expression . {)}
building new item: exclusive_or_expression -> and_expression . {)}
building new item: exclusive_or_expression -> and_expression . {?}
building new item: exclusive_or_expression -> and_expression . {,}
building new item: and_expression -> and_expression . [&,&] equality_expression {)}
building new item: exclusive_or_expression -> and_expression . {^}
building new item: exclusive_or_expression -> and_expression . {|}
building new item: exclusive_or_expression -> and_expression . {AND_OP}
building new item: exclusive_or_expression -> and_expression . {OR_OP}
building new item: and_expression -> and_expression . [&,&] equality_expression {?}
building new item: and_expression -> and_expression . [&,&] equality_expression {,}
building new item: and_expression -> and_expression . [&,&] equality_expression {&}
building new item: and_expression -> and_expression . [&,&] equality_expression {^}
building new item: and_expression -> and_expression . [&,&] equality_expression {|}
building new item: and_expression -> and_expression . [&,&] equality_expression {AND_OP}
building new item: and_expression -> and_expression . [&,&] equality_expression {OR_OP}
closure post reduce
LOOP: 143, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [and_expression,and_expression]
 state stack (kernel items of top state only):
  state 9
   kernel items:
    exclusive_or_expression -> and_expression . {)}
    exclusive_or_expression -> and_expression . {?}
    exclusive_or_expression -> and_expression . {,}
    and_expression -> and_expression . [&,&] equality_expression {)}
    exclusive_or_expression -> and_expression . {^}
    exclusive_or_expression -> and_expression . {|}
    exclusive_or_expression -> and_expression . {AND_OP}
    exclusive_or_expression -> and_expression . {OR_OP}
    and_expression -> and_expression . [&,&] equality_expression {?}
    and_expression -> and_expression . [&,&] equality_expression {,}
    and_expression -> and_expression . [&,&] equality_expression {&}
    and_expression -> and_expression . [&,&] equality_expression {^}
    and_expression -> and_expression . [&,&] equality_expression {|}
    and_expression -> and_expression . [&,&] equality_expression {AND_OP}
    and_expression -> and_expression . [&,&] equality_expression {OR_OP}
check: reduce exclusive_or_expression -> and_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: exclusive_or_expression -> and_expression . {)}
reduce: exclusive_or_expression -> foo ( 2 ) 
reduce item: exclusive_or_expression -> and_expression . {)}
building new item: inclusive_or_expression -> exclusive_or_expression . {)}
building new item: inclusive_or_expression -> exclusive_or_expression . {?}
building new item: inclusive_or_expression -> exclusive_or_expression . {,}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {)}
building new item: inclusive_or_expression -> exclusive_or_expression . {|}
building new item: inclusive_or_expression -> exclusive_or_expression . {AND_OP}
building new item: inclusive_or_expression -> exclusive_or_expression . {OR_OP}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {?}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {,}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {^}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {|}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {AND_OP}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {OR_OP}
closure post reduce
LOOP: 144, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [exclusive_or_expression,exclusive_or_expression]
 state stack (kernel items of top state only):
  state 9
   kernel items:
    inclusive_or_expression -> exclusive_or_expression . {)}
    inclusive_or_expression -> exclusive_or_expression . {?}
    inclusive_or_expression -> exclusive_or_expression . {,}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {)}
    inclusive_or_expression -> exclusive_or_expression . {|}
    inclusive_or_expression -> exclusive_or_expression . {AND_OP}
    inclusive_or_expression -> exclusive_or_expression . {OR_OP}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {?}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {,}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {^}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {|}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {AND_OP}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {OR_OP}
check: reduce inclusive_or_expression -> exclusive_or_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: inclusive_or_expression -> exclusive_or_expression . {)}
reduce: inclusive_or_expression -> foo ( 2 ) 
reduce item: inclusive_or_expression -> exclusive_or_expression . {)}
building new item: logical_and_expression -> inclusive_or_expression . {)}
building new item: logical_and_expression -> inclusive_or_expression . {?}
building new item: logical_and_expression -> inclusive_or_expression . {,}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {)}
building new item: logical_and_expression -> inclusive_or_expression . {AND_OP}
building new item: logical_and_expression -> inclusive_or_expression . {OR_OP}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {?}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {,}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {|}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {AND_OP}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {OR_OP}
closure post reduce
LOOP: 145, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [inclusive_or_expression,inclusive_or_expression]
 state stack (kernel items of top state only):
  state 9
   kernel items:
    logical_and_expression -> inclusive_or_expression . {)}
    logical_and_expression -> inclusive_or_expression . {?}
    logical_and_expression -> inclusive_or_expression . {,}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {)}
    logical_and_expression -> inclusive_or_expression . {AND_OP}
    logical_and_expression -> inclusive_or_expression . {OR_OP}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {?}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {,}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {|}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {AND_OP}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {OR_OP}
check: reduce logical_and_expression -> inclusive_or_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: logical_and_expression -> inclusive_or_expression . {)}
reduce: logical_and_expression -> foo ( 2 ) 
reduce item: logical_and_expression -> inclusive_or_expression . {)}
building new item: logical_or_expression -> logical_and_expression . {)}
building new item: logical_or_expression -> logical_and_expression . {?}
building new item: logical_or_expression -> logical_and_expression . {,}
building new item: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {)}
building new item: logical_or_expression -> logical_and_expression . {OR_OP}
building new item: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {?}
building new item: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {,}
building new item: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {AND_OP}
building new item: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {OR_OP}
closure post reduce
LOOP: 146, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [logical_and_expression,logical_and_expression]
 state stack (kernel items of top state only):
  state 9
   kernel items:
    logical_or_expression -> logical_and_expression . {)}
    logical_or_expression -> logical_and_expression . {?}
    logical_or_expression -> logical_and_expression . {,}
    logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {)}
    logical_or_expression -> logical_and_expression . {OR_OP}
    logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {?}
    logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {,}
    logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {AND_OP}
    logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {OR_OP}
check: reduce logical_or_expression -> logical_and_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: logical_or_expression -> logical_and_expression . {)}
reduce: logical_or_expression -> foo ( 2 ) 
reduce item: logical_or_expression -> logical_and_expression . {)}
building new item: conditional_expression -> logical_or_expression . {)}
building new item: conditional_expression -> logical_or_expression . [?,?] expression [:,:] conditional_expression {)}
building new item: conditional_expression -> logical_or_expression . {,}
building new item: conditional_expression -> logical_or_expression . [?,?] expression [:,:] conditional_expression {,}
building new item: logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {)}
building new item: logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {?}
building new item: logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {,}
building new item: logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {OR_OP}
closure post reduce
LOOP: 147, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [logical_or_expression,logical_or_expression]
 state stack (kernel items of top state only):
  state 9
   kernel items:
    conditional_expression -> logical_or_expression . {)}
    conditional_expression -> logical_or_expression . [?,?] expression [:,:] conditional_expression {)}
    conditional_expression -> logical_or_expression . {,}
    conditional_expression -> logical_or_expression . [?,?] expression [:,:] conditional_expression {,}
    logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {)}
    logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {?}
    logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {,}
    logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {OR_OP}
check: reduce conditional_expression -> logical_or_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: conditional_expression -> logical_or_expression . {)}
reduce: conditional_expression -> foo ( 2 ) 
reduce item: conditional_expression -> logical_or_expression . {)}
building new item: assignment_expression -> conditional_expression . {)}
building new item: assignment_expression -> conditional_expression . {,}
closure post reduce
LOOP: 148, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [conditional_expression,conditional_expression]
 state stack (kernel items of top state only):
  state 9
   kernel items:
    assignment_expression -> conditional_expression . {)}
    assignment_expression -> conditional_expression . {,}
check: reduce assignment_expression -> conditional_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: assignment_expression -> conditional_expression . {)}
reduce: assignment_expression -> foo ( 2 ) 
reduce item: assignment_expression -> conditional_expression . {)}
building new item: argument_expression_list -> argument_expression_list [,,,] assignment_expression . {)}
building new item: argument_expression_list -> argument_expression_list [,,,] assignment_expression . {,}
closure post reduce
LOOP: 149, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [,,,]
  [assignment_expression,assignment_expression]
 state stack (kernel items of top state only):
  state 9
   kernel items:
    argument_expression_list -> argument_expression_list [,,,] assignment_expression . {)}
    argument_expression_list -> argument_expression_list [,,,] assignment_expression . {,}
check: reduce argument_expression_list -> argument_expression_list [,,,] assignment_expression . {)}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: argument_expression_list -> argument_expression_list [,,,] assignment_expression . {)}
reduce: argument_expression_list -> "%d!\n" , foo ( 2 ) 
reduce item: argument_expression_list -> argument_expression_list [,,,] assignment_expression . {)}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {=}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {[}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {(}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {.}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {PTR_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {INC_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {DEC_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {;}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {?}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {*}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {/}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {%}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {+}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {-}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {LEFT_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {<}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {>}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {LE_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {GE_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {EQ_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {NE_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {&}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {^}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {|}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {AND_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {OR_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {,}
building new item: argument_expression_list -> argument_expression_list . [,,,] assignment_expression {)}
building new item: argument_expression_list -> argument_expression_list . [,,,] assignment_expression {,}
closure post reduce
LOOP: 150, token: ), token_value: )
[verbose dump (every loop)]
parser state:
current token: ), value: )
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {=}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {ADD_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {AND_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {DIV_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {MOD_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {MUL_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {OR_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {SUB_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {XOR_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {[}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {(}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {.}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {PTR_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {INC_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {DEC_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {;}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {?}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {*}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {/}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {%}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {+}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {-}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {LEFT_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {RIGHT_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {<}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {>}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {LE_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {GE_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {EQ_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {NE_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {&}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {^}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {|}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {AND_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {OR_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {,}
    argument_expression_list -> argument_expression_list . [,,,] assignment_expression {)}
    argument_expression_list -> argument_expression_list . [,,,] assignment_expression {,}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {=}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {ADD_ASSIGN}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {AND_ASSIGN}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {DIV_ASSIGN}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {LEFT_ASSIGN}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {MOD_ASSIGN}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {MUL_ASSIGN}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {OR_ASSIGN}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {RIGHT_ASSIGN}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {SUB_ASSIGN}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {XOR_ASSIGN}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {[}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {(}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {.}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {PTR_OP}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {INC_OP}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {DEC_OP}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {;}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {?}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {*}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {/}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {%}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {+}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {-}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {LEFT_OP}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {RIGHT_OP}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {<}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {>}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {LE_OP}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {GE_OP}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {EQ_OP}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {NE_OP}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {&}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {^}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {|}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {AND_OP}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {OR_OP}
check: shift postfix_expression -> postfix_expression [(,(] argument_expression_list . [),)] {,}
shifts: 38, reduces: 0, accepts: 0
shifting [),)]
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {=}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {[}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {(}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {.}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {PTR_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {INC_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {DEC_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {;}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {?}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {*}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {/}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {%}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {+}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {-}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {LEFT_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {RIGHT_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {<}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {>}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {LE_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {GE_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {EQ_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {NE_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {&}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {^}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {|}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {AND_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {OR_OP}
building new item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {,}
closure post shift
LOOP: 151, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
  [(,(]
  [argument_expression_list,argument_expression_list]
  [),)]
 state stack (kernel items of top state only):
  state 8
   kernel items:
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {=}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {ADD_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {AND_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {DIV_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {LEFT_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {MOD_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {MUL_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {OR_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {SUB_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {XOR_ASSIGN}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {[}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {(}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {.}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {PTR_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {INC_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {DEC_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {;}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {?}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {*}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {/}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {%}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {+}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {-}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {LEFT_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {RIGHT_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {<}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {>}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {LE_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {GE_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {EQ_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {NE_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {&}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {^}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {|}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {AND_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {OR_OP}
    postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {,}
check: reduce postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {=}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {[}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {(}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {.}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {;}
reduce: postfix_expression -> printf ( "%d!\n" , foo ( 2 ) ) 
reduce item: postfix_expression -> postfix_expression [(,(] argument_expression_list [),)] . {;}
building new item: unary_expression -> postfix_expression . {=}
building new item: unary_expression -> postfix_expression . {ADD_ASSIGN}
building new item: unary_expression -> postfix_expression . {AND_ASSIGN}
building new item: unary_expression -> postfix_expression . {DIV_ASSIGN}
building new item: unary_expression -> postfix_expression . {LEFT_ASSIGN}
building new item: unary_expression -> postfix_expression . {MOD_ASSIGN}
building new item: unary_expression -> postfix_expression . {MUL_ASSIGN}
building new item: unary_expression -> postfix_expression . {OR_ASSIGN}
building new item: unary_expression -> postfix_expression . {RIGHT_ASSIGN}
building new item: unary_expression -> postfix_expression . {SUB_ASSIGN}
building new item: unary_expression -> postfix_expression . {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {=}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {=}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {=}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {=}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {=}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {=}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {=}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {[}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {[}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {[}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {[}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {[}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {[}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {[}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {(}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {(}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {(}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {(}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {(}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {(}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {(}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {.}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {.}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {.}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {.}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {.}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {.}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {.}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {INC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {INC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {INC_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {INC_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {INC_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {INC_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {INC_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DEC_OP}
building new item: unary_expression -> postfix_expression . {;}
building new item: unary_expression -> postfix_expression . {?}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {;}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {;}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {;}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {;}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {;}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {;}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {;}
building new item: unary_expression -> postfix_expression . {*}
building new item: unary_expression -> postfix_expression . {/}
building new item: unary_expression -> postfix_expression . {%}
building new item: unary_expression -> postfix_expression . {+}
building new item: unary_expression -> postfix_expression . {-}
building new item: unary_expression -> postfix_expression . {LEFT_OP}
building new item: unary_expression -> postfix_expression . {RIGHT_OP}
building new item: unary_expression -> postfix_expression . {<}
building new item: unary_expression -> postfix_expression . {>}
building new item: unary_expression -> postfix_expression . {LE_OP}
building new item: unary_expression -> postfix_expression . {GE_OP}
building new item: unary_expression -> postfix_expression . {EQ_OP}
building new item: unary_expression -> postfix_expression . {NE_OP}
building new item: unary_expression -> postfix_expression . {&}
building new item: unary_expression -> postfix_expression . {^}
building new item: unary_expression -> postfix_expression . {|}
building new item: unary_expression -> postfix_expression . {AND_OP}
building new item: unary_expression -> postfix_expression . {OR_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {?}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {?}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {?}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {?}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {?}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {?}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {?}
building new item: unary_expression -> postfix_expression . {,}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {*}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {*}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {*}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {*}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {*}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {*}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {*}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {/}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {/}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {/}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {/}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {/}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {/}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {/}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {%}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {%}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {%}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {%}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {%}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {%}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {%}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {+}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {+}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {+}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {+}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {+}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {+}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {+}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {-}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {-}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {-}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {-}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {-}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {-}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {-}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {<}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {<}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {<}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {<}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {<}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {<}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {<}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {>}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {>}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {>}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {>}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {>}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {>}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {>}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {LE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {LE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LE_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {LE_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LE_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LE_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LE_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {GE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {GE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {GE_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {GE_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {GE_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {GE_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {GE_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {NE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {NE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {NE_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {NE_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {NE_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {NE_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {NE_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {&}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {&}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {&}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {&}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {&}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {&}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {&}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {^}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {^}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {^}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {^}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {^}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {^}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {^}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {|}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {|}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {|}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {|}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {|}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {|}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {|}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {AND_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {AND_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {OR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {OR_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {,}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {,}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {,}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {,}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {,}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {,}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {,}
closure post reduce
LOOP: 152, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [postfix_expression,postfix_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    unary_expression -> postfix_expression . {=}
    unary_expression -> postfix_expression . {ADD_ASSIGN}
    unary_expression -> postfix_expression . {AND_ASSIGN}
    unary_expression -> postfix_expression . {DIV_ASSIGN}
    unary_expression -> postfix_expression . {LEFT_ASSIGN}
    unary_expression -> postfix_expression . {MOD_ASSIGN}
    unary_expression -> postfix_expression . {MUL_ASSIGN}
    unary_expression -> postfix_expression . {OR_ASSIGN}
    unary_expression -> postfix_expression . {RIGHT_ASSIGN}
    unary_expression -> postfix_expression . {SUB_ASSIGN}
    unary_expression -> postfix_expression . {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {=}
    postfix_expression -> postfix_expression . [(,(] [),)] {=}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {=}
    postfix_expression -> postfix_expression . [.,.] [id,id] {=}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {=}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {=}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {=}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {[}
    postfix_expression -> postfix_expression . [(,(] [),)] {[}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {[}
    postfix_expression -> postfix_expression . [.,.] [id,id] {[}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {[}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {[}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {[}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {(}
    postfix_expression -> postfix_expression . [(,(] [),)] {(}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {(}
    postfix_expression -> postfix_expression . [.,.] [id,id] {(}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {(}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {(}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {(}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {.}
    postfix_expression -> postfix_expression . [(,(] [),)] {.}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {.}
    postfix_expression -> postfix_expression . [.,.] [id,id] {.}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {.}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {.}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {.}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {PTR_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {PTR_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {PTR_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {PTR_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {PTR_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {PTR_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {PTR_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {INC_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {INC_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {INC_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {INC_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {INC_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {INC_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {INC_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {DEC_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {DEC_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DEC_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {DEC_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DEC_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DEC_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DEC_OP}
    unary_expression -> postfix_expression . {;}
    unary_expression -> postfix_expression . {?}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {;}
    postfix_expression -> postfix_expression . [(,(] [),)] {;}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {;}
    postfix_expression -> postfix_expression . [.,.] [id,id] {;}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {;}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {;}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {;}
    unary_expression -> postfix_expression . {*}
    unary_expression -> postfix_expression . {/}
    unary_expression -> postfix_expression . {%}
    unary_expression -> postfix_expression . {+}
    unary_expression -> postfix_expression . {-}
    unary_expression -> postfix_expression . {LEFT_OP}
    unary_expression -> postfix_expression . {RIGHT_OP}
    unary_expression -> postfix_expression . {<}
    unary_expression -> postfix_expression . {>}
    unary_expression -> postfix_expression . {LE_OP}
    unary_expression -> postfix_expression . {GE_OP}
    unary_expression -> postfix_expression . {EQ_OP}
    unary_expression -> postfix_expression . {NE_OP}
    unary_expression -> postfix_expression . {&}
    unary_expression -> postfix_expression . {^}
    unary_expression -> postfix_expression . {|}
    unary_expression -> postfix_expression . {AND_OP}
    unary_expression -> postfix_expression . {OR_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {?}
    postfix_expression -> postfix_expression . [(,(] [),)] {?}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {?}
    postfix_expression -> postfix_expression . [.,.] [id,id] {?}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {?}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {?}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {?}
    unary_expression -> postfix_expression . {,}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {*}
    postfix_expression -> postfix_expression . [(,(] [),)] {*}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {*}
    postfix_expression -> postfix_expression . [.,.] [id,id] {*}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {*}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {*}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {*}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {/}
    postfix_expression -> postfix_expression . [(,(] [),)] {/}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {/}
    postfix_expression -> postfix_expression . [.,.] [id,id] {/}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {/}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {/}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {/}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {%}
    postfix_expression -> postfix_expression . [(,(] [),)] {%}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {%}
    postfix_expression -> postfix_expression . [.,.] [id,id] {%}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {%}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {%}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {%}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {+}
    postfix_expression -> postfix_expression . [(,(] [),)] {+}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {+}
    postfix_expression -> postfix_expression . [.,.] [id,id] {+}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {+}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {+}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {+}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {-}
    postfix_expression -> postfix_expression . [(,(] [),)] {-}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {-}
    postfix_expression -> postfix_expression . [.,.] [id,id] {-}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {-}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {-}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {-}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {<}
    postfix_expression -> postfix_expression . [(,(] [),)] {<}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {<}
    postfix_expression -> postfix_expression . [.,.] [id,id] {<}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {<}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {<}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {<}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {>}
    postfix_expression -> postfix_expression . [(,(] [),)] {>}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {>}
    postfix_expression -> postfix_expression . [.,.] [id,id] {>}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {>}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {>}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {>}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {LE_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {LE_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LE_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {LE_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LE_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LE_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LE_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {GE_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {GE_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {GE_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {GE_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {GE_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {GE_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {GE_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {EQ_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {EQ_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {EQ_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {EQ_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {EQ_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {EQ_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {EQ_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {NE_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {NE_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {NE_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {NE_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {NE_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {NE_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {NE_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {&}
    postfix_expression -> postfix_expression . [(,(] [),)] {&}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {&}
    postfix_expression -> postfix_expression . [.,.] [id,id] {&}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {&}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {&}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {&}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {^}
    postfix_expression -> postfix_expression . [(,(] [),)] {^}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {^}
    postfix_expression -> postfix_expression . [.,.] [id,id] {^}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {^}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {^}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {^}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {|}
    postfix_expression -> postfix_expression . [(,(] [),)] {|}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {|}
    postfix_expression -> postfix_expression . [.,.] [id,id] {|}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {|}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {|}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {|}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {AND_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {AND_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {OR_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {OR_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {,}
    postfix_expression -> postfix_expression . [(,(] [),)] {,}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {,}
    postfix_expression -> postfix_expression . [.,.] [id,id] {,}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {,}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {,}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {,}
check: reduce unary_expression -> postfix_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: unary_expression -> postfix_expression . {=}
trying to reduce by: unary_expression -> postfix_expression . {ADD_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {AND_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {DIV_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {LEFT_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {MOD_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {MUL_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {OR_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {RIGHT_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {SUB_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {=}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {=}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {=}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {=}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {=}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {=}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {=}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {[}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {[}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {[}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {[}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {[}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {[}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {[}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {(}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {(}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {(}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {(}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {(}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {(}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {(}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {.}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {.}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {.}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {.}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {.}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {.}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {.}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DEC_OP}
trying to reduce by: unary_expression -> postfix_expression . {;}
reduce: unary_expression -> printf ( "%d!\n" , foo ( 2 ) ) 
reduce item: unary_expression -> postfix_expression . {;}
building new item: assignment_expression -> unary_expression . assignment_operator assignment_expression {;}
building new item: assignment_expression -> unary_expression . assignment_operator assignment_expression {,}
building new item: cast_expression -> unary_expression . {;}
building new item: cast_expression -> unary_expression . {?}
building new item: cast_expression -> unary_expression . {*}
building new item: cast_expression -> unary_expression . {/}
building new item: cast_expression -> unary_expression . {%}
building new item: cast_expression -> unary_expression . {+}
building new item: cast_expression -> unary_expression . {-}
building new item: cast_expression -> unary_expression . {LEFT_OP}
building new item: cast_expression -> unary_expression . {RIGHT_OP}
building new item: cast_expression -> unary_expression . {<}
building new item: cast_expression -> unary_expression . {>}
building new item: cast_expression -> unary_expression . {LE_OP}
building new item: cast_expression -> unary_expression . {GE_OP}
building new item: cast_expression -> unary_expression . {EQ_OP}
building new item: cast_expression -> unary_expression . {NE_OP}
building new item: cast_expression -> unary_expression . {&}
building new item: cast_expression -> unary_expression . {^}
building new item: cast_expression -> unary_expression . {|}
building new item: cast_expression -> unary_expression . {AND_OP}
building new item: cast_expression -> unary_expression . {OR_OP}
building new item: cast_expression -> unary_expression . {,}
closure post reduce
LOOP: 153, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [unary_expression,unary_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    assignment_expression -> unary_expression . assignment_operator assignment_expression {;}
    assignment_expression -> unary_expression . assignment_operator assignment_expression {,}
    cast_expression -> unary_expression . {;}
    cast_expression -> unary_expression . {?}
    cast_expression -> unary_expression . {*}
    cast_expression -> unary_expression . {/}
    cast_expression -> unary_expression . {%}
    cast_expression -> unary_expression . {+}
    cast_expression -> unary_expression . {-}
    cast_expression -> unary_expression . {LEFT_OP}
    cast_expression -> unary_expression . {RIGHT_OP}
    cast_expression -> unary_expression . {<}
    cast_expression -> unary_expression . {>}
    cast_expression -> unary_expression . {LE_OP}
    cast_expression -> unary_expression . {GE_OP}
    cast_expression -> unary_expression . {EQ_OP}
    cast_expression -> unary_expression . {NE_OP}
    cast_expression -> unary_expression . {&}
    cast_expression -> unary_expression . {^}
    cast_expression -> unary_expression . {|}
    cast_expression -> unary_expression . {AND_OP}
    cast_expression -> unary_expression . {OR_OP}
    cast_expression -> unary_expression . {,}
check: reduce cast_expression -> unary_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: assignment_expression -> unary_expression . assignment_operator assignment_expression {;}
trying to reduce by: assignment_expression -> unary_expression . assignment_operator assignment_expression {,}
trying to reduce by: cast_expression -> unary_expression . {;}
reduce: cast_expression -> printf ( "%d!\n" , foo ( 2 ) ) 
reduce item: cast_expression -> unary_expression . {;}
building new item: multiplicative_expression -> cast_expression . {;}
building new item: multiplicative_expression -> cast_expression . {?}
building new item: multiplicative_expression -> cast_expression . {*}
building new item: multiplicative_expression -> cast_expression . {/}
building new item: multiplicative_expression -> cast_expression . {%}
building new item: multiplicative_expression -> cast_expression . {+}
building new item: multiplicative_expression -> cast_expression . {-}
building new item: multiplicative_expression -> cast_expression . {LEFT_OP}
building new item: multiplicative_expression -> cast_expression . {RIGHT_OP}
building new item: multiplicative_expression -> cast_expression . {<}
building new item: multiplicative_expression -> cast_expression . {>}
building new item: multiplicative_expression -> cast_expression . {LE_OP}
building new item: multiplicative_expression -> cast_expression . {GE_OP}
building new item: multiplicative_expression -> cast_expression . {EQ_OP}
building new item: multiplicative_expression -> cast_expression . {NE_OP}
building new item: multiplicative_expression -> cast_expression . {&}
building new item: multiplicative_expression -> cast_expression . {^}
building new item: multiplicative_expression -> cast_expression . {|}
building new item: multiplicative_expression -> cast_expression . {AND_OP}
building new item: multiplicative_expression -> cast_expression . {OR_OP}
building new item: multiplicative_expression -> cast_expression . {,}
closure post reduce
LOOP: 154, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [cast_expression,cast_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    multiplicative_expression -> cast_expression . {;}
    multiplicative_expression -> cast_expression . {?}
    multiplicative_expression -> cast_expression . {*}
    multiplicative_expression -> cast_expression . {/}
    multiplicative_expression -> cast_expression . {%}
    multiplicative_expression -> cast_expression . {+}
    multiplicative_expression -> cast_expression . {-}
    multiplicative_expression -> cast_expression . {LEFT_OP}
    multiplicative_expression -> cast_expression . {RIGHT_OP}
    multiplicative_expression -> cast_expression . {<}
    multiplicative_expression -> cast_expression . {>}
    multiplicative_expression -> cast_expression . {LE_OP}
    multiplicative_expression -> cast_expression . {GE_OP}
    multiplicative_expression -> cast_expression . {EQ_OP}
    multiplicative_expression -> cast_expression . {NE_OP}
    multiplicative_expression -> cast_expression . {&}
    multiplicative_expression -> cast_expression . {^}
    multiplicative_expression -> cast_expression . {|}
    multiplicative_expression -> cast_expression . {AND_OP}
    multiplicative_expression -> cast_expression . {OR_OP}
    multiplicative_expression -> cast_expression . {,}
check: reduce multiplicative_expression -> cast_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: multiplicative_expression -> cast_expression . {;}
reduce: multiplicative_expression -> printf ( "%d!\n" , foo ( 2 ) ) 
reduce item: multiplicative_expression -> cast_expression . {;}
building new item: additive_expression -> multiplicative_expression . {;}
building new item: additive_expression -> multiplicative_expression . {?}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {;}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {;}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {;}
building new item: additive_expression -> multiplicative_expression . {+}
building new item: additive_expression -> multiplicative_expression . {-}
building new item: additive_expression -> multiplicative_expression . {LEFT_OP}
building new item: additive_expression -> multiplicative_expression . {RIGHT_OP}
building new item: additive_expression -> multiplicative_expression . {<}
building new item: additive_expression -> multiplicative_expression . {>}
building new item: additive_expression -> multiplicative_expression . {LE_OP}
building new item: additive_expression -> multiplicative_expression . {GE_OP}
building new item: additive_expression -> multiplicative_expression . {EQ_OP}
building new item: additive_expression -> multiplicative_expression . {NE_OP}
building new item: additive_expression -> multiplicative_expression . {&}
building new item: additive_expression -> multiplicative_expression . {^}
building new item: additive_expression -> multiplicative_expression . {|}
building new item: additive_expression -> multiplicative_expression . {AND_OP}
building new item: additive_expression -> multiplicative_expression . {OR_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {?}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {?}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {?}
building new item: additive_expression -> multiplicative_expression . {,}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {*}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {*}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {*}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {/}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {/}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {/}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {%}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {%}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {%}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {+}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {+}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {+}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {-}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {-}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {-}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {LEFT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {LEFT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {LEFT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {RIGHT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {RIGHT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {RIGHT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {<}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {<}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {<}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {>}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {>}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {>}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {LE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {LE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {LE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {GE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {GE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {GE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {EQ_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {EQ_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {EQ_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {NE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {NE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {NE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {&}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {&}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {&}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {^}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {^}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {^}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {|}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {|}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {|}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {AND_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {AND_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {AND_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {OR_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {OR_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {OR_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {,}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {,}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {,}
closure post reduce
LOOP: 155, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [multiplicative_expression,multiplicative_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    additive_expression -> multiplicative_expression . {;}
    additive_expression -> multiplicative_expression . {?}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {;}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {;}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {;}
    additive_expression -> multiplicative_expression . {+}
    additive_expression -> multiplicative_expression . {-}
    additive_expression -> multiplicative_expression . {LEFT_OP}
    additive_expression -> multiplicative_expression . {RIGHT_OP}
    additive_expression -> multiplicative_expression . {<}
    additive_expression -> multiplicative_expression . {>}
    additive_expression -> multiplicative_expression . {LE_OP}
    additive_expression -> multiplicative_expression . {GE_OP}
    additive_expression -> multiplicative_expression . {EQ_OP}
    additive_expression -> multiplicative_expression . {NE_OP}
    additive_expression -> multiplicative_expression . {&}
    additive_expression -> multiplicative_expression . {^}
    additive_expression -> multiplicative_expression . {|}
    additive_expression -> multiplicative_expression . {AND_OP}
    additive_expression -> multiplicative_expression . {OR_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {?}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {?}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {?}
    additive_expression -> multiplicative_expression . {,}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {*}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {*}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {*}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {/}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {/}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {/}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {%}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {%}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {%}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {+}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {+}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {+}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {-}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {-}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {-}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {LEFT_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {LEFT_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {LEFT_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {RIGHT_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {RIGHT_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {RIGHT_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {<}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {<}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {<}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {>}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {>}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {>}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {LE_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {LE_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {LE_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {GE_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {GE_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {GE_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {EQ_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {EQ_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {EQ_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {NE_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {NE_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {NE_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {&}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {&}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {&}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {^}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {^}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {^}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {|}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {|}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {|}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {AND_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {AND_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {AND_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {OR_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {OR_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {OR_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {,}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {,}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {,}
check: reduce additive_expression -> multiplicative_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: additive_expression -> multiplicative_expression . {;}
reduce: additive_expression -> printf ( "%d!\n" , foo ( 2 ) ) 
reduce item: additive_expression -> multiplicative_expression . {;}
building new item: shift_expression -> additive_expression . {;}
building new item: shift_expression -> additive_expression . {?}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {;}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {;}
building new item: shift_expression -> additive_expression . {LEFT_OP}
building new item: shift_expression -> additive_expression . {RIGHT_OP}
building new item: shift_expression -> additive_expression . {<}
building new item: shift_expression -> additive_expression . {>}
building new item: shift_expression -> additive_expression . {LE_OP}
building new item: shift_expression -> additive_expression . {GE_OP}
building new item: shift_expression -> additive_expression . {EQ_OP}
building new item: shift_expression -> additive_expression . {NE_OP}
building new item: shift_expression -> additive_expression . {&}
building new item: shift_expression -> additive_expression . {^}
building new item: shift_expression -> additive_expression . {|}
building new item: shift_expression -> additive_expression . {AND_OP}
building new item: shift_expression -> additive_expression . {OR_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {?}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {?}
building new item: shift_expression -> additive_expression . {,}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {+}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {+}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {-}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {-}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {LEFT_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {LEFT_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {RIGHT_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {RIGHT_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {<}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {<}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {>}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {>}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {LE_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {LE_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {GE_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {GE_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {EQ_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {EQ_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {NE_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {NE_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {&}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {&}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {^}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {^}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {|}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {|}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {AND_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {AND_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {OR_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {OR_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {,}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {,}
closure post reduce
LOOP: 156, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [additive_expression,additive_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    shift_expression -> additive_expression . {;}
    shift_expression -> additive_expression . {?}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {;}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {;}
    shift_expression -> additive_expression . {LEFT_OP}
    shift_expression -> additive_expression . {RIGHT_OP}
    shift_expression -> additive_expression . {<}
    shift_expression -> additive_expression . {>}
    shift_expression -> additive_expression . {LE_OP}
    shift_expression -> additive_expression . {GE_OP}
    shift_expression -> additive_expression . {EQ_OP}
    shift_expression -> additive_expression . {NE_OP}
    shift_expression -> additive_expression . {&}
    shift_expression -> additive_expression . {^}
    shift_expression -> additive_expression . {|}
    shift_expression -> additive_expression . {AND_OP}
    shift_expression -> additive_expression . {OR_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {?}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {?}
    shift_expression -> additive_expression . {,}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {+}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {+}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {-}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {-}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {LEFT_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {LEFT_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {RIGHT_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {RIGHT_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {<}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {<}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {>}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {>}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {LE_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {LE_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {GE_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {GE_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {EQ_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {EQ_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {NE_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {NE_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {&}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {&}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {^}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {^}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {|}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {|}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {AND_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {AND_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {OR_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {OR_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {,}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {,}
check: reduce shift_expression -> additive_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: shift_expression -> additive_expression . {;}
reduce: shift_expression -> printf ( "%d!\n" , foo ( 2 ) ) 
reduce item: shift_expression -> additive_expression . {;}
building new item: relational_expression -> shift_expression . {;}
building new item: relational_expression -> shift_expression . {?}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {;}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {;}
building new item: relational_expression -> shift_expression . {<}
building new item: relational_expression -> shift_expression . {>}
building new item: relational_expression -> shift_expression . {LE_OP}
building new item: relational_expression -> shift_expression . {GE_OP}
building new item: relational_expression -> shift_expression . {EQ_OP}
building new item: relational_expression -> shift_expression . {NE_OP}
building new item: relational_expression -> shift_expression . {&}
building new item: relational_expression -> shift_expression . {^}
building new item: relational_expression -> shift_expression . {|}
building new item: relational_expression -> shift_expression . {AND_OP}
building new item: relational_expression -> shift_expression . {OR_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {?}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {?}
building new item: relational_expression -> shift_expression . {,}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {LEFT_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {LEFT_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {RIGHT_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {RIGHT_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {<}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {<}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {>}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {>}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {LE_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {LE_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {GE_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {GE_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {EQ_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {EQ_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {NE_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {NE_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {&}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {&}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {^}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {^}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {|}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {|}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {AND_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {AND_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {OR_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {OR_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {,}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {,}
closure post reduce
LOOP: 157, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [shift_expression,shift_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    relational_expression -> shift_expression . {;}
    relational_expression -> shift_expression . {?}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {;}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {;}
    relational_expression -> shift_expression . {<}
    relational_expression -> shift_expression . {>}
    relational_expression -> shift_expression . {LE_OP}
    relational_expression -> shift_expression . {GE_OP}
    relational_expression -> shift_expression . {EQ_OP}
    relational_expression -> shift_expression . {NE_OP}
    relational_expression -> shift_expression . {&}
    relational_expression -> shift_expression . {^}
    relational_expression -> shift_expression . {|}
    relational_expression -> shift_expression . {AND_OP}
    relational_expression -> shift_expression . {OR_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {?}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {?}
    relational_expression -> shift_expression . {,}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {LEFT_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {LEFT_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {RIGHT_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {RIGHT_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {<}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {<}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {>}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {>}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {LE_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {LE_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {GE_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {GE_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {EQ_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {EQ_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {NE_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {NE_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {&}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {&}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {^}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {^}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {|}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {|}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {AND_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {AND_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {OR_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {OR_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {,}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {,}
check: reduce relational_expression -> shift_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: relational_expression -> shift_expression . {;}
reduce: relational_expression -> printf ( "%d!\n" , foo ( 2 ) ) 
reduce item: relational_expression -> shift_expression . {;}
building new item: equality_expression -> relational_expression . {;}
building new item: equality_expression -> relational_expression . {?}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {;}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {;}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {;}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {;}
building new item: equality_expression -> relational_expression . {EQ_OP}
building new item: equality_expression -> relational_expression . {NE_OP}
building new item: equality_expression -> relational_expression . {&}
building new item: equality_expression -> relational_expression . {^}
building new item: equality_expression -> relational_expression . {|}
building new item: equality_expression -> relational_expression . {AND_OP}
building new item: equality_expression -> relational_expression . {OR_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {?}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {?}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {?}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {?}
building new item: equality_expression -> relational_expression . {,}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {<}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {<}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {<}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {<}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {>}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {>}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {>}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {>}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {LE_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {LE_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {LE_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {LE_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {GE_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {GE_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {GE_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {GE_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {EQ_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {EQ_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {EQ_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {EQ_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {NE_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {NE_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {NE_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {NE_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {&}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {&}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {&}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {&}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {^}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {^}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {^}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {^}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {|}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {|}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {|}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {|}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {AND_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {AND_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {AND_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {AND_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {OR_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {OR_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {OR_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {OR_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {,}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {,}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {,}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {,}
closure post reduce
LOOP: 158, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [relational_expression,relational_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    equality_expression -> relational_expression . {;}
    equality_expression -> relational_expression . {?}
    relational_expression -> relational_expression . [<,<] shift_expression {;}
    relational_expression -> relational_expression . [>,>] shift_expression {;}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {;}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {;}
    equality_expression -> relational_expression . {EQ_OP}
    equality_expression -> relational_expression . {NE_OP}
    equality_expression -> relational_expression . {&}
    equality_expression -> relational_expression . {^}
    equality_expression -> relational_expression . {|}
    equality_expression -> relational_expression . {AND_OP}
    equality_expression -> relational_expression . {OR_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {?}
    relational_expression -> relational_expression . [>,>] shift_expression {?}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {?}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {?}
    equality_expression -> relational_expression . {,}
    relational_expression -> relational_expression . [<,<] shift_expression {<}
    relational_expression -> relational_expression . [>,>] shift_expression {<}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {<}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {<}
    relational_expression -> relational_expression . [<,<] shift_expression {>}
    relational_expression -> relational_expression . [>,>] shift_expression {>}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {>}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {>}
    relational_expression -> relational_expression . [<,<] shift_expression {LE_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {LE_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {LE_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {LE_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {GE_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {GE_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {GE_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {GE_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {EQ_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {EQ_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {EQ_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {EQ_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {NE_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {NE_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {NE_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {NE_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {&}
    relational_expression -> relational_expression . [>,>] shift_expression {&}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {&}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {&}
    relational_expression -> relational_expression . [<,<] shift_expression {^}
    relational_expression -> relational_expression . [>,>] shift_expression {^}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {^}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {^}
    relational_expression -> relational_expression . [<,<] shift_expression {|}
    relational_expression -> relational_expression . [>,>] shift_expression {|}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {|}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {|}
    relational_expression -> relational_expression . [<,<] shift_expression {AND_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {AND_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {AND_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {AND_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {OR_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {OR_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {OR_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {OR_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {,}
    relational_expression -> relational_expression . [>,>] shift_expression {,}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {,}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {,}
check: reduce equality_expression -> relational_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: equality_expression -> relational_expression . {;}
reduce: equality_expression -> printf ( "%d!\n" , foo ( 2 ) ) 
reduce item: equality_expression -> relational_expression . {;}
building new item: and_expression -> equality_expression . {;}
building new item: and_expression -> equality_expression . {?}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {;}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {;}
building new item: and_expression -> equality_expression . {&}
building new item: and_expression -> equality_expression . {^}
building new item: and_expression -> equality_expression . {|}
building new item: and_expression -> equality_expression . {AND_OP}
building new item: and_expression -> equality_expression . {OR_OP}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {?}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {?}
building new item: and_expression -> equality_expression . {,}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {EQ_OP}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {EQ_OP}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {NE_OP}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {NE_OP}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {&}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {&}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {^}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {^}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {|}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {|}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {AND_OP}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {AND_OP}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {OR_OP}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {OR_OP}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {,}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {,}
closure post reduce
LOOP: 159, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [equality_expression,equality_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    and_expression -> equality_expression . {;}
    and_expression -> equality_expression . {?}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {;}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {;}
    and_expression -> equality_expression . {&}
    and_expression -> equality_expression . {^}
    and_expression -> equality_expression . {|}
    and_expression -> equality_expression . {AND_OP}
    and_expression -> equality_expression . {OR_OP}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {?}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {?}
    and_expression -> equality_expression . {,}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {EQ_OP}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {EQ_OP}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {NE_OP}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {NE_OP}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {&}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {&}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {^}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {^}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {|}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {|}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {AND_OP}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {AND_OP}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {OR_OP}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {OR_OP}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {,}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {,}
check: reduce and_expression -> equality_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: and_expression -> equality_expression . {;}
reduce: and_expression -> printf ( "%d!\n" , foo ( 2 ) ) 
reduce item: and_expression -> equality_expression . {;}
building new item: exclusive_or_expression -> and_expression . {;}
building new item: exclusive_or_expression -> and_expression . {?}
building new item: and_expression -> and_expression . [&,&] equality_expression {;}
building new item: exclusive_or_expression -> and_expression . {^}
building new item: exclusive_or_expression -> and_expression . {|}
building new item: exclusive_or_expression -> and_expression . {AND_OP}
building new item: exclusive_or_expression -> and_expression . {OR_OP}
building new item: and_expression -> and_expression . [&,&] equality_expression {?}
building new item: exclusive_or_expression -> and_expression . {,}
building new item: and_expression -> and_expression . [&,&] equality_expression {&}
building new item: and_expression -> and_expression . [&,&] equality_expression {^}
building new item: and_expression -> and_expression . [&,&] equality_expression {|}
building new item: and_expression -> and_expression . [&,&] equality_expression {AND_OP}
building new item: and_expression -> and_expression . [&,&] equality_expression {OR_OP}
building new item: and_expression -> and_expression . [&,&] equality_expression {,}
closure post reduce
LOOP: 160, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [and_expression,and_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    exclusive_or_expression -> and_expression . {;}
    exclusive_or_expression -> and_expression . {?}
    and_expression -> and_expression . [&,&] equality_expression {;}
    exclusive_or_expression -> and_expression . {^}
    exclusive_or_expression -> and_expression . {|}
    exclusive_or_expression -> and_expression . {AND_OP}
    exclusive_or_expression -> and_expression . {OR_OP}
    and_expression -> and_expression . [&,&] equality_expression {?}
    exclusive_or_expression -> and_expression . {,}
    and_expression -> and_expression . [&,&] equality_expression {&}
    and_expression -> and_expression . [&,&] equality_expression {^}
    and_expression -> and_expression . [&,&] equality_expression {|}
    and_expression -> and_expression . [&,&] equality_expression {AND_OP}
    and_expression -> and_expression . [&,&] equality_expression {OR_OP}
    and_expression -> and_expression . [&,&] equality_expression {,}
check: reduce exclusive_or_expression -> and_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: exclusive_or_expression -> and_expression . {;}
reduce: exclusive_or_expression -> printf ( "%d!\n" , foo ( 2 ) ) 
reduce item: exclusive_or_expression -> and_expression . {;}
building new item: inclusive_or_expression -> exclusive_or_expression . {;}
building new item: inclusive_or_expression -> exclusive_or_expression . {?}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {;}
building new item: inclusive_or_expression -> exclusive_or_expression . {|}
building new item: inclusive_or_expression -> exclusive_or_expression . {AND_OP}
building new item: inclusive_or_expression -> exclusive_or_expression . {OR_OP}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {?}
building new item: inclusive_or_expression -> exclusive_or_expression . {,}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {^}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {|}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {AND_OP}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {OR_OP}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {,}
closure post reduce
LOOP: 161, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [exclusive_or_expression,exclusive_or_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    inclusive_or_expression -> exclusive_or_expression . {;}
    inclusive_or_expression -> exclusive_or_expression . {?}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {;}
    inclusive_or_expression -> exclusive_or_expression . {|}
    inclusive_or_expression -> exclusive_or_expression . {AND_OP}
    inclusive_or_expression -> exclusive_or_expression . {OR_OP}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {?}
    inclusive_or_expression -> exclusive_or_expression . {,}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {^}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {|}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {AND_OP}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {OR_OP}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {,}
check: reduce inclusive_or_expression -> exclusive_or_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: inclusive_or_expression -> exclusive_or_expression . {;}
reduce: inclusive_or_expression -> printf ( "%d!\n" , foo ( 2 ) ) 
reduce item: inclusive_or_expression -> exclusive_or_expression . {;}
building new item: logical_and_expression -> inclusive_or_expression . {;}
building new item: logical_and_expression -> inclusive_or_expression . {?}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {;}
building new item: logical_and_expression -> inclusive_or_expression . {AND_OP}
building new item: logical_and_expression -> inclusive_or_expression . {OR_OP}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {?}
building new item: logical_and_expression -> inclusive_or_expression . {,}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {|}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {AND_OP}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {OR_OP}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {,}
closure post reduce
LOOP: 162, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [inclusive_or_expression,inclusive_or_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    logical_and_expression -> inclusive_or_expression . {;}
    logical_and_expression -> inclusive_or_expression . {?}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {;}
    logical_and_expression -> inclusive_or_expression . {AND_OP}
    logical_and_expression -> inclusive_or_expression . {OR_OP}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {?}
    logical_and_expression -> inclusive_or_expression . {,}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {|}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {AND_OP}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {OR_OP}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {,}
check: reduce logical_and_expression -> inclusive_or_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: logical_and_expression -> inclusive_or_expression . {;}
reduce: logical_and_expression -> printf ( "%d!\n" , foo ( 2 ) ) 
reduce item: logical_and_expression -> inclusive_or_expression . {;}
building new item: logical_or_expression -> logical_and_expression . {;}
building new item: logical_or_expression -> logical_and_expression . {?}
building new item: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {;}
building new item: logical_or_expression -> logical_and_expression . {OR_OP}
building new item: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {?}
building new item: logical_or_expression -> logical_and_expression . {,}
building new item: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {AND_OP}
building new item: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {OR_OP}
building new item: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {,}
closure post reduce
LOOP: 163, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [logical_and_expression,logical_and_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    logical_or_expression -> logical_and_expression . {;}
    logical_or_expression -> logical_and_expression . {?}
    logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {;}
    logical_or_expression -> logical_and_expression . {OR_OP}
    logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {?}
    logical_or_expression -> logical_and_expression . {,}
    logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {AND_OP}
    logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {OR_OP}
    logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {,}
check: reduce logical_or_expression -> logical_and_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: logical_or_expression -> logical_and_expression . {;}
reduce: logical_or_expression -> printf ( "%d!\n" , foo ( 2 ) ) 
reduce item: logical_or_expression -> logical_and_expression . {;}
building new item: conditional_expression -> logical_or_expression . {;}
building new item: conditional_expression -> logical_or_expression . [?,?] expression [:,:] conditional_expression {;}
building new item: logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {;}
building new item: logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {?}
building new item: conditional_expression -> logical_or_expression . {,}
building new item: conditional_expression -> logical_or_expression . [?,?] expression [:,:] conditional_expression {,}
building new item: logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {OR_OP}
building new item: logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {,}
closure post reduce
LOOP: 164, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [logical_or_expression,logical_or_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    conditional_expression -> logical_or_expression . {;}
    conditional_expression -> logical_or_expression . [?,?] expression [:,:] conditional_expression {;}
    logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {;}
    logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {?}
    conditional_expression -> logical_or_expression . {,}
    conditional_expression -> logical_or_expression . [?,?] expression [:,:] conditional_expression {,}
    logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {OR_OP}
    logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {,}
check: reduce conditional_expression -> logical_or_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: conditional_expression -> logical_or_expression . {;}
reduce: conditional_expression -> printf ( "%d!\n" , foo ( 2 ) ) 
reduce item: conditional_expression -> logical_or_expression . {;}
building new item: assignment_expression -> conditional_expression . {;}
building new item: assignment_expression -> conditional_expression . {,}
closure post reduce
LOOP: 165, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [conditional_expression,conditional_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    assignment_expression -> conditional_expression . {;}
    assignment_expression -> conditional_expression . {,}
check: reduce assignment_expression -> conditional_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: assignment_expression -> conditional_expression . {;}
reduce: assignment_expression -> printf ( "%d!\n" , foo ( 2 ) ) 
reduce item: assignment_expression -> conditional_expression . {;}
building new item: expression -> assignment_expression . {;}
building new item: expression -> assignment_expression . {,}
closure post reduce
LOOP: 166, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [assignment_expression,assignment_expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    expression -> assignment_expression . {;}
    expression -> assignment_expression . {,}
check: reduce expression -> assignment_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: expression -> assignment_expression . {;}
reduce: expression -> printf ( "%d!\n" , foo ( 2 ) ) 
reduce item: expression -> assignment_expression . {;}
building new item: expression_statement -> expression . [;,;] {}}
building new item: expression -> expression . [,,,] assignment_expression {;}
building new item: expression_statement -> expression . [;,;] {!}
building new item: expression_statement -> expression . [;,;] {&}
building new item: expression_statement -> expression . [;,;] {(}
building new item: expression_statement -> expression . [;,;] {*}
building new item: expression_statement -> expression . [;,;] {+}
building new item: expression_statement -> expression . [;,;] {-}
building new item: expression_statement -> expression . [;,;] {;}
building new item: expression_statement -> expression . [;,;] {DEC_OP}
building new item: expression_statement -> expression . [;,;] {INC_OP}
building new item: expression_statement -> expression . [;,;] {TYPE_NAME}
building new item: expression_statement -> expression . [;,;] {auto}
building new item: expression_statement -> expression . [;,;] {bool}
building new item: expression_statement -> expression . [;,;] {break}
building new item: expression_statement -> expression . [;,;] {case}
building new item: expression_statement -> expression . [;,;] {char}
building new item: expression_statement -> expression . [;,;] {complex}
building new item: expression_statement -> expression . [;,;] {const}
building new item: expression_statement -> expression . [;,;] {continue}
building new item: expression_statement -> expression . [;,;] {default}
building new item: expression_statement -> expression . [;,;] {do}
building new item: expression_statement -> expression . [;,;] {double}
building new item: expression_statement -> expression . [;,;] {enum}
building new item: expression_statement -> expression . [;,;] {extern}
building new item: expression_statement -> expression . [;,;] {float}
building new item: expression_statement -> expression . [;,;] {for}
building new item: expression_statement -> expression . [;,;] {goto}
building new item: expression_statement -> expression . [;,;] {id}
building new item: expression_statement -> expression . [;,;] {if}
building new item: expression_statement -> expression . [;,;] {imaginary}
building new item: expression_statement -> expression . [;,;] {inline}
building new item: expression_statement -> expression . [;,;] {int}
building new item: expression_statement -> expression . [;,;] {long}
building new item: expression_statement -> expression . [;,;] {num}
building new item: expression_statement -> expression . [;,;] {register}
building new item: expression_statement -> expression . [;,;] {restrict}
building new item: expression_statement -> expression . [;,;] {return}
building new item: expression_statement -> expression . [;,;] {short}
building new item: expression_statement -> expression . [;,;] {signed}
building new item: expression_statement -> expression . [;,;] {sizeof}
building new item: expression_statement -> expression . [;,;] {static}
building new item: expression_statement -> expression . [;,;] {string}
building new item: expression_statement -> expression . [;,;] {struct}
building new item: expression_statement -> expression . [;,;] {switch}
building new item: expression_statement -> expression . [;,;] {typedef}
building new item: expression_statement -> expression . [;,;] {union}
building new item: expression_statement -> expression . [;,;] {unsigned}
building new item: expression_statement -> expression . [;,;] {void}
building new item: expression_statement -> expression . [;,;] {volatile}
building new item: expression_statement -> expression . [;,;] {while}
building new item: expression_statement -> expression . [;,;] {{}
building new item: expression_statement -> expression . [;,;] {~}
building new item: expression -> expression . [,,,] assignment_expression {,}
closure post reduce
LOOP: 167, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [expression,expression]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    expression_statement -> expression . [;,;] {}}
    expression -> expression . [,,,] assignment_expression {;}
    expression_statement -> expression . [;,;] {!}
    expression_statement -> expression . [;,;] {&}
    expression_statement -> expression . [;,;] {(}
    expression_statement -> expression . [;,;] {*}
    expression_statement -> expression . [;,;] {+}
    expression_statement -> expression . [;,;] {-}
    expression_statement -> expression . [;,;] {;}
    expression_statement -> expression . [;,;] {DEC_OP}
    expression_statement -> expression . [;,;] {INC_OP}
    expression_statement -> expression . [;,;] {TYPE_NAME}
    expression_statement -> expression . [;,;] {auto}
    expression_statement -> expression . [;,;] {bool}
    expression_statement -> expression . [;,;] {break}
    expression_statement -> expression . [;,;] {case}
    expression_statement -> expression . [;,;] {char}
    expression_statement -> expression . [;,;] {complex}
    expression_statement -> expression . [;,;] {const}
    expression_statement -> expression . [;,;] {continue}
    expression_statement -> expression . [;,;] {default}
    expression_statement -> expression . [;,;] {do}
    expression_statement -> expression . [;,;] {double}
    expression_statement -> expression . [;,;] {enum}
    expression_statement -> expression . [;,;] {extern}
    expression_statement -> expression . [;,;] {float}
    expression_statement -> expression . [;,;] {for}
    expression_statement -> expression . [;,;] {goto}
    expression_statement -> expression . [;,;] {id}
    expression_statement -> expression . [;,;] {if}
    expression_statement -> expression . [;,;] {imaginary}
    expression_statement -> expression . [;,;] {inline}
    expression_statement -> expression . [;,;] {int}
    expression_statement -> expression . [;,;] {long}
    expression_statement -> expression . [;,;] {num}
    expression_statement -> expression . [;,;] {register}
    expression_statement -> expression . [;,;] {restrict}
    expression_statement -> expression . [;,;] {return}
    expression_statement -> expression . [;,;] {short}
    expression_statement -> expression . [;,;] {signed}
    expression_statement -> expression . [;,;] {sizeof}
    expression_statement -> expression . [;,;] {static}
    expression_statement -> expression . [;,;] {string}
    expression_statement -> expression . [;,;] {struct}
    expression_statement -> expression . [;,;] {switch}
    expression_statement -> expression . [;,;] {typedef}
    expression_statement -> expression . [;,;] {union}
    expression_statement -> expression . [;,;] {unsigned}
    expression_statement -> expression . [;,;] {void}
    expression_statement -> expression . [;,;] {volatile}
    expression_statement -> expression . [;,;] {while}
    expression_statement -> expression . [;,;] {{}
    expression_statement -> expression . [;,;] {~}
    expression -> expression . [,,,] assignment_expression {,}
check: shift expression_statement -> expression . [;,;] {}}
check: shift expression_statement -> expression . [;,;] {!}
check: shift expression_statement -> expression . [;,;] {&}
check: shift expression_statement -> expression . [;,;] {(}
check: shift expression_statement -> expression . [;,;] {*}
check: shift expression_statement -> expression . [;,;] {+}
check: shift expression_statement -> expression . [;,;] {-}
check: shift expression_statement -> expression . [;,;] {;}
check: shift expression_statement -> expression . [;,;] {DEC_OP}
check: shift expression_statement -> expression . [;,;] {INC_OP}
check: shift expression_statement -> expression . [;,;] {TYPE_NAME}
check: shift expression_statement -> expression . [;,;] {auto}
check: shift expression_statement -> expression . [;,;] {bool}
check: shift expression_statement -> expression . [;,;] {break}
check: shift expression_statement -> expression . [;,;] {case}
check: shift expression_statement -> expression . [;,;] {char}
check: shift expression_statement -> expression . [;,;] {complex}
check: shift expression_statement -> expression . [;,;] {const}
check: shift expression_statement -> expression . [;,;] {continue}
check: shift expression_statement -> expression . [;,;] {default}
check: shift expression_statement -> expression . [;,;] {do}
check: shift expression_statement -> expression . [;,;] {double}
check: shift expression_statement -> expression . [;,;] {enum}
check: shift expression_statement -> expression . [;,;] {extern}
check: shift expression_statement -> expression . [;,;] {float}
check: shift expression_statement -> expression . [;,;] {for}
check: shift expression_statement -> expression . [;,;] {goto}
check: shift expression_statement -> expression . [;,;] {id}
check: shift expression_statement -> expression . [;,;] {if}
check: shift expression_statement -> expression . [;,;] {imaginary}
check: shift expression_statement -> expression . [;,;] {inline}
check: shift expression_statement -> expression . [;,;] {int}
check: shift expression_statement -> expression . [;,;] {long}
check: shift expression_statement -> expression . [;,;] {num}
check: shift expression_statement -> expression . [;,;] {register}
check: shift expression_statement -> expression . [;,;] {restrict}
check: shift expression_statement -> expression . [;,;] {return}
check: shift expression_statement -> expression . [;,;] {short}
check: shift expression_statement -> expression . [;,;] {signed}
check: shift expression_statement -> expression . [;,;] {sizeof}
check: shift expression_statement -> expression . [;,;] {static}
check: shift expression_statement -> expression . [;,;] {string}
check: shift expression_statement -> expression . [;,;] {struct}
check: shift expression_statement -> expression . [;,;] {switch}
check: shift expression_statement -> expression . [;,;] {typedef}
check: shift expression_statement -> expression . [;,;] {union}
check: shift expression_statement -> expression . [;,;] {unsigned}
check: shift expression_statement -> expression . [;,;] {void}
check: shift expression_statement -> expression . [;,;] {volatile}
check: shift expression_statement -> expression . [;,;] {while}
check: shift expression_statement -> expression . [;,;] {{}
check: shift expression_statement -> expression . [;,;] {~}
shifts: 52, reduces: 0, accepts: 0
shifting [;,;]
building new item: expression_statement -> expression [;,;] . {}}
building new item: expression_statement -> expression [;,;] . {!}
building new item: expression_statement -> expression [;,;] . {&}
building new item: expression_statement -> expression [;,;] . {(}
building new item: expression_statement -> expression [;,;] . {*}
building new item: expression_statement -> expression [;,;] . {+}
building new item: expression_statement -> expression [;,;] . {-}
building new item: expression_statement -> expression [;,;] . {;}
building new item: expression_statement -> expression [;,;] . {DEC_OP}
building new item: expression_statement -> expression [;,;] . {INC_OP}
building new item: expression_statement -> expression [;,;] . {TYPE_NAME}
building new item: expression_statement -> expression [;,;] . {auto}
building new item: expression_statement -> expression [;,;] . {bool}
building new item: expression_statement -> expression [;,;] . {break}
building new item: expression_statement -> expression [;,;] . {case}
building new item: expression_statement -> expression [;,;] . {char}
building new item: expression_statement -> expression [;,;] . {complex}
building new item: expression_statement -> expression [;,;] . {const}
building new item: expression_statement -> expression [;,;] . {continue}
building new item: expression_statement -> expression [;,;] . {default}
building new item: expression_statement -> expression [;,;] . {do}
building new item: expression_statement -> expression [;,;] . {double}
building new item: expression_statement -> expression [;,;] . {enum}
building new item: expression_statement -> expression [;,;] . {extern}
building new item: expression_statement -> expression [;,;] . {float}
building new item: expression_statement -> expression [;,;] . {for}
building new item: expression_statement -> expression [;,;] . {goto}
building new item: expression_statement -> expression [;,;] . {id}
building new item: expression_statement -> expression [;,;] . {if}
building new item: expression_statement -> expression [;,;] . {imaginary}
building new item: expression_statement -> expression [;,;] . {inline}
building new item: expression_statement -> expression [;,;] . {int}
building new item: expression_statement -> expression [;,;] . {long}
building new item: expression_statement -> expression [;,;] . {num}
building new item: expression_statement -> expression [;,;] . {register}
building new item: expression_statement -> expression [;,;] . {restrict}
building new item: expression_statement -> expression [;,;] . {return}
building new item: expression_statement -> expression [;,;] . {short}
building new item: expression_statement -> expression [;,;] . {signed}
building new item: expression_statement -> expression [;,;] . {sizeof}
building new item: expression_statement -> expression [;,;] . {static}
building new item: expression_statement -> expression [;,;] . {string}
building new item: expression_statement -> expression [;,;] . {struct}
building new item: expression_statement -> expression [;,;] . {switch}
building new item: expression_statement -> expression [;,;] . {typedef}
building new item: expression_statement -> expression [;,;] . {union}
building new item: expression_statement -> expression [;,;] . {unsigned}
building new item: expression_statement -> expression [;,;] . {void}
building new item: expression_statement -> expression [;,;] . {volatile}
building new item: expression_statement -> expression [;,;] . {while}
building new item: expression_statement -> expression [;,;] . {{}
building new item: expression_statement -> expression [;,;] . {~}
closure post shift
LOOP: 168, token: return, token_value: return
[verbose dump (every loop)]
parser state:
current token: return, value: return
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [expression,expression]
  [;,;]
 state stack (kernel items of top state only):
  state 6
   kernel items:
    expression_statement -> expression [;,;] . {}}
    expression_statement -> expression [;,;] . {!}
    expression_statement -> expression [;,;] . {&}
    expression_statement -> expression [;,;] . {(}
    expression_statement -> expression [;,;] . {*}
    expression_statement -> expression [;,;] . {+}
    expression_statement -> expression [;,;] . {-}
    expression_statement -> expression [;,;] . {;}
    expression_statement -> expression [;,;] . {DEC_OP}
    expression_statement -> expression [;,;] . {INC_OP}
    expression_statement -> expression [;,;] . {TYPE_NAME}
    expression_statement -> expression [;,;] . {auto}
    expression_statement -> expression [;,;] . {bool}
    expression_statement -> expression [;,;] . {break}
    expression_statement -> expression [;,;] . {case}
    expression_statement -> expression [;,;] . {char}
    expression_statement -> expression [;,;] . {complex}
    expression_statement -> expression [;,;] . {const}
    expression_statement -> expression [;,;] . {continue}
    expression_statement -> expression [;,;] . {default}
    expression_statement -> expression [;,;] . {do}
    expression_statement -> expression [;,;] . {double}
    expression_statement -> expression [;,;] . {enum}
    expression_statement -> expression [;,;] . {extern}
    expression_statement -> expression [;,;] . {float}
    expression_statement -> expression [;,;] . {for}
    expression_statement -> expression [;,;] . {goto}
    expression_statement -> expression [;,;] . {id}
    expression_statement -> expression [;,;] . {if}
    expression_statement -> expression [;,;] . {imaginary}
    expression_statement -> expression [;,;] . {inline}
    expression_statement -> expression [;,;] . {int}
    expression_statement -> expression [;,;] . {long}
    expression_statement -> expression [;,;] . {num}
    expression_statement -> expression [;,;] . {register}
    expression_statement -> expression [;,;] . {restrict}
    expression_statement -> expression [;,;] . {return}
    expression_statement -> expression [;,;] . {short}
    expression_statement -> expression [;,;] . {signed}
    expression_statement -> expression [;,;] . {sizeof}
    expression_statement -> expression [;,;] . {static}
    expression_statement -> expression [;,;] . {string}
    expression_statement -> expression [;,;] . {struct}
    expression_statement -> expression [;,;] . {switch}
    expression_statement -> expression [;,;] . {typedef}
    expression_statement -> expression [;,;] . {union}
    expression_statement -> expression [;,;] . {unsigned}
    expression_statement -> expression [;,;] . {void}
    expression_statement -> expression [;,;] . {volatile}
    expression_statement -> expression [;,;] . {while}
    expression_statement -> expression [;,;] . {{}
    expression_statement -> expression [;,;] . {~}
check: reduce expression_statement -> expression [;,;] . {return}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: expression_statement -> expression [;,;] . {}}
trying to reduce by: expression_statement -> expression [;,;] . {!}
trying to reduce by: expression_statement -> expression [;,;] . {&}
trying to reduce by: expression_statement -> expression [;,;] . {(}
trying to reduce by: expression_statement -> expression [;,;] . {*}
trying to reduce by: expression_statement -> expression [;,;] . {+}
trying to reduce by: expression_statement -> expression [;,;] . {-}
trying to reduce by: expression_statement -> expression [;,;] . {;}
trying to reduce by: expression_statement -> expression [;,;] . {DEC_OP}
trying to reduce by: expression_statement -> expression [;,;] . {INC_OP}
trying to reduce by: expression_statement -> expression [;,;] . {TYPE_NAME}
trying to reduce by: expression_statement -> expression [;,;] . {auto}
trying to reduce by: expression_statement -> expression [;,;] . {bool}
trying to reduce by: expression_statement -> expression [;,;] . {break}
trying to reduce by: expression_statement -> expression [;,;] . {case}
trying to reduce by: expression_statement -> expression [;,;] . {char}
trying to reduce by: expression_statement -> expression [;,;] . {complex}
trying to reduce by: expression_statement -> expression [;,;] . {const}
trying to reduce by: expression_statement -> expression [;,;] . {continue}
trying to reduce by: expression_statement -> expression [;,;] . {default}
trying to reduce by: expression_statement -> expression [;,;] . {do}
trying to reduce by: expression_statement -> expression [;,;] . {double}
trying to reduce by: expression_statement -> expression [;,;] . {enum}
trying to reduce by: expression_statement -> expression [;,;] . {extern}
trying to reduce by: expression_statement -> expression [;,;] . {float}
trying to reduce by: expression_statement -> expression [;,;] . {for}
trying to reduce by: expression_statement -> expression [;,;] . {goto}
trying to reduce by: expression_statement -> expression [;,;] . {id}
trying to reduce by: expression_statement -> expression [;,;] . {if}
trying to reduce by: expression_statement -> expression [;,;] . {imaginary}
trying to reduce by: expression_statement -> expression [;,;] . {inline}
trying to reduce by: expression_statement -> expression [;,;] . {int}
trying to reduce by: expression_statement -> expression [;,;] . {long}
trying to reduce by: expression_statement -> expression [;,;] . {num}
trying to reduce by: expression_statement -> expression [;,;] . {register}
trying to reduce by: expression_statement -> expression [;,;] . {restrict}
trying to reduce by: expression_statement -> expression [;,;] . {return}
reduce: expression_statement -> printf ( "%d!\n" , foo ( 2 ) ) ; 
reduce item: expression_statement -> expression [;,;] . {return}
building new item: statement -> expression_statement . {}}
building new item: statement -> expression_statement . {!}
building new item: statement -> expression_statement . {&}
building new item: statement -> expression_statement . {(}
building new item: statement -> expression_statement . {*}
building new item: statement -> expression_statement . {+}
building new item: statement -> expression_statement . {-}
building new item: statement -> expression_statement . {;}
building new item: statement -> expression_statement . {DEC_OP}
building new item: statement -> expression_statement . {INC_OP}
building new item: statement -> expression_statement . {TYPE_NAME}
building new item: statement -> expression_statement . {auto}
building new item: statement -> expression_statement . {bool}
building new item: statement -> expression_statement . {break}
building new item: statement -> expression_statement . {case}
building new item: statement -> expression_statement . {char}
building new item: statement -> expression_statement . {complex}
building new item: statement -> expression_statement . {const}
building new item: statement -> expression_statement . {continue}
building new item: statement -> expression_statement . {default}
building new item: statement -> expression_statement . {do}
building new item: statement -> expression_statement . {double}
building new item: statement -> expression_statement . {enum}
building new item: statement -> expression_statement . {extern}
building new item: statement -> expression_statement . {float}
building new item: statement -> expression_statement . {for}
building new item: statement -> expression_statement . {goto}
building new item: statement -> expression_statement . {id}
building new item: statement -> expression_statement . {if}
building new item: statement -> expression_statement . {imaginary}
building new item: statement -> expression_statement . {inline}
building new item: statement -> expression_statement . {int}
building new item: statement -> expression_statement . {long}
building new item: statement -> expression_statement . {num}
building new item: statement -> expression_statement . {register}
building new item: statement -> expression_statement . {restrict}
building new item: statement -> expression_statement . {return}
building new item: statement -> expression_statement . {short}
building new item: statement -> expression_statement . {signed}
building new item: statement -> expression_statement . {sizeof}
building new item: statement -> expression_statement . {static}
building new item: statement -> expression_statement . {string}
building new item: statement -> expression_statement . {struct}
building new item: statement -> expression_statement . {switch}
building new item: statement -> expression_statement . {typedef}
building new item: statement -> expression_statement . {union}
building new item: statement -> expression_statement . {unsigned}
building new item: statement -> expression_statement . {void}
building new item: statement -> expression_statement . {volatile}
building new item: statement -> expression_statement . {while}
building new item: statement -> expression_statement . {{}
building new item: statement -> expression_statement . {~}
closure post reduce
LOOP: 169, token: return, token_value: return
[verbose dump (every loop)]
parser state:
current token: return, value: return
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [expression_statement,expression_statement]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    statement -> expression_statement . {}}
    statement -> expression_statement . {!}
    statement -> expression_statement . {&}
    statement -> expression_statement . {(}
    statement -> expression_statement . {*}
    statement -> expression_statement . {+}
    statement -> expression_statement . {-}
    statement -> expression_statement . {;}
    statement -> expression_statement . {DEC_OP}
    statement -> expression_statement . {INC_OP}
    statement -> expression_statement . {TYPE_NAME}
    statement -> expression_statement . {auto}
    statement -> expression_statement . {bool}
    statement -> expression_statement . {break}
    statement -> expression_statement . {case}
    statement -> expression_statement . {char}
    statement -> expression_statement . {complex}
    statement -> expression_statement . {const}
    statement -> expression_statement . {continue}
    statement -> expression_statement . {default}
    statement -> expression_statement . {do}
    statement -> expression_statement . {double}
    statement -> expression_statement . {enum}
    statement -> expression_statement . {extern}
    statement -> expression_statement . {float}
    statement -> expression_statement . {for}
    statement -> expression_statement . {goto}
    statement -> expression_statement . {id}
    statement -> expression_statement . {if}
    statement -> expression_statement . {imaginary}
    statement -> expression_statement . {inline}
    statement -> expression_statement . {int}
    statement -> expression_statement . {long}
    statement -> expression_statement . {num}
    statement -> expression_statement . {register}
    statement -> expression_statement . {restrict}
    statement -> expression_statement . {return}
    statement -> expression_statement . {short}
    statement -> expression_statement . {signed}
    statement -> expression_statement . {sizeof}
    statement -> expression_statement . {static}
    statement -> expression_statement . {string}
    statement -> expression_statement . {struct}
    statement -> expression_statement . {switch}
    statement -> expression_statement . {typedef}
    statement -> expression_statement . {union}
    statement -> expression_statement . {unsigned}
    statement -> expression_statement . {void}
    statement -> expression_statement . {volatile}
    statement -> expression_statement . {while}
    statement -> expression_statement . {{}
    statement -> expression_statement . {~}
check: reduce statement -> expression_statement . {return}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: statement -> expression_statement . {}}
trying to reduce by: statement -> expression_statement . {!}
trying to reduce by: statement -> expression_statement . {&}
trying to reduce by: statement -> expression_statement . {(}
trying to reduce by: statement -> expression_statement . {*}
trying to reduce by: statement -> expression_statement . {+}
trying to reduce by: statement -> expression_statement . {-}
trying to reduce by: statement -> expression_statement . {;}
trying to reduce by: statement -> expression_statement . {DEC_OP}
trying to reduce by: statement -> expression_statement . {INC_OP}
trying to reduce by: statement -> expression_statement . {TYPE_NAME}
trying to reduce by: statement -> expression_statement . {auto}
trying to reduce by: statement -> expression_statement . {bool}
trying to reduce by: statement -> expression_statement . {break}
trying to reduce by: statement -> expression_statement . {case}
trying to reduce by: statement -> expression_statement . {char}
trying to reduce by: statement -> expression_statement . {complex}
trying to reduce by: statement -> expression_statement . {const}
trying to reduce by: statement -> expression_statement . {continue}
trying to reduce by: statement -> expression_statement . {default}
trying to reduce by: statement -> expression_statement . {do}
trying to reduce by: statement -> expression_statement . {double}
trying to reduce by: statement -> expression_statement . {enum}
trying to reduce by: statement -> expression_statement . {extern}
trying to reduce by: statement -> expression_statement . {float}
trying to reduce by: statement -> expression_statement . {for}
trying to reduce by: statement -> expression_statement . {goto}
trying to reduce by: statement -> expression_statement . {id}
trying to reduce by: statement -> expression_statement . {if}
trying to reduce by: statement -> expression_statement . {imaginary}
trying to reduce by: statement -> expression_statement . {inline}
trying to reduce by: statement -> expression_statement . {int}
trying to reduce by: statement -> expression_statement . {long}
trying to reduce by: statement -> expression_statement . {num}
trying to reduce by: statement -> expression_statement . {register}
trying to reduce by: statement -> expression_statement . {restrict}
trying to reduce by: statement -> expression_statement . {return}
reduce: statement -> printf ( "%d!\n" , foo ( 2 ) ) ; 
reduce item: statement -> expression_statement . {return}
building new item: block_item -> statement . {}}
building new item: block_item -> statement . {!}
building new item: block_item -> statement . {&}
building new item: block_item -> statement . {(}
building new item: block_item -> statement . {*}
building new item: block_item -> statement . {+}
building new item: block_item -> statement . {-}
building new item: block_item -> statement . {;}
building new item: block_item -> statement . {DEC_OP}
building new item: block_item -> statement . {INC_OP}
building new item: block_item -> statement . {TYPE_NAME}
building new item: block_item -> statement . {auto}
building new item: block_item -> statement . {bool}
building new item: block_item -> statement . {break}
building new item: block_item -> statement . {case}
building new item: block_item -> statement . {char}
building new item: block_item -> statement . {complex}
building new item: block_item -> statement . {const}
building new item: block_item -> statement . {continue}
building new item: block_item -> statement . {default}
building new item: block_item -> statement . {do}
building new item: block_item -> statement . {double}
building new item: block_item -> statement . {enum}
building new item: block_item -> statement . {extern}
building new item: block_item -> statement . {float}
building new item: block_item -> statement . {for}
building new item: block_item -> statement . {goto}
building new item: block_item -> statement . {id}
building new item: block_item -> statement . {if}
building new item: block_item -> statement . {imaginary}
building new item: block_item -> statement . {inline}
building new item: block_item -> statement . {int}
building new item: block_item -> statement . {long}
building new item: block_item -> statement . {num}
building new item: block_item -> statement . {register}
building new item: block_item -> statement . {restrict}
building new item: block_item -> statement . {return}
building new item: block_item -> statement . {short}
building new item: block_item -> statement . {signed}
building new item: block_item -> statement . {sizeof}
building new item: block_item -> statement . {static}
building new item: block_item -> statement . {string}
building new item: block_item -> statement . {struct}
building new item: block_item -> statement . {switch}
building new item: block_item -> statement . {typedef}
building new item: block_item -> statement . {union}
building new item: block_item -> statement . {unsigned}
building new item: block_item -> statement . {void}
building new item: block_item -> statement . {volatile}
building new item: block_item -> statement . {while}
building new item: block_item -> statement . {{}
building new item: block_item -> statement . {~}
closure post reduce
LOOP: 170, token: return, token_value: return
[verbose dump (every loop)]
parser state:
current token: return, value: return
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [statement,statement]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    block_item -> statement . {}}
    block_item -> statement . {!}
    block_item -> statement . {&}
    block_item -> statement . {(}
    block_item -> statement . {*}
    block_item -> statement . {+}
    block_item -> statement . {-}
    block_item -> statement . {;}
    block_item -> statement . {DEC_OP}
    block_item -> statement . {INC_OP}
    block_item -> statement . {TYPE_NAME}
    block_item -> statement . {auto}
    block_item -> statement . {bool}
    block_item -> statement . {break}
    block_item -> statement . {case}
    block_item -> statement . {char}
    block_item -> statement . {complex}
    block_item -> statement . {const}
    block_item -> statement . {continue}
    block_item -> statement . {default}
    block_item -> statement . {do}
    block_item -> statement . {double}
    block_item -> statement . {enum}
    block_item -> statement . {extern}
    block_item -> statement . {float}
    block_item -> statement . {for}
    block_item -> statement . {goto}
    block_item -> statement . {id}
    block_item -> statement . {if}
    block_item -> statement . {imaginary}
    block_item -> statement . {inline}
    block_item -> statement . {int}
    block_item -> statement . {long}
    block_item -> statement . {num}
    block_item -> statement . {register}
    block_item -> statement . {restrict}
    block_item -> statement . {return}
    block_item -> statement . {short}
    block_item -> statement . {signed}
    block_item -> statement . {sizeof}
    block_item -> statement . {static}
    block_item -> statement . {string}
    block_item -> statement . {struct}
    block_item -> statement . {switch}
    block_item -> statement . {typedef}
    block_item -> statement . {union}
    block_item -> statement . {unsigned}
    block_item -> statement . {void}
    block_item -> statement . {volatile}
    block_item -> statement . {while}
    block_item -> statement . {{}
    block_item -> statement . {~}
check: reduce block_item -> statement . {return}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: block_item -> statement . {}}
trying to reduce by: block_item -> statement . {!}
trying to reduce by: block_item -> statement . {&}
trying to reduce by: block_item -> statement . {(}
trying to reduce by: block_item -> statement . {*}
trying to reduce by: block_item -> statement . {+}
trying to reduce by: block_item -> statement . {-}
trying to reduce by: block_item -> statement . {;}
trying to reduce by: block_item -> statement . {DEC_OP}
trying to reduce by: block_item -> statement . {INC_OP}
trying to reduce by: block_item -> statement . {TYPE_NAME}
trying to reduce by: block_item -> statement . {auto}
trying to reduce by: block_item -> statement . {bool}
trying to reduce by: block_item -> statement . {break}
trying to reduce by: block_item -> statement . {case}
trying to reduce by: block_item -> statement . {char}
trying to reduce by: block_item -> statement . {complex}
trying to reduce by: block_item -> statement . {const}
trying to reduce by: block_item -> statement . {continue}
trying to reduce by: block_item -> statement . {default}
trying to reduce by: block_item -> statement . {do}
trying to reduce by: block_item -> statement . {double}
trying to reduce by: block_item -> statement . {enum}
trying to reduce by: block_item -> statement . {extern}
trying to reduce by: block_item -> statement . {float}
trying to reduce by: block_item -> statement . {for}
trying to reduce by: block_item -> statement . {goto}
trying to reduce by: block_item -> statement . {id}
trying to reduce by: block_item -> statement . {if}
trying to reduce by: block_item -> statement . {imaginary}
trying to reduce by: block_item -> statement . {inline}
trying to reduce by: block_item -> statement . {int}
trying to reduce by: block_item -> statement . {long}
trying to reduce by: block_item -> statement . {num}
trying to reduce by: block_item -> statement . {register}
trying to reduce by: block_item -> statement . {restrict}
trying to reduce by: block_item -> statement . {return}
reduce: block_item -> printf ( "%d!\n" , foo ( 2 ) ) ; 
reduce item: block_item -> statement . {return}
building new item: block_item_list -> block_item . {}}
building new item: block_item_list -> block_item . {!}
building new item: block_item_list -> block_item . {&}
building new item: block_item_list -> block_item . {(}
building new item: block_item_list -> block_item . {*}
building new item: block_item_list -> block_item . {+}
building new item: block_item_list -> block_item . {-}
building new item: block_item_list -> block_item . {;}
building new item: block_item_list -> block_item . {DEC_OP}
building new item: block_item_list -> block_item . {INC_OP}
building new item: block_item_list -> block_item . {TYPE_NAME}
building new item: block_item_list -> block_item . {auto}
building new item: block_item_list -> block_item . {bool}
building new item: block_item_list -> block_item . {break}
building new item: block_item_list -> block_item . {case}
building new item: block_item_list -> block_item . {char}
building new item: block_item_list -> block_item . {complex}
building new item: block_item_list -> block_item . {const}
building new item: block_item_list -> block_item . {continue}
building new item: block_item_list -> block_item . {default}
building new item: block_item_list -> block_item . {do}
building new item: block_item_list -> block_item . {double}
building new item: block_item_list -> block_item . {enum}
building new item: block_item_list -> block_item . {extern}
building new item: block_item_list -> block_item . {float}
building new item: block_item_list -> block_item . {for}
building new item: block_item_list -> block_item . {goto}
building new item: block_item_list -> block_item . {id}
building new item: block_item_list -> block_item . {if}
building new item: block_item_list -> block_item . {imaginary}
building new item: block_item_list -> block_item . {inline}
building new item: block_item_list -> block_item . {int}
building new item: block_item_list -> block_item . {long}
building new item: block_item_list -> block_item . {num}
building new item: block_item_list -> block_item . {register}
building new item: block_item_list -> block_item . {restrict}
building new item: block_item_list -> block_item . {return}
building new item: block_item_list -> block_item . {short}
building new item: block_item_list -> block_item . {signed}
building new item: block_item_list -> block_item . {sizeof}
building new item: block_item_list -> block_item . {static}
building new item: block_item_list -> block_item . {string}
building new item: block_item_list -> block_item . {struct}
building new item: block_item_list -> block_item . {switch}
building new item: block_item_list -> block_item . {typedef}
building new item: block_item_list -> block_item . {union}
building new item: block_item_list -> block_item . {unsigned}
building new item: block_item_list -> block_item . {void}
building new item: block_item_list -> block_item . {volatile}
building new item: block_item_list -> block_item . {while}
building new item: block_item_list -> block_item . {{}
building new item: block_item_list -> block_item . {~}
closure post reduce
LOOP: 171, token: return, token_value: return
[verbose dump (every loop)]
parser state:
current token: return, value: return
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [block_item,block_item]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    block_item_list -> block_item . {}}
    block_item_list -> block_item . {!}
    block_item_list -> block_item . {&}
    block_item_list -> block_item . {(}
    block_item_list -> block_item . {*}
    block_item_list -> block_item . {+}
    block_item_list -> block_item . {-}
    block_item_list -> block_item . {;}
    block_item_list -> block_item . {DEC_OP}
    block_item_list -> block_item . {INC_OP}
    block_item_list -> block_item . {TYPE_NAME}
    block_item_list -> block_item . {auto}
    block_item_list -> block_item . {bool}
    block_item_list -> block_item . {break}
    block_item_list -> block_item . {case}
    block_item_list -> block_item . {char}
    block_item_list -> block_item . {complex}
    block_item_list -> block_item . {const}
    block_item_list -> block_item . {continue}
    block_item_list -> block_item . {default}
    block_item_list -> block_item . {do}
    block_item_list -> block_item . {double}
    block_item_list -> block_item . {enum}
    block_item_list -> block_item . {extern}
    block_item_list -> block_item . {float}
    block_item_list -> block_item . {for}
    block_item_list -> block_item . {goto}
    block_item_list -> block_item . {id}
    block_item_list -> block_item . {if}
    block_item_list -> block_item . {imaginary}
    block_item_list -> block_item . {inline}
    block_item_list -> block_item . {int}
    block_item_list -> block_item . {long}
    block_item_list -> block_item . {num}
    block_item_list -> block_item . {register}
    block_item_list -> block_item . {restrict}
    block_item_list -> block_item . {return}
    block_item_list -> block_item . {short}
    block_item_list -> block_item . {signed}
    block_item_list -> block_item . {sizeof}
    block_item_list -> block_item . {static}
    block_item_list -> block_item . {string}
    block_item_list -> block_item . {struct}
    block_item_list -> block_item . {switch}
    block_item_list -> block_item . {typedef}
    block_item_list -> block_item . {union}
    block_item_list -> block_item . {unsigned}
    block_item_list -> block_item . {void}
    block_item_list -> block_item . {volatile}
    block_item_list -> block_item . {while}
    block_item_list -> block_item . {{}
    block_item_list -> block_item . {~}
check: reduce block_item_list -> block_item . {return}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: block_item_list -> block_item . {}}
trying to reduce by: block_item_list -> block_item . {!}
trying to reduce by: block_item_list -> block_item . {&}
trying to reduce by: block_item_list -> block_item . {(}
trying to reduce by: block_item_list -> block_item . {*}
trying to reduce by: block_item_list -> block_item . {+}
trying to reduce by: block_item_list -> block_item . {-}
trying to reduce by: block_item_list -> block_item . {;}
trying to reduce by: block_item_list -> block_item . {DEC_OP}
trying to reduce by: block_item_list -> block_item . {INC_OP}
trying to reduce by: block_item_list -> block_item . {TYPE_NAME}
trying to reduce by: block_item_list -> block_item . {auto}
trying to reduce by: block_item_list -> block_item . {bool}
trying to reduce by: block_item_list -> block_item . {break}
trying to reduce by: block_item_list -> block_item . {case}
trying to reduce by: block_item_list -> block_item . {char}
trying to reduce by: block_item_list -> block_item . {complex}
trying to reduce by: block_item_list -> block_item . {const}
trying to reduce by: block_item_list -> block_item . {continue}
trying to reduce by: block_item_list -> block_item . {default}
trying to reduce by: block_item_list -> block_item . {do}
trying to reduce by: block_item_list -> block_item . {double}
trying to reduce by: block_item_list -> block_item . {enum}
trying to reduce by: block_item_list -> block_item . {extern}
trying to reduce by: block_item_list -> block_item . {float}
trying to reduce by: block_item_list -> block_item . {for}
trying to reduce by: block_item_list -> block_item . {goto}
trying to reduce by: block_item_list -> block_item . {id}
trying to reduce by: block_item_list -> block_item . {if}
trying to reduce by: block_item_list -> block_item . {imaginary}
trying to reduce by: block_item_list -> block_item . {inline}
trying to reduce by: block_item_list -> block_item . {int}
trying to reduce by: block_item_list -> block_item . {long}
trying to reduce by: block_item_list -> block_item . {num}
trying to reduce by: block_item_list -> block_item . {register}
trying to reduce by: block_item_list -> block_item . {restrict}
trying to reduce by: block_item_list -> block_item . {return}
reduce: block_item_list -> printf ( "%d!\n" , foo ( 2 ) ) ; 
reduce item: block_item_list -> block_item . {return}
building new item: compound_statement -> [{,{] block_item_list . [},}] {$}
building new item: compound_statement -> [{,{] block_item_list . [},}] {TYPE_NAME}
building new item: compound_statement -> [{,{] block_item_list . [},}] {auto}
building new item: compound_statement -> [{,{] block_item_list . [},}] {bool}
building new item: compound_statement -> [{,{] block_item_list . [},}] {char}
building new item: compound_statement -> [{,{] block_item_list . [},}] {complex}
building new item: compound_statement -> [{,{] block_item_list . [},}] {const}
building new item: compound_statement -> [{,{] block_item_list . [},}] {double}
building new item: compound_statement -> [{,{] block_item_list . [},}] {enum}
building new item: compound_statement -> [{,{] block_item_list . [},}] {extern}
building new item: compound_statement -> [{,{] block_item_list . [},}] {float}
building new item: compound_statement -> [{,{] block_item_list . [},}] {imaginary}
building new item: compound_statement -> [{,{] block_item_list . [},}] {inline}
building new item: compound_statement -> [{,{] block_item_list . [},}] {int}
building new item: compound_statement -> [{,{] block_item_list . [},}] {long}
building new item: compound_statement -> [{,{] block_item_list . [},}] {register}
building new item: compound_statement -> [{,{] block_item_list . [},}] {restrict}
building new item: compound_statement -> [{,{] block_item_list . [},}] {short}
building new item: compound_statement -> [{,{] block_item_list . [},}] {signed}
building new item: compound_statement -> [{,{] block_item_list . [},}] {static}
building new item: compound_statement -> [{,{] block_item_list . [},}] {struct}
building new item: compound_statement -> [{,{] block_item_list . [},}] {typedef}
building new item: compound_statement -> [{,{] block_item_list . [},}] {union}
building new item: compound_statement -> [{,{] block_item_list . [},}] {unsigned}
building new item: compound_statement -> [{,{] block_item_list . [},}] {void}
building new item: compound_statement -> [{,{] block_item_list . [},}] {volatile}
building new item: block_item_list -> block_item_list . block_item {}}
building new item: block_item_list -> block_item_list . block_item {!}
building new item: block_item_list -> block_item_list . block_item {&}
building new item: block_item_list -> block_item_list . block_item {(}
building new item: block_item_list -> block_item_list . block_item {*}
building new item: block_item_list -> block_item_list . block_item {+}
building new item: block_item_list -> block_item_list . block_item {-}
building new item: block_item_list -> block_item_list . block_item {;}
building new item: block_item_list -> block_item_list . block_item {DEC_OP}
building new item: block_item_list -> block_item_list . block_item {INC_OP}
building new item: block_item_list -> block_item_list . block_item {TYPE_NAME}
building new item: block_item_list -> block_item_list . block_item {auto}
building new item: block_item_list -> block_item_list . block_item {bool}
building new item: block_item_list -> block_item_list . block_item {break}
building new item: block_item_list -> block_item_list . block_item {case}
building new item: block_item_list -> block_item_list . block_item {char}
building new item: block_item_list -> block_item_list . block_item {complex}
building new item: block_item_list -> block_item_list . block_item {const}
building new item: block_item_list -> block_item_list . block_item {continue}
building new item: block_item_list -> block_item_list . block_item {default}
building new item: block_item_list -> block_item_list . block_item {do}
building new item: block_item_list -> block_item_list . block_item {double}
building new item: block_item_list -> block_item_list . block_item {enum}
building new item: block_item_list -> block_item_list . block_item {extern}
building new item: block_item_list -> block_item_list . block_item {float}
building new item: block_item_list -> block_item_list . block_item {for}
building new item: block_item_list -> block_item_list . block_item {goto}
building new item: block_item_list -> block_item_list . block_item {id}
building new item: block_item_list -> block_item_list . block_item {if}
building new item: block_item_list -> block_item_list . block_item {imaginary}
building new item: block_item_list -> block_item_list . block_item {inline}
building new item: block_item_list -> block_item_list . block_item {int}
building new item: block_item_list -> block_item_list . block_item {long}
building new item: block_item_list -> block_item_list . block_item {num}
building new item: block_item_list -> block_item_list . block_item {register}
building new item: block_item_list -> block_item_list . block_item {restrict}
building new item: block_item_list -> block_item_list . block_item {return}
building new item: block_item_list -> block_item_list . block_item {short}
building new item: block_item_list -> block_item_list . block_item {signed}
building new item: block_item_list -> block_item_list . block_item {sizeof}
building new item: block_item_list -> block_item_list . block_item {static}
building new item: block_item_list -> block_item_list . block_item {string}
building new item: block_item_list -> block_item_list . block_item {struct}
building new item: block_item_list -> block_item_list . block_item {switch}
building new item: block_item_list -> block_item_list . block_item {typedef}
building new item: block_item_list -> block_item_list . block_item {union}
building new item: block_item_list -> block_item_list . block_item {unsigned}
building new item: block_item_list -> block_item_list . block_item {void}
building new item: block_item_list -> block_item_list . block_item {volatile}
building new item: block_item_list -> block_item_list . block_item {while}
building new item: block_item_list -> block_item_list . block_item {{}
building new item: block_item_list -> block_item_list . block_item {~}
closure post reduce
LOOP: 172, token: return, token_value: return
[verbose dump (every loop)]
parser state:
current token: return, value: return
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [block_item_list,block_item_list]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    compound_statement -> [{,{] block_item_list . [},}] {$}
    compound_statement -> [{,{] block_item_list . [},}] {TYPE_NAME}
    compound_statement -> [{,{] block_item_list . [},}] {auto}
    compound_statement -> [{,{] block_item_list . [},}] {bool}
    compound_statement -> [{,{] block_item_list . [},}] {char}
    compound_statement -> [{,{] block_item_list . [},}] {complex}
    compound_statement -> [{,{] block_item_list . [},}] {const}
    compound_statement -> [{,{] block_item_list . [},}] {double}
    compound_statement -> [{,{] block_item_list . [},}] {enum}
    compound_statement -> [{,{] block_item_list . [},}] {extern}
    compound_statement -> [{,{] block_item_list . [},}] {float}
    compound_statement -> [{,{] block_item_list . [},}] {imaginary}
    compound_statement -> [{,{] block_item_list . [},}] {inline}
    compound_statement -> [{,{] block_item_list . [},}] {int}
    compound_statement -> [{,{] block_item_list . [},}] {long}
    compound_statement -> [{,{] block_item_list . [},}] {register}
    compound_statement -> [{,{] block_item_list . [},}] {restrict}
    compound_statement -> [{,{] block_item_list . [},}] {short}
    compound_statement -> [{,{] block_item_list . [},}] {signed}
    compound_statement -> [{,{] block_item_list . [},}] {static}
    compound_statement -> [{,{] block_item_list . [},}] {struct}
    compound_statement -> [{,{] block_item_list . [},}] {typedef}
    compound_statement -> [{,{] block_item_list . [},}] {union}
    compound_statement -> [{,{] block_item_list . [},}] {unsigned}
    compound_statement -> [{,{] block_item_list . [},}] {void}
    compound_statement -> [{,{] block_item_list . [},}] {volatile}
    block_item_list -> block_item_list . block_item {}}
    block_item_list -> block_item_list . block_item {!}
    block_item_list -> block_item_list . block_item {&}
    block_item_list -> block_item_list . block_item {(}
    block_item_list -> block_item_list . block_item {*}
    block_item_list -> block_item_list . block_item {+}
    block_item_list -> block_item_list . block_item {-}
    block_item_list -> block_item_list . block_item {;}
    block_item_list -> block_item_list . block_item {DEC_OP}
    block_item_list -> block_item_list . block_item {INC_OP}
    block_item_list -> block_item_list . block_item {TYPE_NAME}
    block_item_list -> block_item_list . block_item {auto}
    block_item_list -> block_item_list . block_item {bool}
    block_item_list -> block_item_list . block_item {break}
    block_item_list -> block_item_list . block_item {case}
    block_item_list -> block_item_list . block_item {char}
    block_item_list -> block_item_list . block_item {complex}
    block_item_list -> block_item_list . block_item {const}
    block_item_list -> block_item_list . block_item {continue}
    block_item_list -> block_item_list . block_item {default}
    block_item_list -> block_item_list . block_item {do}
    block_item_list -> block_item_list . block_item {double}
    block_item_list -> block_item_list . block_item {enum}
    block_item_list -> block_item_list . block_item {extern}
    block_item_list -> block_item_list . block_item {float}
    block_item_list -> block_item_list . block_item {for}
    block_item_list -> block_item_list . block_item {goto}
    block_item_list -> block_item_list . block_item {id}
    block_item_list -> block_item_list . block_item {if}
    block_item_list -> block_item_list . block_item {imaginary}
    block_item_list -> block_item_list . block_item {inline}
    block_item_list -> block_item_list . block_item {int}
    block_item_list -> block_item_list . block_item {long}
    block_item_list -> block_item_list . block_item {num}
    block_item_list -> block_item_list . block_item {register}
    block_item_list -> block_item_list . block_item {restrict}
    block_item_list -> block_item_list . block_item {return}
    block_item_list -> block_item_list . block_item {short}
    block_item_list -> block_item_list . block_item {signed}
    block_item_list -> block_item_list . block_item {sizeof}
    block_item_list -> block_item_list . block_item {static}
    block_item_list -> block_item_list . block_item {string}
    block_item_list -> block_item_list . block_item {struct}
    block_item_list -> block_item_list . block_item {switch}
    block_item_list -> block_item_list . block_item {typedef}
    block_item_list -> block_item_list . block_item {union}
    block_item_list -> block_item_list . block_item {unsigned}
    block_item_list -> block_item_list . block_item {void}
    block_item_list -> block_item_list . block_item {volatile}
    block_item_list -> block_item_list . block_item {while}
    block_item_list -> block_item_list . block_item {{}
    block_item_list -> block_item_list . block_item {~}
check: shift jump_statement -> . [return,return] [;,;] {}}
check: shift jump_statement -> . [return,return] expression [;,;] {}}
check: shift jump_statement -> . [return,return] [;,;] {!}
check: shift jump_statement -> . [return,return] expression [;,;] {!}
check: shift jump_statement -> . [return,return] [;,;] {&}
check: shift jump_statement -> . [return,return] expression [;,;] {&}
check: shift jump_statement -> . [return,return] [;,;] {(}
check: shift jump_statement -> . [return,return] expression [;,;] {(}
check: shift jump_statement -> . [return,return] [;,;] {*}
check: shift jump_statement -> . [return,return] expression [;,;] {*}
check: shift jump_statement -> . [return,return] [;,;] {+}
check: shift jump_statement -> . [return,return] expression [;,;] {+}
check: shift jump_statement -> . [return,return] [;,;] {-}
check: shift jump_statement -> . [return,return] expression [;,;] {-}
check: shift jump_statement -> . [return,return] [;,;] {;}
check: shift jump_statement -> . [return,return] expression [;,;] {;}
check: shift jump_statement -> . [return,return] [;,;] {DEC_OP}
check: shift jump_statement -> . [return,return] expression [;,;] {DEC_OP}
check: shift jump_statement -> . [return,return] [;,;] {INC_OP}
check: shift jump_statement -> . [return,return] expression [;,;] {INC_OP}
check: shift jump_statement -> . [return,return] [;,;] {TYPE_NAME}
check: shift jump_statement -> . [return,return] expression [;,;] {TYPE_NAME}
check: shift jump_statement -> . [return,return] [;,;] {auto}
check: shift jump_statement -> . [return,return] expression [;,;] {auto}
check: shift jump_statement -> . [return,return] [;,;] {bool}
check: shift jump_statement -> . [return,return] expression [;,;] {bool}
check: shift jump_statement -> . [return,return] [;,;] {break}
check: shift jump_statement -> . [return,return] expression [;,;] {break}
check: shift jump_statement -> . [return,return] [;,;] {case}
check: shift jump_statement -> . [return,return] expression [;,;] {case}
check: shift jump_statement -> . [return,return] [;,;] {char}
check: shift jump_statement -> . [return,return] expression [;,;] {char}
check: shift jump_statement -> . [return,return] [;,;] {complex}
check: shift jump_statement -> . [return,return] expression [;,;] {complex}
check: shift jump_statement -> . [return,return] [;,;] {const}
check: shift jump_statement -> . [return,return] expression [;,;] {const}
check: shift jump_statement -> . [return,return] [;,;] {continue}
check: shift jump_statement -> . [return,return] expression [;,;] {continue}
check: shift jump_statement -> . [return,return] [;,;] {default}
check: shift jump_statement -> . [return,return] expression [;,;] {default}
check: shift jump_statement -> . [return,return] [;,;] {do}
check: shift jump_statement -> . [return,return] expression [;,;] {do}
check: shift jump_statement -> . [return,return] [;,;] {double}
check: shift jump_statement -> . [return,return] expression [;,;] {double}
check: shift jump_statement -> . [return,return] [;,;] {enum}
check: shift jump_statement -> . [return,return] expression [;,;] {enum}
check: shift jump_statement -> . [return,return] [;,;] {extern}
check: shift jump_statement -> . [return,return] expression [;,;] {extern}
check: shift jump_statement -> . [return,return] [;,;] {float}
check: shift jump_statement -> . [return,return] expression [;,;] {float}
check: shift jump_statement -> . [return,return] [;,;] {for}
check: shift jump_statement -> . [return,return] expression [;,;] {for}
check: shift jump_statement -> . [return,return] [;,;] {goto}
check: shift jump_statement -> . [return,return] expression [;,;] {goto}
check: shift jump_statement -> . [return,return] [;,;] {id}
check: shift jump_statement -> . [return,return] expression [;,;] {id}
check: shift jump_statement -> . [return,return] [;,;] {if}
check: shift jump_statement -> . [return,return] expression [;,;] {if}
check: shift jump_statement -> . [return,return] [;,;] {imaginary}
check: shift jump_statement -> . [return,return] expression [;,;] {imaginary}
check: shift jump_statement -> . [return,return] [;,;] {inline}
check: shift jump_statement -> . [return,return] expression [;,;] {inline}
check: shift jump_statement -> . [return,return] [;,;] {int}
check: shift jump_statement -> . [return,return] expression [;,;] {int}
check: shift jump_statement -> . [return,return] [;,;] {long}
check: shift jump_statement -> . [return,return] expression [;,;] {long}
check: shift jump_statement -> . [return,return] [;,;] {num}
check: shift jump_statement -> . [return,return] expression [;,;] {num}
check: shift jump_statement -> . [return,return] [;,;] {register}
check: shift jump_statement -> . [return,return] expression [;,;] {register}
check: shift jump_statement -> . [return,return] [;,;] {restrict}
check: shift jump_statement -> . [return,return] expression [;,;] {restrict}
check: shift jump_statement -> . [return,return] [;,;] {return}
check: shift jump_statement -> . [return,return] expression [;,;] {return}
check: shift jump_statement -> . [return,return] [;,;] {short}
check: shift jump_statement -> . [return,return] expression [;,;] {short}
check: shift jump_statement -> . [return,return] [;,;] {signed}
check: shift jump_statement -> . [return,return] expression [;,;] {signed}
check: shift jump_statement -> . [return,return] [;,;] {sizeof}
check: shift jump_statement -> . [return,return] expression [;,;] {sizeof}
check: shift jump_statement -> . [return,return] [;,;] {static}
check: shift jump_statement -> . [return,return] expression [;,;] {static}
check: shift jump_statement -> . [return,return] [;,;] {string}
check: shift jump_statement -> . [return,return] expression [;,;] {string}
check: shift jump_statement -> . [return,return] [;,;] {struct}
check: shift jump_statement -> . [return,return] expression [;,;] {struct}
check: shift jump_statement -> . [return,return] [;,;] {switch}
check: shift jump_statement -> . [return,return] expression [;,;] {switch}
check: shift jump_statement -> . [return,return] [;,;] {typedef}
check: shift jump_statement -> . [return,return] expression [;,;] {typedef}
check: shift jump_statement -> . [return,return] [;,;] {union}
check: shift jump_statement -> . [return,return] expression [;,;] {union}
check: shift jump_statement -> . [return,return] [;,;] {unsigned}
check: shift jump_statement -> . [return,return] expression [;,;] {unsigned}
check: shift jump_statement -> . [return,return] [;,;] {void}
check: shift jump_statement -> . [return,return] expression [;,;] {void}
check: shift jump_statement -> . [return,return] [;,;] {volatile}
check: shift jump_statement -> . [return,return] expression [;,;] {volatile}
check: shift jump_statement -> . [return,return] [;,;] {while}
check: shift jump_statement -> . [return,return] expression [;,;] {while}
check: shift jump_statement -> . [return,return] [;,;] {{}
check: shift jump_statement -> . [return,return] expression [;,;] {{}
check: shift jump_statement -> . [return,return] [;,;] {~}
check: shift jump_statement -> . [return,return] expression [;,;] {~}
shifts: 104, reduces: 0, accepts: 0
shifting [return,return]
building new item: jump_statement -> [return,return] . [;,;] {}}
building new item: jump_statement -> [return,return] . expression [;,;] {}}
building new item: jump_statement -> [return,return] . [;,;] {!}
building new item: jump_statement -> [return,return] . expression [;,;] {!}
building new item: jump_statement -> [return,return] . [;,;] {&}
building new item: jump_statement -> [return,return] . expression [;,;] {&}
building new item: jump_statement -> [return,return] . [;,;] {(}
building new item: jump_statement -> [return,return] . expression [;,;] {(}
building new item: jump_statement -> [return,return] . [;,;] {*}
building new item: jump_statement -> [return,return] . expression [;,;] {*}
building new item: jump_statement -> [return,return] . [;,;] {+}
building new item: jump_statement -> [return,return] . expression [;,;] {+}
building new item: jump_statement -> [return,return] . [;,;] {-}
building new item: jump_statement -> [return,return] . expression [;,;] {-}
building new item: jump_statement -> [return,return] . [;,;] {;}
building new item: jump_statement -> [return,return] . expression [;,;] {;}
building new item: jump_statement -> [return,return] . [;,;] {DEC_OP}
building new item: jump_statement -> [return,return] . expression [;,;] {DEC_OP}
building new item: jump_statement -> [return,return] . [;,;] {INC_OP}
building new item: jump_statement -> [return,return] . expression [;,;] {INC_OP}
building new item: jump_statement -> [return,return] . [;,;] {TYPE_NAME}
building new item: jump_statement -> [return,return] . expression [;,;] {TYPE_NAME}
building new item: jump_statement -> [return,return] . [;,;] {auto}
building new item: jump_statement -> [return,return] . expression [;,;] {auto}
building new item: jump_statement -> [return,return] . [;,;] {bool}
building new item: jump_statement -> [return,return] . expression [;,;] {bool}
building new item: jump_statement -> [return,return] . [;,;] {break}
building new item: jump_statement -> [return,return] . expression [;,;] {break}
building new item: jump_statement -> [return,return] . [;,;] {case}
building new item: jump_statement -> [return,return] . expression [;,;] {case}
building new item: jump_statement -> [return,return] . [;,;] {char}
building new item: jump_statement -> [return,return] . expression [;,;] {char}
building new item: jump_statement -> [return,return] . [;,;] {complex}
building new item: jump_statement -> [return,return] . expression [;,;] {complex}
building new item: jump_statement -> [return,return] . [;,;] {const}
building new item: jump_statement -> [return,return] . expression [;,;] {const}
building new item: jump_statement -> [return,return] . [;,;] {continue}
building new item: jump_statement -> [return,return] . expression [;,;] {continue}
building new item: jump_statement -> [return,return] . [;,;] {default}
building new item: jump_statement -> [return,return] . expression [;,;] {default}
building new item: jump_statement -> [return,return] . [;,;] {do}
building new item: jump_statement -> [return,return] . expression [;,;] {do}
building new item: jump_statement -> [return,return] . [;,;] {double}
building new item: jump_statement -> [return,return] . expression [;,;] {double}
building new item: jump_statement -> [return,return] . [;,;] {enum}
building new item: jump_statement -> [return,return] . expression [;,;] {enum}
building new item: jump_statement -> [return,return] . [;,;] {extern}
building new item: jump_statement -> [return,return] . expression [;,;] {extern}
building new item: jump_statement -> [return,return] . [;,;] {float}
building new item: jump_statement -> [return,return] . expression [;,;] {float}
building new item: jump_statement -> [return,return] . [;,;] {for}
building new item: jump_statement -> [return,return] . expression [;,;] {for}
building new item: jump_statement -> [return,return] . [;,;] {goto}
building new item: jump_statement -> [return,return] . expression [;,;] {goto}
building new item: jump_statement -> [return,return] . [;,;] {id}
building new item: jump_statement -> [return,return] . expression [;,;] {id}
building new item: jump_statement -> [return,return] . [;,;] {if}
building new item: jump_statement -> [return,return] . expression [;,;] {if}
building new item: jump_statement -> [return,return] . [;,;] {imaginary}
building new item: jump_statement -> [return,return] . expression [;,;] {imaginary}
building new item: jump_statement -> [return,return] . [;,;] {inline}
building new item: jump_statement -> [return,return] . expression [;,;] {inline}
building new item: jump_statement -> [return,return] . [;,;] {int}
building new item: jump_statement -> [return,return] . expression [;,;] {int}
building new item: jump_statement -> [return,return] . [;,;] {long}
building new item: jump_statement -> [return,return] . expression [;,;] {long}
building new item: jump_statement -> [return,return] . [;,;] {num}
building new item: jump_statement -> [return,return] . expression [;,;] {num}
building new item: jump_statement -> [return,return] . [;,;] {register}
building new item: jump_statement -> [return,return] . expression [;,;] {register}
building new item: jump_statement -> [return,return] . [;,;] {restrict}
building new item: jump_statement -> [return,return] . expression [;,;] {restrict}
building new item: jump_statement -> [return,return] . [;,;] {return}
building new item: jump_statement -> [return,return] . expression [;,;] {return}
building new item: jump_statement -> [return,return] . [;,;] {short}
building new item: jump_statement -> [return,return] . expression [;,;] {short}
building new item: jump_statement -> [return,return] . [;,;] {signed}
building new item: jump_statement -> [return,return] . expression [;,;] {signed}
building new item: jump_statement -> [return,return] . [;,;] {sizeof}
building new item: jump_statement -> [return,return] . expression [;,;] {sizeof}
building new item: jump_statement -> [return,return] . [;,;] {static}
building new item: jump_statement -> [return,return] . expression [;,;] {static}
building new item: jump_statement -> [return,return] . [;,;] {string}
building new item: jump_statement -> [return,return] . expression [;,;] {string}
building new item: jump_statement -> [return,return] . [;,;] {struct}
building new item: jump_statement -> [return,return] . expression [;,;] {struct}
building new item: jump_statement -> [return,return] . [;,;] {switch}
building new item: jump_statement -> [return,return] . expression [;,;] {switch}
building new item: jump_statement -> [return,return] . [;,;] {typedef}
building new item: jump_statement -> [return,return] . expression [;,;] {typedef}
building new item: jump_statement -> [return,return] . [;,;] {union}
building new item: jump_statement -> [return,return] . expression [;,;] {union}
building new item: jump_statement -> [return,return] . [;,;] {unsigned}
building new item: jump_statement -> [return,return] . expression [;,;] {unsigned}
building new item: jump_statement -> [return,return] . [;,;] {void}
building new item: jump_statement -> [return,return] . expression [;,;] {void}
building new item: jump_statement -> [return,return] . [;,;] {volatile}
building new item: jump_statement -> [return,return] . expression [;,;] {volatile}
building new item: jump_statement -> [return,return] . [;,;] {while}
building new item: jump_statement -> [return,return] . expression [;,;] {while}
building new item: jump_statement -> [return,return] . [;,;] {{}
building new item: jump_statement -> [return,return] . expression [;,;] {{}
building new item: jump_statement -> [return,return] . [;,;] {~}
building new item: jump_statement -> [return,return] . expression [;,;] {~}
closure post shift
LOOP: 173, token: num, token_value: 0
[verbose dump (every loop)]
parser state:
current token: num, value: 0
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [block_item_list,block_item_list]
  [return,return]
 state stack (kernel items of top state only):
  state 6
   kernel items:
    jump_statement -> [return,return] . [;,;] {}}
    jump_statement -> [return,return] . expression [;,;] {}}
    jump_statement -> [return,return] . [;,;] {!}
    jump_statement -> [return,return] . expression [;,;] {!}
    jump_statement -> [return,return] . [;,;] {&}
    jump_statement -> [return,return] . expression [;,;] {&}
    jump_statement -> [return,return] . [;,;] {(}
    jump_statement -> [return,return] . expression [;,;] {(}
    jump_statement -> [return,return] . [;,;] {*}
    jump_statement -> [return,return] . expression [;,;] {*}
    jump_statement -> [return,return] . [;,;] {+}
    jump_statement -> [return,return] . expression [;,;] {+}
    jump_statement -> [return,return] . [;,;] {-}
    jump_statement -> [return,return] . expression [;,;] {-}
    jump_statement -> [return,return] . [;,;] {;}
    jump_statement -> [return,return] . expression [;,;] {;}
    jump_statement -> [return,return] . [;,;] {DEC_OP}
    jump_statement -> [return,return] . expression [;,;] {DEC_OP}
    jump_statement -> [return,return] . [;,;] {INC_OP}
    jump_statement -> [return,return] . expression [;,;] {INC_OP}
    jump_statement -> [return,return] . [;,;] {TYPE_NAME}
    jump_statement -> [return,return] . expression [;,;] {TYPE_NAME}
    jump_statement -> [return,return] . [;,;] {auto}
    jump_statement -> [return,return] . expression [;,;] {auto}
    jump_statement -> [return,return] . [;,;] {bool}
    jump_statement -> [return,return] . expression [;,;] {bool}
    jump_statement -> [return,return] . [;,;] {break}
    jump_statement -> [return,return] . expression [;,;] {break}
    jump_statement -> [return,return] . [;,;] {case}
    jump_statement -> [return,return] . expression [;,;] {case}
    jump_statement -> [return,return] . [;,;] {char}
    jump_statement -> [return,return] . expression [;,;] {char}
    jump_statement -> [return,return] . [;,;] {complex}
    jump_statement -> [return,return] . expression [;,;] {complex}
    jump_statement -> [return,return] . [;,;] {const}
    jump_statement -> [return,return] . expression [;,;] {const}
    jump_statement -> [return,return] . [;,;] {continue}
    jump_statement -> [return,return] . expression [;,;] {continue}
    jump_statement -> [return,return] . [;,;] {default}
    jump_statement -> [return,return] . expression [;,;] {default}
    jump_statement -> [return,return] . [;,;] {do}
    jump_statement -> [return,return] . expression [;,;] {do}
    jump_statement -> [return,return] . [;,;] {double}
    jump_statement -> [return,return] . expression [;,;] {double}
    jump_statement -> [return,return] . [;,;] {enum}
    jump_statement -> [return,return] . expression [;,;] {enum}
    jump_statement -> [return,return] . [;,;] {extern}
    jump_statement -> [return,return] . expression [;,;] {extern}
    jump_statement -> [return,return] . [;,;] {float}
    jump_statement -> [return,return] . expression [;,;] {float}
    jump_statement -> [return,return] . [;,;] {for}
    jump_statement -> [return,return] . expression [;,;] {for}
    jump_statement -> [return,return] . [;,;] {goto}
    jump_statement -> [return,return] . expression [;,;] {goto}
    jump_statement -> [return,return] . [;,;] {id}
    jump_statement -> [return,return] . expression [;,;] {id}
    jump_statement -> [return,return] . [;,;] {if}
    jump_statement -> [return,return] . expression [;,;] {if}
    jump_statement -> [return,return] . [;,;] {imaginary}
    jump_statement -> [return,return] . expression [;,;] {imaginary}
    jump_statement -> [return,return] . [;,;] {inline}
    jump_statement -> [return,return] . expression [;,;] {inline}
    jump_statement -> [return,return] . [;,;] {int}
    jump_statement -> [return,return] . expression [;,;] {int}
    jump_statement -> [return,return] . [;,;] {long}
    jump_statement -> [return,return] . expression [;,;] {long}
    jump_statement -> [return,return] . [;,;] {num}
    jump_statement -> [return,return] . expression [;,;] {num}
    jump_statement -> [return,return] . [;,;] {register}
    jump_statement -> [return,return] . expression [;,;] {register}
    jump_statement -> [return,return] . [;,;] {restrict}
    jump_statement -> [return,return] . expression [;,;] {restrict}
    jump_statement -> [return,return] . [;,;] {return}
    jump_statement -> [return,return] . expression [;,;] {return}
    jump_statement -> [return,return] . [;,;] {short}
    jump_statement -> [return,return] . expression [;,;] {short}
    jump_statement -> [return,return] . [;,;] {signed}
    jump_statement -> [return,return] . expression [;,;] {signed}
    jump_statement -> [return,return] . [;,;] {sizeof}
    jump_statement -> [return,return] . expression [;,;] {sizeof}
    jump_statement -> [return,return] . [;,;] {static}
    jump_statement -> [return,return] . expression [;,;] {static}
    jump_statement -> [return,return] . [;,;] {string}
    jump_statement -> [return,return] . expression [;,;] {string}
    jump_statement -> [return,return] . [;,;] {struct}
    jump_statement -> [return,return] . expression [;,;] {struct}
    jump_statement -> [return,return] . [;,;] {switch}
    jump_statement -> [return,return] . expression [;,;] {switch}
    jump_statement -> [return,return] . [;,;] {typedef}
    jump_statement -> [return,return] . expression [;,;] {typedef}
    jump_statement -> [return,return] . [;,;] {union}
    jump_statement -> [return,return] . expression [;,;] {union}
    jump_statement -> [return,return] . [;,;] {unsigned}
    jump_statement -> [return,return] . expression [;,;] {unsigned}
    jump_statement -> [return,return] . [;,;] {void}
    jump_statement -> [return,return] . expression [;,;] {void}
    jump_statement -> [return,return] . [;,;] {volatile}
    jump_statement -> [return,return] . expression [;,;] {volatile}
    jump_statement -> [return,return] . [;,;] {while}
    jump_statement -> [return,return] . expression [;,;] {while}
    jump_statement -> [return,return] . [;,;] {{}
    jump_statement -> [return,return] . expression [;,;] {{}
    jump_statement -> [return,return] . [;,;] {~}
    jump_statement -> [return,return] . expression [;,;] {~}
check: shift primary_expression -> . [num,num] {=}
check: shift primary_expression -> . [num,num] {ADD_ASSIGN}
check: shift primary_expression -> . [num,num] {AND_ASSIGN}
check: shift primary_expression -> . [num,num] {DIV_ASSIGN}
check: shift primary_expression -> . [num,num] {LEFT_ASSIGN}
check: shift primary_expression -> . [num,num] {MOD_ASSIGN}
check: shift primary_expression -> . [num,num] {MUL_ASSIGN}
check: shift primary_expression -> . [num,num] {OR_ASSIGN}
check: shift primary_expression -> . [num,num] {RIGHT_ASSIGN}
check: shift primary_expression -> . [num,num] {SUB_ASSIGN}
check: shift primary_expression -> . [num,num] {XOR_ASSIGN}
check: shift primary_expression -> . [num,num] {[}
check: shift primary_expression -> . [num,num] {(}
check: shift primary_expression -> . [num,num] {.}
check: shift primary_expression -> . [num,num] {PTR_OP}
check: shift primary_expression -> . [num,num] {INC_OP}
check: shift primary_expression -> . [num,num] {DEC_OP}
check: shift primary_expression -> . [num,num] {;}
check: shift primary_expression -> . [num,num] {?}
check: shift primary_expression -> . [num,num] {*}
check: shift primary_expression -> . [num,num] {/}
check: shift primary_expression -> . [num,num] {%}
check: shift primary_expression -> . [num,num] {+}
check: shift primary_expression -> . [num,num] {-}
check: shift primary_expression -> . [num,num] {LEFT_OP}
check: shift primary_expression -> . [num,num] {RIGHT_OP}
check: shift primary_expression -> . [num,num] {<}
check: shift primary_expression -> . [num,num] {>}
check: shift primary_expression -> . [num,num] {LE_OP}
check: shift primary_expression -> . [num,num] {GE_OP}
check: shift primary_expression -> . [num,num] {EQ_OP}
check: shift primary_expression -> . [num,num] {NE_OP}
check: shift primary_expression -> . [num,num] {&}
check: shift primary_expression -> . [num,num] {^}
check: shift primary_expression -> . [num,num] {|}
check: shift primary_expression -> . [num,num] {AND_OP}
check: shift primary_expression -> . [num,num] {OR_OP}
check: shift primary_expression -> . [num,num] {,}
shifts: 38, reduces: 0, accepts: 0
shifting [num,0]
building new item: primary_expression -> [num,num] . {=}
building new item: primary_expression -> [num,num] . {ADD_ASSIGN}
building new item: primary_expression -> [num,num] . {AND_ASSIGN}
building new item: primary_expression -> [num,num] . {DIV_ASSIGN}
building new item: primary_expression -> [num,num] . {LEFT_ASSIGN}
building new item: primary_expression -> [num,num] . {MOD_ASSIGN}
building new item: primary_expression -> [num,num] . {MUL_ASSIGN}
building new item: primary_expression -> [num,num] . {OR_ASSIGN}
building new item: primary_expression -> [num,num] . {RIGHT_ASSIGN}
building new item: primary_expression -> [num,num] . {SUB_ASSIGN}
building new item: primary_expression -> [num,num] . {XOR_ASSIGN}
building new item: primary_expression -> [num,num] . {[}
building new item: primary_expression -> [num,num] . {(}
building new item: primary_expression -> [num,num] . {.}
building new item: primary_expression -> [num,num] . {PTR_OP}
building new item: primary_expression -> [num,num] . {INC_OP}
building new item: primary_expression -> [num,num] . {DEC_OP}
building new item: primary_expression -> [num,num] . {;}
building new item: primary_expression -> [num,num] . {?}
building new item: primary_expression -> [num,num] . {*}
building new item: primary_expression -> [num,num] . {/}
building new item: primary_expression -> [num,num] . {%}
building new item: primary_expression -> [num,num] . {+}
building new item: primary_expression -> [num,num] . {-}
building new item: primary_expression -> [num,num] . {LEFT_OP}
building new item: primary_expression -> [num,num] . {RIGHT_OP}
building new item: primary_expression -> [num,num] . {<}
building new item: primary_expression -> [num,num] . {>}
building new item: primary_expression -> [num,num] . {LE_OP}
building new item: primary_expression -> [num,num] . {GE_OP}
building new item: primary_expression -> [num,num] . {EQ_OP}
building new item: primary_expression -> [num,num] . {NE_OP}
building new item: primary_expression -> [num,num] . {&}
building new item: primary_expression -> [num,num] . {^}
building new item: primary_expression -> [num,num] . {|}
building new item: primary_expression -> [num,num] . {AND_OP}
building new item: primary_expression -> [num,num] . {OR_OP}
building new item: primary_expression -> [num,num] . {,}
closure post shift
LOOP: 174, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [block_item_list,block_item_list]
  [return,return]
  [num,0]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    primary_expression -> [num,num] . {=}
    primary_expression -> [num,num] . {ADD_ASSIGN}
    primary_expression -> [num,num] . {AND_ASSIGN}
    primary_expression -> [num,num] . {DIV_ASSIGN}
    primary_expression -> [num,num] . {LEFT_ASSIGN}
    primary_expression -> [num,num] . {MOD_ASSIGN}
    primary_expression -> [num,num] . {MUL_ASSIGN}
    primary_expression -> [num,num] . {OR_ASSIGN}
    primary_expression -> [num,num] . {RIGHT_ASSIGN}
    primary_expression -> [num,num] . {SUB_ASSIGN}
    primary_expression -> [num,num] . {XOR_ASSIGN}
    primary_expression -> [num,num] . {[}
    primary_expression -> [num,num] . {(}
    primary_expression -> [num,num] . {.}
    primary_expression -> [num,num] . {PTR_OP}
    primary_expression -> [num,num] . {INC_OP}
    primary_expression -> [num,num] . {DEC_OP}
    primary_expression -> [num,num] . {;}
    primary_expression -> [num,num] . {?}
    primary_expression -> [num,num] . {*}
    primary_expression -> [num,num] . {/}
    primary_expression -> [num,num] . {%}
    primary_expression -> [num,num] . {+}
    primary_expression -> [num,num] . {-}
    primary_expression -> [num,num] . {LEFT_OP}
    primary_expression -> [num,num] . {RIGHT_OP}
    primary_expression -> [num,num] . {<}
    primary_expression -> [num,num] . {>}
    primary_expression -> [num,num] . {LE_OP}
    primary_expression -> [num,num] . {GE_OP}
    primary_expression -> [num,num] . {EQ_OP}
    primary_expression -> [num,num] . {NE_OP}
    primary_expression -> [num,num] . {&}
    primary_expression -> [num,num] . {^}
    primary_expression -> [num,num] . {|}
    primary_expression -> [num,num] . {AND_OP}
    primary_expression -> [num,num] . {OR_OP}
    primary_expression -> [num,num] . {,}
check: reduce primary_expression -> [num,num] . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: primary_expression -> [num,num] . {=}
trying to reduce by: primary_expression -> [num,num] . {ADD_ASSIGN}
trying to reduce by: primary_expression -> [num,num] . {AND_ASSIGN}
trying to reduce by: primary_expression -> [num,num] . {DIV_ASSIGN}
trying to reduce by: primary_expression -> [num,num] . {LEFT_ASSIGN}
trying to reduce by: primary_expression -> [num,num] . {MOD_ASSIGN}
trying to reduce by: primary_expression -> [num,num] . {MUL_ASSIGN}
trying to reduce by: primary_expression -> [num,num] . {OR_ASSIGN}
trying to reduce by: primary_expression -> [num,num] . {RIGHT_ASSIGN}
trying to reduce by: primary_expression -> [num,num] . {SUB_ASSIGN}
trying to reduce by: primary_expression -> [num,num] . {XOR_ASSIGN}
trying to reduce by: primary_expression -> [num,num] . {[}
trying to reduce by: primary_expression -> [num,num] . {(}
trying to reduce by: primary_expression -> [num,num] . {.}
trying to reduce by: primary_expression -> [num,num] . {PTR_OP}
trying to reduce by: primary_expression -> [num,num] . {INC_OP}
trying to reduce by: primary_expression -> [num,num] . {DEC_OP}
trying to reduce by: primary_expression -> [num,num] . {;}
reduce: primary_expression -> 0 
reduce item: primary_expression -> [num,num] . {;}
building new item: postfix_expression -> primary_expression . {=}
building new item: postfix_expression -> primary_expression . {ADD_ASSIGN}
building new item: postfix_expression -> primary_expression . {AND_ASSIGN}
building new item: postfix_expression -> primary_expression . {DIV_ASSIGN}
building new item: postfix_expression -> primary_expression . {LEFT_ASSIGN}
building new item: postfix_expression -> primary_expression . {MOD_ASSIGN}
building new item: postfix_expression -> primary_expression . {MUL_ASSIGN}
building new item: postfix_expression -> primary_expression . {OR_ASSIGN}
building new item: postfix_expression -> primary_expression . {RIGHT_ASSIGN}
building new item: postfix_expression -> primary_expression . {SUB_ASSIGN}
building new item: postfix_expression -> primary_expression . {XOR_ASSIGN}
building new item: postfix_expression -> primary_expression . {[}
building new item: postfix_expression -> primary_expression . {(}
building new item: postfix_expression -> primary_expression . {.}
building new item: postfix_expression -> primary_expression . {PTR_OP}
building new item: postfix_expression -> primary_expression . {INC_OP}
building new item: postfix_expression -> primary_expression . {DEC_OP}
building new item: postfix_expression -> primary_expression . {;}
building new item: postfix_expression -> primary_expression . {?}
building new item: postfix_expression -> primary_expression . {*}
building new item: postfix_expression -> primary_expression . {/}
building new item: postfix_expression -> primary_expression . {%}
building new item: postfix_expression -> primary_expression . {+}
building new item: postfix_expression -> primary_expression . {-}
building new item: postfix_expression -> primary_expression . {LEFT_OP}
building new item: postfix_expression -> primary_expression . {RIGHT_OP}
building new item: postfix_expression -> primary_expression . {<}
building new item: postfix_expression -> primary_expression . {>}
building new item: postfix_expression -> primary_expression . {LE_OP}
building new item: postfix_expression -> primary_expression . {GE_OP}
building new item: postfix_expression -> primary_expression . {EQ_OP}
building new item: postfix_expression -> primary_expression . {NE_OP}
building new item: postfix_expression -> primary_expression . {&}
building new item: postfix_expression -> primary_expression . {^}
building new item: postfix_expression -> primary_expression . {|}
building new item: postfix_expression -> primary_expression . {AND_OP}
building new item: postfix_expression -> primary_expression . {OR_OP}
building new item: postfix_expression -> primary_expression . {,}
closure post reduce
LOOP: 175, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [block_item_list,block_item_list]
  [return,return]
  [primary_expression,primary_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    postfix_expression -> primary_expression . {=}
    postfix_expression -> primary_expression . {ADD_ASSIGN}
    postfix_expression -> primary_expression . {AND_ASSIGN}
    postfix_expression -> primary_expression . {DIV_ASSIGN}
    postfix_expression -> primary_expression . {LEFT_ASSIGN}
    postfix_expression -> primary_expression . {MOD_ASSIGN}
    postfix_expression -> primary_expression . {MUL_ASSIGN}
    postfix_expression -> primary_expression . {OR_ASSIGN}
    postfix_expression -> primary_expression . {RIGHT_ASSIGN}
    postfix_expression -> primary_expression . {SUB_ASSIGN}
    postfix_expression -> primary_expression . {XOR_ASSIGN}
    postfix_expression -> primary_expression . {[}
    postfix_expression -> primary_expression . {(}
    postfix_expression -> primary_expression . {.}
    postfix_expression -> primary_expression . {PTR_OP}
    postfix_expression -> primary_expression . {INC_OP}
    postfix_expression -> primary_expression . {DEC_OP}
    postfix_expression -> primary_expression . {;}
    postfix_expression -> primary_expression . {?}
    postfix_expression -> primary_expression . {*}
    postfix_expression -> primary_expression . {/}
    postfix_expression -> primary_expression . {%}
    postfix_expression -> primary_expression . {+}
    postfix_expression -> primary_expression . {-}
    postfix_expression -> primary_expression . {LEFT_OP}
    postfix_expression -> primary_expression . {RIGHT_OP}
    postfix_expression -> primary_expression . {<}
    postfix_expression -> primary_expression . {>}
    postfix_expression -> primary_expression . {LE_OP}
    postfix_expression -> primary_expression . {GE_OP}
    postfix_expression -> primary_expression . {EQ_OP}
    postfix_expression -> primary_expression . {NE_OP}
    postfix_expression -> primary_expression . {&}
    postfix_expression -> primary_expression . {^}
    postfix_expression -> primary_expression . {|}
    postfix_expression -> primary_expression . {AND_OP}
    postfix_expression -> primary_expression . {OR_OP}
    postfix_expression -> primary_expression . {,}
check: reduce postfix_expression -> primary_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: postfix_expression -> primary_expression . {=}
trying to reduce by: postfix_expression -> primary_expression . {ADD_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {AND_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {DIV_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {MOD_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {MUL_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {OR_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {SUB_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {XOR_ASSIGN}
trying to reduce by: postfix_expression -> primary_expression . {[}
trying to reduce by: postfix_expression -> primary_expression . {(}
trying to reduce by: postfix_expression -> primary_expression . {.}
trying to reduce by: postfix_expression -> primary_expression . {PTR_OP}
trying to reduce by: postfix_expression -> primary_expression . {INC_OP}
trying to reduce by: postfix_expression -> primary_expression . {DEC_OP}
trying to reduce by: postfix_expression -> primary_expression . {;}
reduce: postfix_expression -> 0 
reduce item: postfix_expression -> primary_expression . {;}
building new item: unary_expression -> postfix_expression . {=}
building new item: unary_expression -> postfix_expression . {ADD_ASSIGN}
building new item: unary_expression -> postfix_expression . {AND_ASSIGN}
building new item: unary_expression -> postfix_expression . {DIV_ASSIGN}
building new item: unary_expression -> postfix_expression . {LEFT_ASSIGN}
building new item: unary_expression -> postfix_expression . {MOD_ASSIGN}
building new item: unary_expression -> postfix_expression . {MUL_ASSIGN}
building new item: unary_expression -> postfix_expression . {OR_ASSIGN}
building new item: unary_expression -> postfix_expression . {RIGHT_ASSIGN}
building new item: unary_expression -> postfix_expression . {SUB_ASSIGN}
building new item: unary_expression -> postfix_expression . {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {=}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {=}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {=}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {=}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {=}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {=}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {=}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {ADD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DIV_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MOD_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MUL_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {SUB_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {XOR_ASSIGN}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {[}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {[}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {[}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {[}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {[}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {[}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {[}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {(}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {(}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {(}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {(}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {(}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {(}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {(}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {.}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {.}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {.}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {.}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {.}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {.}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {.}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {PTR_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {INC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {INC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {INC_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {INC_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {INC_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {INC_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {INC_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DEC_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DEC_OP}
building new item: unary_expression -> postfix_expression . {;}
building new item: unary_expression -> postfix_expression . {?}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {;}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {;}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {;}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {;}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {;}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {;}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {;}
building new item: unary_expression -> postfix_expression . {*}
building new item: unary_expression -> postfix_expression . {/}
building new item: unary_expression -> postfix_expression . {%}
building new item: unary_expression -> postfix_expression . {+}
building new item: unary_expression -> postfix_expression . {-}
building new item: unary_expression -> postfix_expression . {LEFT_OP}
building new item: unary_expression -> postfix_expression . {RIGHT_OP}
building new item: unary_expression -> postfix_expression . {<}
building new item: unary_expression -> postfix_expression . {>}
building new item: unary_expression -> postfix_expression . {LE_OP}
building new item: unary_expression -> postfix_expression . {GE_OP}
building new item: unary_expression -> postfix_expression . {EQ_OP}
building new item: unary_expression -> postfix_expression . {NE_OP}
building new item: unary_expression -> postfix_expression . {&}
building new item: unary_expression -> postfix_expression . {^}
building new item: unary_expression -> postfix_expression . {|}
building new item: unary_expression -> postfix_expression . {AND_OP}
building new item: unary_expression -> postfix_expression . {OR_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {?}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {?}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {?}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {?}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {?}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {?}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {?}
building new item: unary_expression -> postfix_expression . {,}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {*}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {*}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {*}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {*}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {*}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {*}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {*}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {/}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {/}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {/}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {/}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {/}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {/}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {/}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {%}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {%}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {%}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {%}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {%}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {%}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {%}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {+}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {+}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {+}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {+}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {+}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {+}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {+}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {-}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {-}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {-}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {-}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {-}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {-}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {-}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {<}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {<}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {<}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {<}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {<}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {<}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {<}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {>}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {>}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {>}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {>}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {>}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {>}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {>}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {LE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {LE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LE_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {LE_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LE_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LE_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LE_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {GE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {GE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {GE_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {GE_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {GE_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {GE_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {GE_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {EQ_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {NE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {NE_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {NE_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {NE_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {NE_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {NE_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {NE_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {&}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {&}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {&}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {&}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {&}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {&}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {&}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {^}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {^}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {^}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {^}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {^}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {^}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {^}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {|}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {|}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {|}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {|}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {|}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {|}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {|}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {AND_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {AND_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {OR_OP}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_OP}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {OR_OP}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_OP}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_OP}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_OP}
building new item: postfix_expression -> postfix_expression . [[,[] expression [],]] {,}
building new item: postfix_expression -> postfix_expression . [(,(] [),)] {,}
building new item: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {,}
building new item: postfix_expression -> postfix_expression . [.,.] [id,id] {,}
building new item: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {,}
building new item: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {,}
building new item: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {,}
closure post reduce
LOOP: 176, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [block_item_list,block_item_list]
  [return,return]
  [postfix_expression,postfix_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    unary_expression -> postfix_expression . {=}
    unary_expression -> postfix_expression . {ADD_ASSIGN}
    unary_expression -> postfix_expression . {AND_ASSIGN}
    unary_expression -> postfix_expression . {DIV_ASSIGN}
    unary_expression -> postfix_expression . {LEFT_ASSIGN}
    unary_expression -> postfix_expression . {MOD_ASSIGN}
    unary_expression -> postfix_expression . {MUL_ASSIGN}
    unary_expression -> postfix_expression . {OR_ASSIGN}
    unary_expression -> postfix_expression . {RIGHT_ASSIGN}
    unary_expression -> postfix_expression . {SUB_ASSIGN}
    unary_expression -> postfix_expression . {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {=}
    postfix_expression -> postfix_expression . [(,(] [),)] {=}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {=}
    postfix_expression -> postfix_expression . [.,.] [id,id] {=}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {=}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {=}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {=}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {ADD_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DIV_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MOD_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MUL_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {SUB_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] [),)] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [.,.] [id,id] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {XOR_ASSIGN}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {[}
    postfix_expression -> postfix_expression . [(,(] [),)] {[}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {[}
    postfix_expression -> postfix_expression . [.,.] [id,id] {[}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {[}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {[}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {[}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {(}
    postfix_expression -> postfix_expression . [(,(] [),)] {(}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {(}
    postfix_expression -> postfix_expression . [.,.] [id,id] {(}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {(}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {(}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {(}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {.}
    postfix_expression -> postfix_expression . [(,(] [),)] {.}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {.}
    postfix_expression -> postfix_expression . [.,.] [id,id] {.}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {.}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {.}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {.}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {PTR_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {PTR_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {PTR_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {PTR_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {PTR_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {PTR_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {PTR_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {INC_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {INC_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {INC_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {INC_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {INC_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {INC_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {INC_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {DEC_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {DEC_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DEC_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {DEC_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DEC_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DEC_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DEC_OP}
    unary_expression -> postfix_expression . {;}
    unary_expression -> postfix_expression . {?}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {;}
    postfix_expression -> postfix_expression . [(,(] [),)] {;}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {;}
    postfix_expression -> postfix_expression . [.,.] [id,id] {;}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {;}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {;}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {;}
    unary_expression -> postfix_expression . {*}
    unary_expression -> postfix_expression . {/}
    unary_expression -> postfix_expression . {%}
    unary_expression -> postfix_expression . {+}
    unary_expression -> postfix_expression . {-}
    unary_expression -> postfix_expression . {LEFT_OP}
    unary_expression -> postfix_expression . {RIGHT_OP}
    unary_expression -> postfix_expression . {<}
    unary_expression -> postfix_expression . {>}
    unary_expression -> postfix_expression . {LE_OP}
    unary_expression -> postfix_expression . {GE_OP}
    unary_expression -> postfix_expression . {EQ_OP}
    unary_expression -> postfix_expression . {NE_OP}
    unary_expression -> postfix_expression . {&}
    unary_expression -> postfix_expression . {^}
    unary_expression -> postfix_expression . {|}
    unary_expression -> postfix_expression . {AND_OP}
    unary_expression -> postfix_expression . {OR_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {?}
    postfix_expression -> postfix_expression . [(,(] [),)] {?}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {?}
    postfix_expression -> postfix_expression . [.,.] [id,id] {?}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {?}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {?}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {?}
    unary_expression -> postfix_expression . {,}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {*}
    postfix_expression -> postfix_expression . [(,(] [),)] {*}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {*}
    postfix_expression -> postfix_expression . [.,.] [id,id] {*}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {*}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {*}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {*}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {/}
    postfix_expression -> postfix_expression . [(,(] [),)] {/}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {/}
    postfix_expression -> postfix_expression . [.,.] [id,id] {/}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {/}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {/}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {/}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {%}
    postfix_expression -> postfix_expression . [(,(] [),)] {%}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {%}
    postfix_expression -> postfix_expression . [.,.] [id,id] {%}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {%}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {%}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {%}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {+}
    postfix_expression -> postfix_expression . [(,(] [),)] {+}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {+}
    postfix_expression -> postfix_expression . [.,.] [id,id] {+}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {+}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {+}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {+}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {-}
    postfix_expression -> postfix_expression . [(,(] [),)] {-}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {-}
    postfix_expression -> postfix_expression . [.,.] [id,id] {-}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {-}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {-}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {-}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {<}
    postfix_expression -> postfix_expression . [(,(] [),)] {<}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {<}
    postfix_expression -> postfix_expression . [.,.] [id,id] {<}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {<}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {<}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {<}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {>}
    postfix_expression -> postfix_expression . [(,(] [),)] {>}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {>}
    postfix_expression -> postfix_expression . [.,.] [id,id] {>}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {>}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {>}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {>}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {LE_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {LE_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LE_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {LE_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LE_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LE_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LE_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {GE_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {GE_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {GE_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {GE_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {GE_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {GE_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {GE_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {EQ_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {EQ_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {EQ_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {EQ_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {EQ_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {EQ_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {EQ_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {NE_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {NE_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {NE_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {NE_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {NE_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {NE_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {NE_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {&}
    postfix_expression -> postfix_expression . [(,(] [),)] {&}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {&}
    postfix_expression -> postfix_expression . [.,.] [id,id] {&}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {&}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {&}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {&}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {^}
    postfix_expression -> postfix_expression . [(,(] [),)] {^}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {^}
    postfix_expression -> postfix_expression . [.,.] [id,id] {^}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {^}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {^}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {^}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {|}
    postfix_expression -> postfix_expression . [(,(] [),)] {|}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {|}
    postfix_expression -> postfix_expression . [.,.] [id,id] {|}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {|}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {|}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {|}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {AND_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {AND_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_OP}
    postfix_expression -> postfix_expression . [(,(] [),)] {OR_OP}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_OP}
    postfix_expression -> postfix_expression . [.,.] [id,id] {OR_OP}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_OP}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_OP}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_OP}
    postfix_expression -> postfix_expression . [[,[] expression [],]] {,}
    postfix_expression -> postfix_expression . [(,(] [),)] {,}
    postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {,}
    postfix_expression -> postfix_expression . [.,.] [id,id] {,}
    postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {,}
    postfix_expression -> postfix_expression . [INC_OP,INC_OP] {,}
    postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {,}
check: reduce unary_expression -> postfix_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: unary_expression -> postfix_expression . {=}
trying to reduce by: unary_expression -> postfix_expression . {ADD_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {AND_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {DIV_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {LEFT_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {MOD_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {MUL_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {OR_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {RIGHT_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {SUB_ASSIGN}
trying to reduce by: unary_expression -> postfix_expression . {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {=}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {=}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {=}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {=}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {=}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {=}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {=}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {ADD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {AND_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DIV_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {LEFT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MOD_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {MUL_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {OR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {RIGHT_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {SUB_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {XOR_ASSIGN}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {[}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {[}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {[}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {[}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {[}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {[}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {[}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {(}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {(}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {(}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {(}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {(}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {(}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {(}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {.}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {.}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {.}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {.}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {.}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {.}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {.}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {PTR_OP}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {INC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [[,[] expression [],]] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] [),)] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [(,(] argument_expression_list [),)] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [.,.] [id,id] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [PTR_OP,PTR_OP] [id,id] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [INC_OP,INC_OP] {DEC_OP}
trying to reduce by: postfix_expression -> postfix_expression . [DEC_OP,DEC_OP] {DEC_OP}
trying to reduce by: unary_expression -> postfix_expression . {;}
reduce: unary_expression -> 0 
reduce item: unary_expression -> postfix_expression . {;}
building new item: assignment_expression -> unary_expression . assignment_operator assignment_expression {;}
building new item: assignment_expression -> unary_expression . assignment_operator assignment_expression {,}
building new item: cast_expression -> unary_expression . {;}
building new item: cast_expression -> unary_expression . {?}
building new item: cast_expression -> unary_expression . {*}
building new item: cast_expression -> unary_expression . {/}
building new item: cast_expression -> unary_expression . {%}
building new item: cast_expression -> unary_expression . {+}
building new item: cast_expression -> unary_expression . {-}
building new item: cast_expression -> unary_expression . {LEFT_OP}
building new item: cast_expression -> unary_expression . {RIGHT_OP}
building new item: cast_expression -> unary_expression . {<}
building new item: cast_expression -> unary_expression . {>}
building new item: cast_expression -> unary_expression . {LE_OP}
building new item: cast_expression -> unary_expression . {GE_OP}
building new item: cast_expression -> unary_expression . {EQ_OP}
building new item: cast_expression -> unary_expression . {NE_OP}
building new item: cast_expression -> unary_expression . {&}
building new item: cast_expression -> unary_expression . {^}
building new item: cast_expression -> unary_expression . {|}
building new item: cast_expression -> unary_expression . {AND_OP}
building new item: cast_expression -> unary_expression . {OR_OP}
building new item: cast_expression -> unary_expression . {,}
closure post reduce
LOOP: 177, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [block_item_list,block_item_list]
  [return,return]
  [unary_expression,unary_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    assignment_expression -> unary_expression . assignment_operator assignment_expression {;}
    assignment_expression -> unary_expression . assignment_operator assignment_expression {,}
    cast_expression -> unary_expression . {;}
    cast_expression -> unary_expression . {?}
    cast_expression -> unary_expression . {*}
    cast_expression -> unary_expression . {/}
    cast_expression -> unary_expression . {%}
    cast_expression -> unary_expression . {+}
    cast_expression -> unary_expression . {-}
    cast_expression -> unary_expression . {LEFT_OP}
    cast_expression -> unary_expression . {RIGHT_OP}
    cast_expression -> unary_expression . {<}
    cast_expression -> unary_expression . {>}
    cast_expression -> unary_expression . {LE_OP}
    cast_expression -> unary_expression . {GE_OP}
    cast_expression -> unary_expression . {EQ_OP}
    cast_expression -> unary_expression . {NE_OP}
    cast_expression -> unary_expression . {&}
    cast_expression -> unary_expression . {^}
    cast_expression -> unary_expression . {|}
    cast_expression -> unary_expression . {AND_OP}
    cast_expression -> unary_expression . {OR_OP}
    cast_expression -> unary_expression . {,}
check: reduce cast_expression -> unary_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: assignment_expression -> unary_expression . assignment_operator assignment_expression {;}
trying to reduce by: assignment_expression -> unary_expression . assignment_operator assignment_expression {,}
trying to reduce by: cast_expression -> unary_expression . {;}
reduce: cast_expression -> 0 
reduce item: cast_expression -> unary_expression . {;}
building new item: multiplicative_expression -> cast_expression . {;}
building new item: multiplicative_expression -> cast_expression . {?}
building new item: multiplicative_expression -> cast_expression . {*}
building new item: multiplicative_expression -> cast_expression . {/}
building new item: multiplicative_expression -> cast_expression . {%}
building new item: multiplicative_expression -> cast_expression . {+}
building new item: multiplicative_expression -> cast_expression . {-}
building new item: multiplicative_expression -> cast_expression . {LEFT_OP}
building new item: multiplicative_expression -> cast_expression . {RIGHT_OP}
building new item: multiplicative_expression -> cast_expression . {<}
building new item: multiplicative_expression -> cast_expression . {>}
building new item: multiplicative_expression -> cast_expression . {LE_OP}
building new item: multiplicative_expression -> cast_expression . {GE_OP}
building new item: multiplicative_expression -> cast_expression . {EQ_OP}
building new item: multiplicative_expression -> cast_expression . {NE_OP}
building new item: multiplicative_expression -> cast_expression . {&}
building new item: multiplicative_expression -> cast_expression . {^}
building new item: multiplicative_expression -> cast_expression . {|}
building new item: multiplicative_expression -> cast_expression . {AND_OP}
building new item: multiplicative_expression -> cast_expression . {OR_OP}
building new item: multiplicative_expression -> cast_expression . {,}
closure post reduce
LOOP: 178, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [block_item_list,block_item_list]
  [return,return]
  [cast_expression,cast_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    multiplicative_expression -> cast_expression . {;}
    multiplicative_expression -> cast_expression . {?}
    multiplicative_expression -> cast_expression . {*}
    multiplicative_expression -> cast_expression . {/}
    multiplicative_expression -> cast_expression . {%}
    multiplicative_expression -> cast_expression . {+}
    multiplicative_expression -> cast_expression . {-}
    multiplicative_expression -> cast_expression . {LEFT_OP}
    multiplicative_expression -> cast_expression . {RIGHT_OP}
    multiplicative_expression -> cast_expression . {<}
    multiplicative_expression -> cast_expression . {>}
    multiplicative_expression -> cast_expression . {LE_OP}
    multiplicative_expression -> cast_expression . {GE_OP}
    multiplicative_expression -> cast_expression . {EQ_OP}
    multiplicative_expression -> cast_expression . {NE_OP}
    multiplicative_expression -> cast_expression . {&}
    multiplicative_expression -> cast_expression . {^}
    multiplicative_expression -> cast_expression . {|}
    multiplicative_expression -> cast_expression . {AND_OP}
    multiplicative_expression -> cast_expression . {OR_OP}
    multiplicative_expression -> cast_expression . {,}
check: reduce multiplicative_expression -> cast_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: multiplicative_expression -> cast_expression . {;}
reduce: multiplicative_expression -> 0 
reduce item: multiplicative_expression -> cast_expression . {;}
building new item: additive_expression -> multiplicative_expression . {;}
building new item: additive_expression -> multiplicative_expression . {?}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {;}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {;}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {;}
building new item: additive_expression -> multiplicative_expression . {+}
building new item: additive_expression -> multiplicative_expression . {-}
building new item: additive_expression -> multiplicative_expression . {LEFT_OP}
building new item: additive_expression -> multiplicative_expression . {RIGHT_OP}
building new item: additive_expression -> multiplicative_expression . {<}
building new item: additive_expression -> multiplicative_expression . {>}
building new item: additive_expression -> multiplicative_expression . {LE_OP}
building new item: additive_expression -> multiplicative_expression . {GE_OP}
building new item: additive_expression -> multiplicative_expression . {EQ_OP}
building new item: additive_expression -> multiplicative_expression . {NE_OP}
building new item: additive_expression -> multiplicative_expression . {&}
building new item: additive_expression -> multiplicative_expression . {^}
building new item: additive_expression -> multiplicative_expression . {|}
building new item: additive_expression -> multiplicative_expression . {AND_OP}
building new item: additive_expression -> multiplicative_expression . {OR_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {?}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {?}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {?}
building new item: additive_expression -> multiplicative_expression . {,}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {*}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {*}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {*}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {/}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {/}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {/}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {%}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {%}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {%}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {+}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {+}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {+}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {-}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {-}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {-}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {LEFT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {LEFT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {LEFT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {RIGHT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {RIGHT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {RIGHT_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {<}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {<}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {<}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {>}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {>}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {>}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {LE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {LE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {LE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {GE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {GE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {GE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {EQ_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {EQ_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {EQ_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {NE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {NE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {NE_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {&}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {&}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {&}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {^}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {^}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {^}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {|}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {|}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {|}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {AND_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {AND_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {AND_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {OR_OP}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {OR_OP}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {OR_OP}
building new item: multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {,}
building new item: multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {,}
building new item: multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {,}
closure post reduce
LOOP: 179, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [block_item_list,block_item_list]
  [return,return]
  [multiplicative_expression,multiplicative_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    additive_expression -> multiplicative_expression . {;}
    additive_expression -> multiplicative_expression . {?}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {;}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {;}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {;}
    additive_expression -> multiplicative_expression . {+}
    additive_expression -> multiplicative_expression . {-}
    additive_expression -> multiplicative_expression . {LEFT_OP}
    additive_expression -> multiplicative_expression . {RIGHT_OP}
    additive_expression -> multiplicative_expression . {<}
    additive_expression -> multiplicative_expression . {>}
    additive_expression -> multiplicative_expression . {LE_OP}
    additive_expression -> multiplicative_expression . {GE_OP}
    additive_expression -> multiplicative_expression . {EQ_OP}
    additive_expression -> multiplicative_expression . {NE_OP}
    additive_expression -> multiplicative_expression . {&}
    additive_expression -> multiplicative_expression . {^}
    additive_expression -> multiplicative_expression . {|}
    additive_expression -> multiplicative_expression . {AND_OP}
    additive_expression -> multiplicative_expression . {OR_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {?}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {?}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {?}
    additive_expression -> multiplicative_expression . {,}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {*}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {*}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {*}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {/}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {/}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {/}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {%}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {%}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {%}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {+}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {+}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {+}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {-}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {-}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {-}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {LEFT_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {LEFT_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {LEFT_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {RIGHT_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {RIGHT_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {RIGHT_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {<}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {<}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {<}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {>}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {>}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {>}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {LE_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {LE_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {LE_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {GE_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {GE_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {GE_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {EQ_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {EQ_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {EQ_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {NE_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {NE_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {NE_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {&}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {&}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {&}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {^}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {^}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {^}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {|}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {|}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {|}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {AND_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {AND_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {AND_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {OR_OP}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {OR_OP}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {OR_OP}
    multiplicative_expression -> multiplicative_expression . [*,*] cast_expression {,}
    multiplicative_expression -> multiplicative_expression . [/,/] cast_expression {,}
    multiplicative_expression -> multiplicative_expression . [%,%] cast_expression {,}
check: reduce additive_expression -> multiplicative_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: additive_expression -> multiplicative_expression . {;}
reduce: additive_expression -> 0 
reduce item: additive_expression -> multiplicative_expression . {;}
building new item: shift_expression -> additive_expression . {;}
building new item: shift_expression -> additive_expression . {?}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {;}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {;}
building new item: shift_expression -> additive_expression . {LEFT_OP}
building new item: shift_expression -> additive_expression . {RIGHT_OP}
building new item: shift_expression -> additive_expression . {<}
building new item: shift_expression -> additive_expression . {>}
building new item: shift_expression -> additive_expression . {LE_OP}
building new item: shift_expression -> additive_expression . {GE_OP}
building new item: shift_expression -> additive_expression . {EQ_OP}
building new item: shift_expression -> additive_expression . {NE_OP}
building new item: shift_expression -> additive_expression . {&}
building new item: shift_expression -> additive_expression . {^}
building new item: shift_expression -> additive_expression . {|}
building new item: shift_expression -> additive_expression . {AND_OP}
building new item: shift_expression -> additive_expression . {OR_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {?}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {?}
building new item: shift_expression -> additive_expression . {,}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {+}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {+}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {-}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {-}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {LEFT_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {LEFT_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {RIGHT_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {RIGHT_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {<}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {<}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {>}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {>}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {LE_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {LE_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {GE_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {GE_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {EQ_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {EQ_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {NE_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {NE_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {&}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {&}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {^}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {^}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {|}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {|}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {AND_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {AND_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {OR_OP}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {OR_OP}
building new item: additive_expression -> additive_expression . [+,+] multiplicative_expression {,}
building new item: additive_expression -> additive_expression . [-,-] multiplicative_expression {,}
closure post reduce
LOOP: 180, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [block_item_list,block_item_list]
  [return,return]
  [additive_expression,additive_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    shift_expression -> additive_expression . {;}
    shift_expression -> additive_expression . {?}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {;}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {;}
    shift_expression -> additive_expression . {LEFT_OP}
    shift_expression -> additive_expression . {RIGHT_OP}
    shift_expression -> additive_expression . {<}
    shift_expression -> additive_expression . {>}
    shift_expression -> additive_expression . {LE_OP}
    shift_expression -> additive_expression . {GE_OP}
    shift_expression -> additive_expression . {EQ_OP}
    shift_expression -> additive_expression . {NE_OP}
    shift_expression -> additive_expression . {&}
    shift_expression -> additive_expression . {^}
    shift_expression -> additive_expression . {|}
    shift_expression -> additive_expression . {AND_OP}
    shift_expression -> additive_expression . {OR_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {?}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {?}
    shift_expression -> additive_expression . {,}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {+}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {+}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {-}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {-}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {LEFT_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {LEFT_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {RIGHT_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {RIGHT_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {<}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {<}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {>}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {>}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {LE_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {LE_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {GE_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {GE_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {EQ_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {EQ_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {NE_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {NE_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {&}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {&}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {^}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {^}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {|}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {|}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {AND_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {AND_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {OR_OP}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {OR_OP}
    additive_expression -> additive_expression . [+,+] multiplicative_expression {,}
    additive_expression -> additive_expression . [-,-] multiplicative_expression {,}
check: reduce shift_expression -> additive_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: shift_expression -> additive_expression . {;}
reduce: shift_expression -> 0 
reduce item: shift_expression -> additive_expression . {;}
building new item: relational_expression -> shift_expression . {;}
building new item: relational_expression -> shift_expression . {?}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {;}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {;}
building new item: relational_expression -> shift_expression . {<}
building new item: relational_expression -> shift_expression . {>}
building new item: relational_expression -> shift_expression . {LE_OP}
building new item: relational_expression -> shift_expression . {GE_OP}
building new item: relational_expression -> shift_expression . {EQ_OP}
building new item: relational_expression -> shift_expression . {NE_OP}
building new item: relational_expression -> shift_expression . {&}
building new item: relational_expression -> shift_expression . {^}
building new item: relational_expression -> shift_expression . {|}
building new item: relational_expression -> shift_expression . {AND_OP}
building new item: relational_expression -> shift_expression . {OR_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {?}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {?}
building new item: relational_expression -> shift_expression . {,}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {LEFT_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {LEFT_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {RIGHT_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {RIGHT_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {<}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {<}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {>}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {>}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {LE_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {LE_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {GE_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {GE_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {EQ_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {EQ_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {NE_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {NE_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {&}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {&}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {^}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {^}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {|}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {|}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {AND_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {AND_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {OR_OP}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {OR_OP}
building new item: shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {,}
building new item: shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {,}
closure post reduce
LOOP: 181, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [block_item_list,block_item_list]
  [return,return]
  [shift_expression,shift_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    relational_expression -> shift_expression . {;}
    relational_expression -> shift_expression . {?}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {;}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {;}
    relational_expression -> shift_expression . {<}
    relational_expression -> shift_expression . {>}
    relational_expression -> shift_expression . {LE_OP}
    relational_expression -> shift_expression . {GE_OP}
    relational_expression -> shift_expression . {EQ_OP}
    relational_expression -> shift_expression . {NE_OP}
    relational_expression -> shift_expression . {&}
    relational_expression -> shift_expression . {^}
    relational_expression -> shift_expression . {|}
    relational_expression -> shift_expression . {AND_OP}
    relational_expression -> shift_expression . {OR_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {?}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {?}
    relational_expression -> shift_expression . {,}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {LEFT_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {LEFT_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {RIGHT_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {RIGHT_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {<}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {<}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {>}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {>}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {LE_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {LE_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {GE_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {GE_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {EQ_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {EQ_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {NE_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {NE_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {&}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {&}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {^}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {^}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {|}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {|}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {AND_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {AND_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {OR_OP}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {OR_OP}
    shift_expression -> shift_expression . [LEFT_OP,LEFT_OP] additive_expression {,}
    shift_expression -> shift_expression . [RIGHT_OP,RIGHT_OP] additive_expression {,}
check: reduce relational_expression -> shift_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: relational_expression -> shift_expression . {;}
reduce: relational_expression -> 0 
reduce item: relational_expression -> shift_expression . {;}
building new item: equality_expression -> relational_expression . {;}
building new item: equality_expression -> relational_expression . {?}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {;}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {;}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {;}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {;}
building new item: equality_expression -> relational_expression . {EQ_OP}
building new item: equality_expression -> relational_expression . {NE_OP}
building new item: equality_expression -> relational_expression . {&}
building new item: equality_expression -> relational_expression . {^}
building new item: equality_expression -> relational_expression . {|}
building new item: equality_expression -> relational_expression . {AND_OP}
building new item: equality_expression -> relational_expression . {OR_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {?}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {?}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {?}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {?}
building new item: equality_expression -> relational_expression . {,}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {<}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {<}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {<}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {<}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {>}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {>}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {>}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {>}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {LE_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {LE_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {LE_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {LE_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {GE_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {GE_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {GE_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {GE_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {EQ_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {EQ_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {EQ_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {EQ_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {NE_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {NE_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {NE_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {NE_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {&}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {&}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {&}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {&}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {^}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {^}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {^}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {^}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {|}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {|}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {|}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {|}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {AND_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {AND_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {AND_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {AND_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {OR_OP}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {OR_OP}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {OR_OP}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {OR_OP}
building new item: relational_expression -> relational_expression . [<,<] shift_expression {,}
building new item: relational_expression -> relational_expression . [>,>] shift_expression {,}
building new item: relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {,}
building new item: relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {,}
closure post reduce
LOOP: 182, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [block_item_list,block_item_list]
  [return,return]
  [relational_expression,relational_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    equality_expression -> relational_expression . {;}
    equality_expression -> relational_expression . {?}
    relational_expression -> relational_expression . [<,<] shift_expression {;}
    relational_expression -> relational_expression . [>,>] shift_expression {;}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {;}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {;}
    equality_expression -> relational_expression . {EQ_OP}
    equality_expression -> relational_expression . {NE_OP}
    equality_expression -> relational_expression . {&}
    equality_expression -> relational_expression . {^}
    equality_expression -> relational_expression . {|}
    equality_expression -> relational_expression . {AND_OP}
    equality_expression -> relational_expression . {OR_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {?}
    relational_expression -> relational_expression . [>,>] shift_expression {?}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {?}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {?}
    equality_expression -> relational_expression . {,}
    relational_expression -> relational_expression . [<,<] shift_expression {<}
    relational_expression -> relational_expression . [>,>] shift_expression {<}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {<}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {<}
    relational_expression -> relational_expression . [<,<] shift_expression {>}
    relational_expression -> relational_expression . [>,>] shift_expression {>}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {>}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {>}
    relational_expression -> relational_expression . [<,<] shift_expression {LE_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {LE_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {LE_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {LE_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {GE_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {GE_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {GE_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {GE_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {EQ_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {EQ_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {EQ_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {EQ_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {NE_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {NE_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {NE_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {NE_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {&}
    relational_expression -> relational_expression . [>,>] shift_expression {&}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {&}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {&}
    relational_expression -> relational_expression . [<,<] shift_expression {^}
    relational_expression -> relational_expression . [>,>] shift_expression {^}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {^}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {^}
    relational_expression -> relational_expression . [<,<] shift_expression {|}
    relational_expression -> relational_expression . [>,>] shift_expression {|}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {|}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {|}
    relational_expression -> relational_expression . [<,<] shift_expression {AND_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {AND_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {AND_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {AND_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {OR_OP}
    relational_expression -> relational_expression . [>,>] shift_expression {OR_OP}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {OR_OP}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {OR_OP}
    relational_expression -> relational_expression . [<,<] shift_expression {,}
    relational_expression -> relational_expression . [>,>] shift_expression {,}
    relational_expression -> relational_expression . [LE_OP,LE_OP] shift_expression {,}
    relational_expression -> relational_expression . [GE_OP,GE_OP] shift_expression {,}
check: reduce equality_expression -> relational_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: equality_expression -> relational_expression . {;}
reduce: equality_expression -> 0 
reduce item: equality_expression -> relational_expression . {;}
building new item: and_expression -> equality_expression . {;}
building new item: and_expression -> equality_expression . {?}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {;}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {;}
building new item: and_expression -> equality_expression . {&}
building new item: and_expression -> equality_expression . {^}
building new item: and_expression -> equality_expression . {|}
building new item: and_expression -> equality_expression . {AND_OP}
building new item: and_expression -> equality_expression . {OR_OP}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {?}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {?}
building new item: and_expression -> equality_expression . {,}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {EQ_OP}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {EQ_OP}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {NE_OP}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {NE_OP}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {&}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {&}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {^}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {^}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {|}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {|}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {AND_OP}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {AND_OP}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {OR_OP}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {OR_OP}
building new item: equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {,}
building new item: equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {,}
closure post reduce
LOOP: 183, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [block_item_list,block_item_list]
  [return,return]
  [equality_expression,equality_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    and_expression -> equality_expression . {;}
    and_expression -> equality_expression . {?}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {;}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {;}
    and_expression -> equality_expression . {&}
    and_expression -> equality_expression . {^}
    and_expression -> equality_expression . {|}
    and_expression -> equality_expression . {AND_OP}
    and_expression -> equality_expression . {OR_OP}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {?}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {?}
    and_expression -> equality_expression . {,}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {EQ_OP}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {EQ_OP}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {NE_OP}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {NE_OP}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {&}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {&}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {^}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {^}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {|}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {|}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {AND_OP}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {AND_OP}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {OR_OP}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {OR_OP}
    equality_expression -> equality_expression . [EQ_OP,EQ_OP] relational_expression {,}
    equality_expression -> equality_expression . [NE_OP,NE_OP] relational_expression {,}
check: reduce and_expression -> equality_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: and_expression -> equality_expression . {;}
reduce: and_expression -> 0 
reduce item: and_expression -> equality_expression . {;}
building new item: exclusive_or_expression -> and_expression . {;}
building new item: exclusive_or_expression -> and_expression . {?}
building new item: and_expression -> and_expression . [&,&] equality_expression {;}
building new item: exclusive_or_expression -> and_expression . {^}
building new item: exclusive_or_expression -> and_expression . {|}
building new item: exclusive_or_expression -> and_expression . {AND_OP}
building new item: exclusive_or_expression -> and_expression . {OR_OP}
building new item: and_expression -> and_expression . [&,&] equality_expression {?}
building new item: exclusive_or_expression -> and_expression . {,}
building new item: and_expression -> and_expression . [&,&] equality_expression {&}
building new item: and_expression -> and_expression . [&,&] equality_expression {^}
building new item: and_expression -> and_expression . [&,&] equality_expression {|}
building new item: and_expression -> and_expression . [&,&] equality_expression {AND_OP}
building new item: and_expression -> and_expression . [&,&] equality_expression {OR_OP}
building new item: and_expression -> and_expression . [&,&] equality_expression {,}
closure post reduce
LOOP: 184, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [block_item_list,block_item_list]
  [return,return]
  [and_expression,and_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    exclusive_or_expression -> and_expression . {;}
    exclusive_or_expression -> and_expression . {?}
    and_expression -> and_expression . [&,&] equality_expression {;}
    exclusive_or_expression -> and_expression . {^}
    exclusive_or_expression -> and_expression . {|}
    exclusive_or_expression -> and_expression . {AND_OP}
    exclusive_or_expression -> and_expression . {OR_OP}
    and_expression -> and_expression . [&,&] equality_expression {?}
    exclusive_or_expression -> and_expression . {,}
    and_expression -> and_expression . [&,&] equality_expression {&}
    and_expression -> and_expression . [&,&] equality_expression {^}
    and_expression -> and_expression . [&,&] equality_expression {|}
    and_expression -> and_expression . [&,&] equality_expression {AND_OP}
    and_expression -> and_expression . [&,&] equality_expression {OR_OP}
    and_expression -> and_expression . [&,&] equality_expression {,}
check: reduce exclusive_or_expression -> and_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: exclusive_or_expression -> and_expression . {;}
reduce: exclusive_or_expression -> 0 
reduce item: exclusive_or_expression -> and_expression . {;}
building new item: inclusive_or_expression -> exclusive_or_expression . {;}
building new item: inclusive_or_expression -> exclusive_or_expression . {?}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {;}
building new item: inclusive_or_expression -> exclusive_or_expression . {|}
building new item: inclusive_or_expression -> exclusive_or_expression . {AND_OP}
building new item: inclusive_or_expression -> exclusive_or_expression . {OR_OP}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {?}
building new item: inclusive_or_expression -> exclusive_or_expression . {,}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {^}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {|}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {AND_OP}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {OR_OP}
building new item: exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {,}
closure post reduce
LOOP: 185, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [block_item_list,block_item_list]
  [return,return]
  [exclusive_or_expression,exclusive_or_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    inclusive_or_expression -> exclusive_or_expression . {;}
    inclusive_or_expression -> exclusive_or_expression . {?}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {;}
    inclusive_or_expression -> exclusive_or_expression . {|}
    inclusive_or_expression -> exclusive_or_expression . {AND_OP}
    inclusive_or_expression -> exclusive_or_expression . {OR_OP}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {?}
    inclusive_or_expression -> exclusive_or_expression . {,}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {^}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {|}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {AND_OP}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {OR_OP}
    exclusive_or_expression -> exclusive_or_expression . [^,^] and_expression {,}
check: reduce inclusive_or_expression -> exclusive_or_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: inclusive_or_expression -> exclusive_or_expression . {;}
reduce: inclusive_or_expression -> 0 
reduce item: inclusive_or_expression -> exclusive_or_expression . {;}
building new item: logical_and_expression -> inclusive_or_expression . {;}
building new item: logical_and_expression -> inclusive_or_expression . {?}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {;}
building new item: logical_and_expression -> inclusive_or_expression . {AND_OP}
building new item: logical_and_expression -> inclusive_or_expression . {OR_OP}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {?}
building new item: logical_and_expression -> inclusive_or_expression . {,}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {|}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {AND_OP}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {OR_OP}
building new item: inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {,}
closure post reduce
LOOP: 186, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [block_item_list,block_item_list]
  [return,return]
  [inclusive_or_expression,inclusive_or_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    logical_and_expression -> inclusive_or_expression . {;}
    logical_and_expression -> inclusive_or_expression . {?}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {;}
    logical_and_expression -> inclusive_or_expression . {AND_OP}
    logical_and_expression -> inclusive_or_expression . {OR_OP}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {?}
    logical_and_expression -> inclusive_or_expression . {,}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {|}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {AND_OP}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {OR_OP}
    inclusive_or_expression -> inclusive_or_expression . [|,|] exclusive_or_expression {,}
check: reduce logical_and_expression -> inclusive_or_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: logical_and_expression -> inclusive_or_expression . {;}
reduce: logical_and_expression -> 0 
reduce item: logical_and_expression -> inclusive_or_expression . {;}
building new item: logical_or_expression -> logical_and_expression . {;}
building new item: logical_or_expression -> logical_and_expression . {?}
building new item: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {;}
building new item: logical_or_expression -> logical_and_expression . {OR_OP}
building new item: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {?}
building new item: logical_or_expression -> logical_and_expression . {,}
building new item: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {AND_OP}
building new item: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {OR_OP}
building new item: logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {,}
closure post reduce
LOOP: 187, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [block_item_list,block_item_list]
  [return,return]
  [logical_and_expression,logical_and_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    logical_or_expression -> logical_and_expression . {;}
    logical_or_expression -> logical_and_expression . {?}
    logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {;}
    logical_or_expression -> logical_and_expression . {OR_OP}
    logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {?}
    logical_or_expression -> logical_and_expression . {,}
    logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {AND_OP}
    logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {OR_OP}
    logical_and_expression -> logical_and_expression . [AND_OP,AND_OP] inclusive_or_expression {,}
check: reduce logical_or_expression -> logical_and_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: logical_or_expression -> logical_and_expression . {;}
reduce: logical_or_expression -> 0 
reduce item: logical_or_expression -> logical_and_expression . {;}
building new item: conditional_expression -> logical_or_expression . {;}
building new item: conditional_expression -> logical_or_expression . [?,?] expression [:,:] conditional_expression {;}
building new item: logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {;}
building new item: logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {?}
building new item: conditional_expression -> logical_or_expression . {,}
building new item: conditional_expression -> logical_or_expression . [?,?] expression [:,:] conditional_expression {,}
building new item: logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {OR_OP}
building new item: logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {,}
closure post reduce
LOOP: 188, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [block_item_list,block_item_list]
  [return,return]
  [logical_or_expression,logical_or_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    conditional_expression -> logical_or_expression . {;}
    conditional_expression -> logical_or_expression . [?,?] expression [:,:] conditional_expression {;}
    logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {;}
    logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {?}
    conditional_expression -> logical_or_expression . {,}
    conditional_expression -> logical_or_expression . [?,?] expression [:,:] conditional_expression {,}
    logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {OR_OP}
    logical_or_expression -> logical_or_expression . [OR_OP,OR_OP] logical_and_expression {,}
check: reduce conditional_expression -> logical_or_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: conditional_expression -> logical_or_expression . {;}
reduce: conditional_expression -> 0 
reduce item: conditional_expression -> logical_or_expression . {;}
building new item: assignment_expression -> conditional_expression . {;}
building new item: assignment_expression -> conditional_expression . {,}
closure post reduce
LOOP: 189, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [block_item_list,block_item_list]
  [return,return]
  [conditional_expression,conditional_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    assignment_expression -> conditional_expression . {;}
    assignment_expression -> conditional_expression . {,}
check: reduce assignment_expression -> conditional_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: assignment_expression -> conditional_expression . {;}
reduce: assignment_expression -> 0 
reduce item: assignment_expression -> conditional_expression . {;}
building new item: expression -> assignment_expression . {;}
building new item: expression -> assignment_expression . {,}
closure post reduce
LOOP: 190, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [block_item_list,block_item_list]
  [return,return]
  [assignment_expression,assignment_expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    expression -> assignment_expression . {;}
    expression -> assignment_expression . {,}
check: reduce expression -> assignment_expression . {;}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: expression -> assignment_expression . {;}
reduce: expression -> 0 
reduce item: expression -> assignment_expression . {;}
building new item: jump_statement -> [return,return] expression . [;,;] {}}
building new item: jump_statement -> [return,return] expression . [;,;] {!}
building new item: jump_statement -> [return,return] expression . [;,;] {&}
building new item: jump_statement -> [return,return] expression . [;,;] {(}
building new item: jump_statement -> [return,return] expression . [;,;] {*}
building new item: jump_statement -> [return,return] expression . [;,;] {+}
building new item: jump_statement -> [return,return] expression . [;,;] {-}
building new item: jump_statement -> [return,return] expression . [;,;] {;}
building new item: jump_statement -> [return,return] expression . [;,;] {DEC_OP}
building new item: jump_statement -> [return,return] expression . [;,;] {INC_OP}
building new item: jump_statement -> [return,return] expression . [;,;] {TYPE_NAME}
building new item: jump_statement -> [return,return] expression . [;,;] {auto}
building new item: jump_statement -> [return,return] expression . [;,;] {bool}
building new item: jump_statement -> [return,return] expression . [;,;] {break}
building new item: jump_statement -> [return,return] expression . [;,;] {case}
building new item: jump_statement -> [return,return] expression . [;,;] {char}
building new item: jump_statement -> [return,return] expression . [;,;] {complex}
building new item: jump_statement -> [return,return] expression . [;,;] {const}
building new item: jump_statement -> [return,return] expression . [;,;] {continue}
building new item: jump_statement -> [return,return] expression . [;,;] {default}
building new item: jump_statement -> [return,return] expression . [;,;] {do}
building new item: jump_statement -> [return,return] expression . [;,;] {double}
building new item: jump_statement -> [return,return] expression . [;,;] {enum}
building new item: jump_statement -> [return,return] expression . [;,;] {extern}
building new item: jump_statement -> [return,return] expression . [;,;] {float}
building new item: jump_statement -> [return,return] expression . [;,;] {for}
building new item: jump_statement -> [return,return] expression . [;,;] {goto}
building new item: jump_statement -> [return,return] expression . [;,;] {id}
building new item: jump_statement -> [return,return] expression . [;,;] {if}
building new item: jump_statement -> [return,return] expression . [;,;] {imaginary}
building new item: jump_statement -> [return,return] expression . [;,;] {inline}
building new item: jump_statement -> [return,return] expression . [;,;] {int}
building new item: jump_statement -> [return,return] expression . [;,;] {long}
building new item: jump_statement -> [return,return] expression . [;,;] {num}
building new item: jump_statement -> [return,return] expression . [;,;] {register}
building new item: jump_statement -> [return,return] expression . [;,;] {restrict}
building new item: jump_statement -> [return,return] expression . [;,;] {return}
building new item: jump_statement -> [return,return] expression . [;,;] {short}
building new item: jump_statement -> [return,return] expression . [;,;] {signed}
building new item: jump_statement -> [return,return] expression . [;,;] {sizeof}
building new item: jump_statement -> [return,return] expression . [;,;] {static}
building new item: jump_statement -> [return,return] expression . [;,;] {string}
building new item: jump_statement -> [return,return] expression . [;,;] {struct}
building new item: jump_statement -> [return,return] expression . [;,;] {switch}
building new item: jump_statement -> [return,return] expression . [;,;] {typedef}
building new item: jump_statement -> [return,return] expression . [;,;] {union}
building new item: jump_statement -> [return,return] expression . [;,;] {unsigned}
building new item: jump_statement -> [return,return] expression . [;,;] {void}
building new item: jump_statement -> [return,return] expression . [;,;] {volatile}
building new item: jump_statement -> [return,return] expression . [;,;] {while}
building new item: jump_statement -> [return,return] expression . [;,;] {{}
building new item: jump_statement -> [return,return] expression . [;,;] {~}
building new item: expression -> expression . [,,,] assignment_expression {;}
building new item: expression -> expression . [,,,] assignment_expression {,}
closure post reduce
LOOP: 191, token: ;, token_value: ;
[verbose dump (every loop)]
parser state:
current token: ;, value: ;
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [block_item_list,block_item_list]
  [return,return]
  [expression,expression]
 state stack (kernel items of top state only):
  state 7
   kernel items:
    jump_statement -> [return,return] expression . [;,;] {}}
    jump_statement -> [return,return] expression . [;,;] {!}
    jump_statement -> [return,return] expression . [;,;] {&}
    jump_statement -> [return,return] expression . [;,;] {(}
    jump_statement -> [return,return] expression . [;,;] {*}
    jump_statement -> [return,return] expression . [;,;] {+}
    jump_statement -> [return,return] expression . [;,;] {-}
    jump_statement -> [return,return] expression . [;,;] {;}
    jump_statement -> [return,return] expression . [;,;] {DEC_OP}
    jump_statement -> [return,return] expression . [;,;] {INC_OP}
    jump_statement -> [return,return] expression . [;,;] {TYPE_NAME}
    jump_statement -> [return,return] expression . [;,;] {auto}
    jump_statement -> [return,return] expression . [;,;] {bool}
    jump_statement -> [return,return] expression . [;,;] {break}
    jump_statement -> [return,return] expression . [;,;] {case}
    jump_statement -> [return,return] expression . [;,;] {char}
    jump_statement -> [return,return] expression . [;,;] {complex}
    jump_statement -> [return,return] expression . [;,;] {const}
    jump_statement -> [return,return] expression . [;,;] {continue}
    jump_statement -> [return,return] expression . [;,;] {default}
    jump_statement -> [return,return] expression . [;,;] {do}
    jump_statement -> [return,return] expression . [;,;] {double}
    jump_statement -> [return,return] expression . [;,;] {enum}
    jump_statement -> [return,return] expression . [;,;] {extern}
    jump_statement -> [return,return] expression . [;,;] {float}
    jump_statement -> [return,return] expression . [;,;] {for}
    jump_statement -> [return,return] expression . [;,;] {goto}
    jump_statement -> [return,return] expression . [;,;] {id}
    jump_statement -> [return,return] expression . [;,;] {if}
    jump_statement -> [return,return] expression . [;,;] {imaginary}
    jump_statement -> [return,return] expression . [;,;] {inline}
    jump_statement -> [return,return] expression . [;,;] {int}
    jump_statement -> [return,return] expression . [;,;] {long}
    jump_statement -> [return,return] expression . [;,;] {num}
    jump_statement -> [return,return] expression . [;,;] {register}
    jump_statement -> [return,return] expression . [;,;] {restrict}
    jump_statement -> [return,return] expression . [;,;] {return}
    jump_statement -> [return,return] expression . [;,;] {short}
    jump_statement -> [return,return] expression . [;,;] {signed}
    jump_statement -> [return,return] expression . [;,;] {sizeof}
    jump_statement -> [return,return] expression . [;,;] {static}
    jump_statement -> [return,return] expression . [;,;] {string}
    jump_statement -> [return,return] expression . [;,;] {struct}
    jump_statement -> [return,return] expression . [;,;] {switch}
    jump_statement -> [return,return] expression . [;,;] {typedef}
    jump_statement -> [return,return] expression . [;,;] {union}
    jump_statement -> [return,return] expression . [;,;] {unsigned}
    jump_statement -> [return,return] expression . [;,;] {void}
    jump_statement -> [return,return] expression . [;,;] {volatile}
    jump_statement -> [return,return] expression . [;,;] {while}
    jump_statement -> [return,return] expression . [;,;] {{}
    jump_statement -> [return,return] expression . [;,;] {~}
    expression -> expression . [,,,] assignment_expression {;}
    expression -> expression . [,,,] assignment_expression {,}
check: shift jump_statement -> [return,return] expression . [;,;] {}}
check: shift jump_statement -> [return,return] expression . [;,;] {!}
check: shift jump_statement -> [return,return] expression . [;,;] {&}
check: shift jump_statement -> [return,return] expression . [;,;] {(}
check: shift jump_statement -> [return,return] expression . [;,;] {*}
check: shift jump_statement -> [return,return] expression . [;,;] {+}
check: shift jump_statement -> [return,return] expression . [;,;] {-}
check: shift jump_statement -> [return,return] expression . [;,;] {;}
check: shift jump_statement -> [return,return] expression . [;,;] {DEC_OP}
check: shift jump_statement -> [return,return] expression . [;,;] {INC_OP}
check: shift jump_statement -> [return,return] expression . [;,;] {TYPE_NAME}
check: shift jump_statement -> [return,return] expression . [;,;] {auto}
check: shift jump_statement -> [return,return] expression . [;,;] {bool}
check: shift jump_statement -> [return,return] expression . [;,;] {break}
check: shift jump_statement -> [return,return] expression . [;,;] {case}
check: shift jump_statement -> [return,return] expression . [;,;] {char}
check: shift jump_statement -> [return,return] expression . [;,;] {complex}
check: shift jump_statement -> [return,return] expression . [;,;] {const}
check: shift jump_statement -> [return,return] expression . [;,;] {continue}
check: shift jump_statement -> [return,return] expression . [;,;] {default}
check: shift jump_statement -> [return,return] expression . [;,;] {do}
check: shift jump_statement -> [return,return] expression . [;,;] {double}
check: shift jump_statement -> [return,return] expression . [;,;] {enum}
check: shift jump_statement -> [return,return] expression . [;,;] {extern}
check: shift jump_statement -> [return,return] expression . [;,;] {float}
check: shift jump_statement -> [return,return] expression . [;,;] {for}
check: shift jump_statement -> [return,return] expression . [;,;] {goto}
check: shift jump_statement -> [return,return] expression . [;,;] {id}
check: shift jump_statement -> [return,return] expression . [;,;] {if}
check: shift jump_statement -> [return,return] expression . [;,;] {imaginary}
check: shift jump_statement -> [return,return] expression . [;,;] {inline}
check: shift jump_statement -> [return,return] expression . [;,;] {int}
check: shift jump_statement -> [return,return] expression . [;,;] {long}
check: shift jump_statement -> [return,return] expression . [;,;] {num}
check: shift jump_statement -> [return,return] expression . [;,;] {register}
check: shift jump_statement -> [return,return] expression . [;,;] {restrict}
check: shift jump_statement -> [return,return] expression . [;,;] {return}
check: shift jump_statement -> [return,return] expression . [;,;] {short}
check: shift jump_statement -> [return,return] expression . [;,;] {signed}
check: shift jump_statement -> [return,return] expression . [;,;] {sizeof}
check: shift jump_statement -> [return,return] expression . [;,;] {static}
check: shift jump_statement -> [return,return] expression . [;,;] {string}
check: shift jump_statement -> [return,return] expression . [;,;] {struct}
check: shift jump_statement -> [return,return] expression . [;,;] {switch}
check: shift jump_statement -> [return,return] expression . [;,;] {typedef}
check: shift jump_statement -> [return,return] expression . [;,;] {union}
check: shift jump_statement -> [return,return] expression . [;,;] {unsigned}
check: shift jump_statement -> [return,return] expression . [;,;] {void}
check: shift jump_statement -> [return,return] expression . [;,;] {volatile}
check: shift jump_statement -> [return,return] expression . [;,;] {while}
check: shift jump_statement -> [return,return] expression . [;,;] {{}
check: shift jump_statement -> [return,return] expression . [;,;] {~}
shifts: 52, reduces: 0, accepts: 0
shifting [;,;]
building new item: jump_statement -> [return,return] expression [;,;] . {}}
building new item: jump_statement -> [return,return] expression [;,;] . {!}
building new item: jump_statement -> [return,return] expression [;,;] . {&}
building new item: jump_statement -> [return,return] expression [;,;] . {(}
building new item: jump_statement -> [return,return] expression [;,;] . {*}
building new item: jump_statement -> [return,return] expression [;,;] . {+}
building new item: jump_statement -> [return,return] expression [;,;] . {-}
building new item: jump_statement -> [return,return] expression [;,;] . {;}
building new item: jump_statement -> [return,return] expression [;,;] . {DEC_OP}
building new item: jump_statement -> [return,return] expression [;,;] . {INC_OP}
building new item: jump_statement -> [return,return] expression [;,;] . {TYPE_NAME}
building new item: jump_statement -> [return,return] expression [;,;] . {auto}
building new item: jump_statement -> [return,return] expression [;,;] . {bool}
building new item: jump_statement -> [return,return] expression [;,;] . {break}
building new item: jump_statement -> [return,return] expression [;,;] . {case}
building new item: jump_statement -> [return,return] expression [;,;] . {char}
building new item: jump_statement -> [return,return] expression [;,;] . {complex}
building new item: jump_statement -> [return,return] expression [;,;] . {const}
building new item: jump_statement -> [return,return] expression [;,;] . {continue}
building new item: jump_statement -> [return,return] expression [;,;] . {default}
building new item: jump_statement -> [return,return] expression [;,;] . {do}
building new item: jump_statement -> [return,return] expression [;,;] . {double}
building new item: jump_statement -> [return,return] expression [;,;] . {enum}
building new item: jump_statement -> [return,return] expression [;,;] . {extern}
building new item: jump_statement -> [return,return] expression [;,;] . {float}
building new item: jump_statement -> [return,return] expression [;,;] . {for}
building new item: jump_statement -> [return,return] expression [;,;] . {goto}
building new item: jump_statement -> [return,return] expression [;,;] . {id}
building new item: jump_statement -> [return,return] expression [;,;] . {if}
building new item: jump_statement -> [return,return] expression [;,;] . {imaginary}
building new item: jump_statement -> [return,return] expression [;,;] . {inline}
building new item: jump_statement -> [return,return] expression [;,;] . {int}
building new item: jump_statement -> [return,return] expression [;,;] . {long}
building new item: jump_statement -> [return,return] expression [;,;] . {num}
building new item: jump_statement -> [return,return] expression [;,;] . {register}
building new item: jump_statement -> [return,return] expression [;,;] . {restrict}
building new item: jump_statement -> [return,return] expression [;,;] . {return}
building new item: jump_statement -> [return,return] expression [;,;] . {short}
building new item: jump_statement -> [return,return] expression [;,;] . {signed}
building new item: jump_statement -> [return,return] expression [;,;] . {sizeof}
building new item: jump_statement -> [return,return] expression [;,;] . {static}
building new item: jump_statement -> [return,return] expression [;,;] . {string}
building new item: jump_statement -> [return,return] expression [;,;] . {struct}
building new item: jump_statement -> [return,return] expression [;,;] . {switch}
building new item: jump_statement -> [return,return] expression [;,;] . {typedef}
building new item: jump_statement -> [return,return] expression [;,;] . {union}
building new item: jump_statement -> [return,return] expression [;,;] . {unsigned}
building new item: jump_statement -> [return,return] expression [;,;] . {void}
building new item: jump_statement -> [return,return] expression [;,;] . {volatile}
building new item: jump_statement -> [return,return] expression [;,;] . {while}
building new item: jump_statement -> [return,return] expression [;,;] . {{}
building new item: jump_statement -> [return,return] expression [;,;] . {~}
closure post shift
LOOP: 192, token: }, token_value: }
[verbose dump (every loop)]
parser state:
current token: }, value: }
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [block_item_list,block_item_list]
  [return,return]
  [expression,expression]
  [;,;]
 state stack (kernel items of top state only):
  state 8
   kernel items:
    jump_statement -> [return,return] expression [;,;] . {}}
    jump_statement -> [return,return] expression [;,;] . {!}
    jump_statement -> [return,return] expression [;,;] . {&}
    jump_statement -> [return,return] expression [;,;] . {(}
    jump_statement -> [return,return] expression [;,;] . {*}
    jump_statement -> [return,return] expression [;,;] . {+}
    jump_statement -> [return,return] expression [;,;] . {-}
    jump_statement -> [return,return] expression [;,;] . {;}
    jump_statement -> [return,return] expression [;,;] . {DEC_OP}
    jump_statement -> [return,return] expression [;,;] . {INC_OP}
    jump_statement -> [return,return] expression [;,;] . {TYPE_NAME}
    jump_statement -> [return,return] expression [;,;] . {auto}
    jump_statement -> [return,return] expression [;,;] . {bool}
    jump_statement -> [return,return] expression [;,;] . {break}
    jump_statement -> [return,return] expression [;,;] . {case}
    jump_statement -> [return,return] expression [;,;] . {char}
    jump_statement -> [return,return] expression [;,;] . {complex}
    jump_statement -> [return,return] expression [;,;] . {const}
    jump_statement -> [return,return] expression [;,;] . {continue}
    jump_statement -> [return,return] expression [;,;] . {default}
    jump_statement -> [return,return] expression [;,;] . {do}
    jump_statement -> [return,return] expression [;,;] . {double}
    jump_statement -> [return,return] expression [;,;] . {enum}
    jump_statement -> [return,return] expression [;,;] . {extern}
    jump_statement -> [return,return] expression [;,;] . {float}
    jump_statement -> [return,return] expression [;,;] . {for}
    jump_statement -> [return,return] expression [;,;] . {goto}
    jump_statement -> [return,return] expression [;,;] . {id}
    jump_statement -> [return,return] expression [;,;] . {if}
    jump_statement -> [return,return] expression [;,;] . {imaginary}
    jump_statement -> [return,return] expression [;,;] . {inline}
    jump_statement -> [return,return] expression [;,;] . {int}
    jump_statement -> [return,return] expression [;,;] . {long}
    jump_statement -> [return,return] expression [;,;] . {num}
    jump_statement -> [return,return] expression [;,;] . {register}
    jump_statement -> [return,return] expression [;,;] . {restrict}
    jump_statement -> [return,return] expression [;,;] . {return}
    jump_statement -> [return,return] expression [;,;] . {short}
    jump_statement -> [return,return] expression [;,;] . {signed}
    jump_statement -> [return,return] expression [;,;] . {sizeof}
    jump_statement -> [return,return] expression [;,;] . {static}
    jump_statement -> [return,return] expression [;,;] . {string}
    jump_statement -> [return,return] expression [;,;] . {struct}
    jump_statement -> [return,return] expression [;,;] . {switch}
    jump_statement -> [return,return] expression [;,;] . {typedef}
    jump_statement -> [return,return] expression [;,;] . {union}
    jump_statement -> [return,return] expression [;,;] . {unsigned}
    jump_statement -> [return,return] expression [;,;] . {void}
    jump_statement -> [return,return] expression [;,;] . {volatile}
    jump_statement -> [return,return] expression [;,;] . {while}
    jump_statement -> [return,return] expression [;,;] . {{}
    jump_statement -> [return,return] expression [;,;] . {~}
check: reduce jump_statement -> [return,return] expression [;,;] . {}}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: jump_statement -> [return,return] expression [;,;] . {}}
reduce: jump_statement -> return 0 ; 
reduce item: jump_statement -> [return,return] expression [;,;] . {}}
building new item: statement -> jump_statement . {}}
building new item: statement -> jump_statement . {!}
building new item: statement -> jump_statement . {&}
building new item: statement -> jump_statement . {(}
building new item: statement -> jump_statement . {*}
building new item: statement -> jump_statement . {+}
building new item: statement -> jump_statement . {-}
building new item: statement -> jump_statement . {;}
building new item: statement -> jump_statement . {DEC_OP}
building new item: statement -> jump_statement . {INC_OP}
building new item: statement -> jump_statement . {TYPE_NAME}
building new item: statement -> jump_statement . {auto}
building new item: statement -> jump_statement . {bool}
building new item: statement -> jump_statement . {break}
building new item: statement -> jump_statement . {case}
building new item: statement -> jump_statement . {char}
building new item: statement -> jump_statement . {complex}
building new item: statement -> jump_statement . {const}
building new item: statement -> jump_statement . {continue}
building new item: statement -> jump_statement . {default}
building new item: statement -> jump_statement . {do}
building new item: statement -> jump_statement . {double}
building new item: statement -> jump_statement . {enum}
building new item: statement -> jump_statement . {extern}
building new item: statement -> jump_statement . {float}
building new item: statement -> jump_statement . {for}
building new item: statement -> jump_statement . {goto}
building new item: statement -> jump_statement . {id}
building new item: statement -> jump_statement . {if}
building new item: statement -> jump_statement . {imaginary}
building new item: statement -> jump_statement . {inline}
building new item: statement -> jump_statement . {int}
building new item: statement -> jump_statement . {long}
building new item: statement -> jump_statement . {num}
building new item: statement -> jump_statement . {register}
building new item: statement -> jump_statement . {restrict}
building new item: statement -> jump_statement . {return}
building new item: statement -> jump_statement . {short}
building new item: statement -> jump_statement . {signed}
building new item: statement -> jump_statement . {sizeof}
building new item: statement -> jump_statement . {static}
building new item: statement -> jump_statement . {string}
building new item: statement -> jump_statement . {struct}
building new item: statement -> jump_statement . {switch}
building new item: statement -> jump_statement . {typedef}
building new item: statement -> jump_statement . {union}
building new item: statement -> jump_statement . {unsigned}
building new item: statement -> jump_statement . {void}
building new item: statement -> jump_statement . {volatile}
building new item: statement -> jump_statement . {while}
building new item: statement -> jump_statement . {{}
building new item: statement -> jump_statement . {~}
closure post reduce
LOOP: 193, token: }, token_value: }
[verbose dump (every loop)]
parser state:
current token: }, value: }
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [block_item_list,block_item_list]
  [jump_statement,jump_statement]
 state stack (kernel items of top state only):
  state 6
   kernel items:
    statement -> jump_statement . {}}
    statement -> jump_statement . {!}
    statement -> jump_statement . {&}
    statement -> jump_statement . {(}
    statement -> jump_statement . {*}
    statement -> jump_statement . {+}
    statement -> jump_statement . {-}
    statement -> jump_statement . {;}
    statement -> jump_statement . {DEC_OP}
    statement -> jump_statement . {INC_OP}
    statement -> jump_statement . {TYPE_NAME}
    statement -> jump_statement . {auto}
    statement -> jump_statement . {bool}
    statement -> jump_statement . {break}
    statement -> jump_statement . {case}
    statement -> jump_statement . {char}
    statement -> jump_statement . {complex}
    statement -> jump_statement . {const}
    statement -> jump_statement . {continue}
    statement -> jump_statement . {default}
    statement -> jump_statement . {do}
    statement -> jump_statement . {double}
    statement -> jump_statement . {enum}
    statement -> jump_statement . {extern}
    statement -> jump_statement . {float}
    statement -> jump_statement . {for}
    statement -> jump_statement . {goto}
    statement -> jump_statement . {id}
    statement -> jump_statement . {if}
    statement -> jump_statement . {imaginary}
    statement -> jump_statement . {inline}
    statement -> jump_statement . {int}
    statement -> jump_statement . {long}
    statement -> jump_statement . {num}
    statement -> jump_statement . {register}
    statement -> jump_statement . {restrict}
    statement -> jump_statement . {return}
    statement -> jump_statement . {short}
    statement -> jump_statement . {signed}
    statement -> jump_statement . {sizeof}
    statement -> jump_statement . {static}
    statement -> jump_statement . {string}
    statement -> jump_statement . {struct}
    statement -> jump_statement . {switch}
    statement -> jump_statement . {typedef}
    statement -> jump_statement . {union}
    statement -> jump_statement . {unsigned}
    statement -> jump_statement . {void}
    statement -> jump_statement . {volatile}
    statement -> jump_statement . {while}
    statement -> jump_statement . {{}
    statement -> jump_statement . {~}
check: reduce statement -> jump_statement . {}}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: statement -> jump_statement . {}}
reduce: statement -> return 0 ; 
reduce item: statement -> jump_statement . {}}
building new item: block_item -> statement . {}}
building new item: block_item -> statement . {!}
building new item: block_item -> statement . {&}
building new item: block_item -> statement . {(}
building new item: block_item -> statement . {*}
building new item: block_item -> statement . {+}
building new item: block_item -> statement . {-}
building new item: block_item -> statement . {;}
building new item: block_item -> statement . {DEC_OP}
building new item: block_item -> statement . {INC_OP}
building new item: block_item -> statement . {TYPE_NAME}
building new item: block_item -> statement . {auto}
building new item: block_item -> statement . {bool}
building new item: block_item -> statement . {break}
building new item: block_item -> statement . {case}
building new item: block_item -> statement . {char}
building new item: block_item -> statement . {complex}
building new item: block_item -> statement . {const}
building new item: block_item -> statement . {continue}
building new item: block_item -> statement . {default}
building new item: block_item -> statement . {do}
building new item: block_item -> statement . {double}
building new item: block_item -> statement . {enum}
building new item: block_item -> statement . {extern}
building new item: block_item -> statement . {float}
building new item: block_item -> statement . {for}
building new item: block_item -> statement . {goto}
building new item: block_item -> statement . {id}
building new item: block_item -> statement . {if}
building new item: block_item -> statement . {imaginary}
building new item: block_item -> statement . {inline}
building new item: block_item -> statement . {int}
building new item: block_item -> statement . {long}
building new item: block_item -> statement . {num}
building new item: block_item -> statement . {register}
building new item: block_item -> statement . {restrict}
building new item: block_item -> statement . {return}
building new item: block_item -> statement . {short}
building new item: block_item -> statement . {signed}
building new item: block_item -> statement . {sizeof}
building new item: block_item -> statement . {static}
building new item: block_item -> statement . {string}
building new item: block_item -> statement . {struct}
building new item: block_item -> statement . {switch}
building new item: block_item -> statement . {typedef}
building new item: block_item -> statement . {union}
building new item: block_item -> statement . {unsigned}
building new item: block_item -> statement . {void}
building new item: block_item -> statement . {volatile}
building new item: block_item -> statement . {while}
building new item: block_item -> statement . {{}
building new item: block_item -> statement . {~}
closure post reduce
LOOP: 194, token: }, token_value: }
[verbose dump (every loop)]
parser state:
current token: }, value: }
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [block_item_list,block_item_list]
  [statement,statement]
 state stack (kernel items of top state only):
  state 6
   kernel items:
    block_item -> statement . {}}
    block_item -> statement . {!}
    block_item -> statement . {&}
    block_item -> statement . {(}
    block_item -> statement . {*}
    block_item -> statement . {+}
    block_item -> statement . {-}
    block_item -> statement . {;}
    block_item -> statement . {DEC_OP}
    block_item -> statement . {INC_OP}
    block_item -> statement . {TYPE_NAME}
    block_item -> statement . {auto}
    block_item -> statement . {bool}
    block_item -> statement . {break}
    block_item -> statement . {case}
    block_item -> statement . {char}
    block_item -> statement . {complex}
    block_item -> statement . {const}
    block_item -> statement . {continue}
    block_item -> statement . {default}
    block_item -> statement . {do}
    block_item -> statement . {double}
    block_item -> statement . {enum}
    block_item -> statement . {extern}
    block_item -> statement . {float}
    block_item -> statement . {for}
    block_item -> statement . {goto}
    block_item -> statement . {id}
    block_item -> statement . {if}
    block_item -> statement . {imaginary}
    block_item -> statement . {inline}
    block_item -> statement . {int}
    block_item -> statement . {long}
    block_item -> statement . {num}
    block_item -> statement . {register}
    block_item -> statement . {restrict}
    block_item -> statement . {return}
    block_item -> statement . {short}
    block_item -> statement . {signed}
    block_item -> statement . {sizeof}
    block_item -> statement . {static}
    block_item -> statement . {string}
    block_item -> statement . {struct}
    block_item -> statement . {switch}
    block_item -> statement . {typedef}
    block_item -> statement . {union}
    block_item -> statement . {unsigned}
    block_item -> statement . {void}
    block_item -> statement . {volatile}
    block_item -> statement . {while}
    block_item -> statement . {{}
    block_item -> statement . {~}
check: reduce block_item -> statement . {}}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: block_item -> statement . {}}
reduce: block_item -> return 0 ; 
reduce item: block_item -> statement . {}}
building new item: block_item_list -> block_item_list block_item . {}}
building new item: block_item_list -> block_item_list block_item . {!}
building new item: block_item_list -> block_item_list block_item . {&}
building new item: block_item_list -> block_item_list block_item . {(}
building new item: block_item_list -> block_item_list block_item . {*}
building new item: block_item_list -> block_item_list block_item . {+}
building new item: block_item_list -> block_item_list block_item . {-}
building new item: block_item_list -> block_item_list block_item . {;}
building new item: block_item_list -> block_item_list block_item . {DEC_OP}
building new item: block_item_list -> block_item_list block_item . {INC_OP}
building new item: block_item_list -> block_item_list block_item . {TYPE_NAME}
building new item: block_item_list -> block_item_list block_item . {auto}
building new item: block_item_list -> block_item_list block_item . {bool}
building new item: block_item_list -> block_item_list block_item . {break}
building new item: block_item_list -> block_item_list block_item . {case}
building new item: block_item_list -> block_item_list block_item . {char}
building new item: block_item_list -> block_item_list block_item . {complex}
building new item: block_item_list -> block_item_list block_item . {const}
building new item: block_item_list -> block_item_list block_item . {continue}
building new item: block_item_list -> block_item_list block_item . {default}
building new item: block_item_list -> block_item_list block_item . {do}
building new item: block_item_list -> block_item_list block_item . {double}
building new item: block_item_list -> block_item_list block_item . {enum}
building new item: block_item_list -> block_item_list block_item . {extern}
building new item: block_item_list -> block_item_list block_item . {float}
building new item: block_item_list -> block_item_list block_item . {for}
building new item: block_item_list -> block_item_list block_item . {goto}
building new item: block_item_list -> block_item_list block_item . {id}
building new item: block_item_list -> block_item_list block_item . {if}
building new item: block_item_list -> block_item_list block_item . {imaginary}
building new item: block_item_list -> block_item_list block_item . {inline}
building new item: block_item_list -> block_item_list block_item . {int}
building new item: block_item_list -> block_item_list block_item . {long}
building new item: block_item_list -> block_item_list block_item . {num}
building new item: block_item_list -> block_item_list block_item . {register}
building new item: block_item_list -> block_item_list block_item . {restrict}
building new item: block_item_list -> block_item_list block_item . {return}
building new item: block_item_list -> block_item_list block_item . {short}
building new item: block_item_list -> block_item_list block_item . {signed}
building new item: block_item_list -> block_item_list block_item . {sizeof}
building new item: block_item_list -> block_item_list block_item . {static}
building new item: block_item_list -> block_item_list block_item . {string}
building new item: block_item_list -> block_item_list block_item . {struct}
building new item: block_item_list -> block_item_list block_item . {switch}
building new item: block_item_list -> block_item_list block_item . {typedef}
building new item: block_item_list -> block_item_list block_item . {union}
building new item: block_item_list -> block_item_list block_item . {unsigned}
building new item: block_item_list -> block_item_list block_item . {void}
building new item: block_item_list -> block_item_list block_item . {volatile}
building new item: block_item_list -> block_item_list block_item . {while}
building new item: block_item_list -> block_item_list block_item . {{}
building new item: block_item_list -> block_item_list block_item . {~}
closure post reduce
LOOP: 195, token: }, token_value: }
[verbose dump (every loop)]
parser state:
current token: }, value: }
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [block_item_list,block_item_list]
  [block_item,block_item]
 state stack (kernel items of top state only):
  state 6
   kernel items:
    block_item_list -> block_item_list block_item . {}}
    block_item_list -> block_item_list block_item . {!}
    block_item_list -> block_item_list block_item . {&}
    block_item_list -> block_item_list block_item . {(}
    block_item_list -> block_item_list block_item . {*}
    block_item_list -> block_item_list block_item . {+}
    block_item_list -> block_item_list block_item . {-}
    block_item_list -> block_item_list block_item . {;}
    block_item_list -> block_item_list block_item . {DEC_OP}
    block_item_list -> block_item_list block_item . {INC_OP}
    block_item_list -> block_item_list block_item . {TYPE_NAME}
    block_item_list -> block_item_list block_item . {auto}
    block_item_list -> block_item_list block_item . {bool}
    block_item_list -> block_item_list block_item . {break}
    block_item_list -> block_item_list block_item . {case}
    block_item_list -> block_item_list block_item . {char}
    block_item_list -> block_item_list block_item . {complex}
    block_item_list -> block_item_list block_item . {const}
    block_item_list -> block_item_list block_item . {continue}
    block_item_list -> block_item_list block_item . {default}
    block_item_list -> block_item_list block_item . {do}
    block_item_list -> block_item_list block_item . {double}
    block_item_list -> block_item_list block_item . {enum}
    block_item_list -> block_item_list block_item . {extern}
    block_item_list -> block_item_list block_item . {float}
    block_item_list -> block_item_list block_item . {for}
    block_item_list -> block_item_list block_item . {goto}
    block_item_list -> block_item_list block_item . {id}
    block_item_list -> block_item_list block_item . {if}
    block_item_list -> block_item_list block_item . {imaginary}
    block_item_list -> block_item_list block_item . {inline}
    block_item_list -> block_item_list block_item . {int}
    block_item_list -> block_item_list block_item . {long}
    block_item_list -> block_item_list block_item . {num}
    block_item_list -> block_item_list block_item . {register}
    block_item_list -> block_item_list block_item . {restrict}
    block_item_list -> block_item_list block_item . {return}
    block_item_list -> block_item_list block_item . {short}
    block_item_list -> block_item_list block_item . {signed}
    block_item_list -> block_item_list block_item . {sizeof}
    block_item_list -> block_item_list block_item . {static}
    block_item_list -> block_item_list block_item . {string}
    block_item_list -> block_item_list block_item . {struct}
    block_item_list -> block_item_list block_item . {switch}
    block_item_list -> block_item_list block_item . {typedef}
    block_item_list -> block_item_list block_item . {union}
    block_item_list -> block_item_list block_item . {unsigned}
    block_item_list -> block_item_list block_item . {void}
    block_item_list -> block_item_list block_item . {volatile}
    block_item_list -> block_item_list block_item . {while}
    block_item_list -> block_item_list block_item . {{}
    block_item_list -> block_item_list block_item . {~}
check: reduce block_item_list -> block_item_list block_item . {}}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: block_item_list -> block_item_list block_item . {}}
reduce: block_item_list -> printf ( "%d!\n" , foo ( 2 ) ) ; return 0 ; 
reduce item: block_item_list -> block_item_list block_item . {}}
building new item: compound_statement -> [{,{] block_item_list . [},}] {$}
building new item: compound_statement -> [{,{] block_item_list . [},}] {TYPE_NAME}
building new item: compound_statement -> [{,{] block_item_list . [},}] {auto}
building new item: compound_statement -> [{,{] block_item_list . [},}] {bool}
building new item: compound_statement -> [{,{] block_item_list . [},}] {char}
building new item: compound_statement -> [{,{] block_item_list . [},}] {complex}
building new item: compound_statement -> [{,{] block_item_list . [},}] {const}
building new item: compound_statement -> [{,{] block_item_list . [},}] {double}
building new item: compound_statement -> [{,{] block_item_list . [},}] {enum}
building new item: compound_statement -> [{,{] block_item_list . [},}] {extern}
building new item: compound_statement -> [{,{] block_item_list . [},}] {float}
building new item: compound_statement -> [{,{] block_item_list . [},}] {imaginary}
building new item: compound_statement -> [{,{] block_item_list . [},}] {inline}
building new item: compound_statement -> [{,{] block_item_list . [},}] {int}
building new item: compound_statement -> [{,{] block_item_list . [},}] {long}
building new item: compound_statement -> [{,{] block_item_list . [},}] {register}
building new item: compound_statement -> [{,{] block_item_list . [},}] {restrict}
building new item: compound_statement -> [{,{] block_item_list . [},}] {short}
building new item: compound_statement -> [{,{] block_item_list . [},}] {signed}
building new item: compound_statement -> [{,{] block_item_list . [},}] {static}
building new item: compound_statement -> [{,{] block_item_list . [},}] {struct}
building new item: compound_statement -> [{,{] block_item_list . [},}] {typedef}
building new item: compound_statement -> [{,{] block_item_list . [},}] {union}
building new item: compound_statement -> [{,{] block_item_list . [},}] {unsigned}
building new item: compound_statement -> [{,{] block_item_list . [},}] {void}
building new item: compound_statement -> [{,{] block_item_list . [},}] {volatile}
building new item: block_item_list -> block_item_list . block_item {}}
building new item: block_item_list -> block_item_list . block_item {!}
building new item: block_item_list -> block_item_list . block_item {&}
building new item: block_item_list -> block_item_list . block_item {(}
building new item: block_item_list -> block_item_list . block_item {*}
building new item: block_item_list -> block_item_list . block_item {+}
building new item: block_item_list -> block_item_list . block_item {-}
building new item: block_item_list -> block_item_list . block_item {;}
building new item: block_item_list -> block_item_list . block_item {DEC_OP}
building new item: block_item_list -> block_item_list . block_item {INC_OP}
building new item: block_item_list -> block_item_list . block_item {TYPE_NAME}
building new item: block_item_list -> block_item_list . block_item {auto}
building new item: block_item_list -> block_item_list . block_item {bool}
building new item: block_item_list -> block_item_list . block_item {break}
building new item: block_item_list -> block_item_list . block_item {case}
building new item: block_item_list -> block_item_list . block_item {char}
building new item: block_item_list -> block_item_list . block_item {complex}
building new item: block_item_list -> block_item_list . block_item {const}
building new item: block_item_list -> block_item_list . block_item {continue}
building new item: block_item_list -> block_item_list . block_item {default}
building new item: block_item_list -> block_item_list . block_item {do}
building new item: block_item_list -> block_item_list . block_item {double}
building new item: block_item_list -> block_item_list . block_item {enum}
building new item: block_item_list -> block_item_list . block_item {extern}
building new item: block_item_list -> block_item_list . block_item {float}
building new item: block_item_list -> block_item_list . block_item {for}
building new item: block_item_list -> block_item_list . block_item {goto}
building new item: block_item_list -> block_item_list . block_item {id}
building new item: block_item_list -> block_item_list . block_item {if}
building new item: block_item_list -> block_item_list . block_item {imaginary}
building new item: block_item_list -> block_item_list . block_item {inline}
building new item: block_item_list -> block_item_list . block_item {int}
building new item: block_item_list -> block_item_list . block_item {long}
building new item: block_item_list -> block_item_list . block_item {num}
building new item: block_item_list -> block_item_list . block_item {register}
building new item: block_item_list -> block_item_list . block_item {restrict}
building new item: block_item_list -> block_item_list . block_item {return}
building new item: block_item_list -> block_item_list . block_item {short}
building new item: block_item_list -> block_item_list . block_item {signed}
building new item: block_item_list -> block_item_list . block_item {sizeof}
building new item: block_item_list -> block_item_list . block_item {static}
building new item: block_item_list -> block_item_list . block_item {string}
building new item: block_item_list -> block_item_list . block_item {struct}
building new item: block_item_list -> block_item_list . block_item {switch}
building new item: block_item_list -> block_item_list . block_item {typedef}
building new item: block_item_list -> block_item_list . block_item {union}
building new item: block_item_list -> block_item_list . block_item {unsigned}
building new item: block_item_list -> block_item_list . block_item {void}
building new item: block_item_list -> block_item_list . block_item {volatile}
building new item: block_item_list -> block_item_list . block_item {while}
building new item: block_item_list -> block_item_list . block_item {{}
building new item: block_item_list -> block_item_list . block_item {~}
closure post reduce
LOOP: 196, token: }, token_value: }
[verbose dump (every loop)]
parser state:
current token: }, value: }
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [block_item_list,block_item_list]
 state stack (kernel items of top state only):
  state 5
   kernel items:
    compound_statement -> [{,{] block_item_list . [},}] {$}
    compound_statement -> [{,{] block_item_list . [},}] {TYPE_NAME}
    compound_statement -> [{,{] block_item_list . [},}] {auto}
    compound_statement -> [{,{] block_item_list . [},}] {bool}
    compound_statement -> [{,{] block_item_list . [},}] {char}
    compound_statement -> [{,{] block_item_list . [},}] {complex}
    compound_statement -> [{,{] block_item_list . [},}] {const}
    compound_statement -> [{,{] block_item_list . [},}] {double}
    compound_statement -> [{,{] block_item_list . [},}] {enum}
    compound_statement -> [{,{] block_item_list . [},}] {extern}
    compound_statement -> [{,{] block_item_list . [},}] {float}
    compound_statement -> [{,{] block_item_list . [},}] {imaginary}
    compound_statement -> [{,{] block_item_list . [},}] {inline}
    compound_statement -> [{,{] block_item_list . [},}] {int}
    compound_statement -> [{,{] block_item_list . [},}] {long}
    compound_statement -> [{,{] block_item_list . [},}] {register}
    compound_statement -> [{,{] block_item_list . [},}] {restrict}
    compound_statement -> [{,{] block_item_list . [},}] {short}
    compound_statement -> [{,{] block_item_list . [},}] {signed}
    compound_statement -> [{,{] block_item_list . [},}] {static}
    compound_statement -> [{,{] block_item_list . [},}] {struct}
    compound_statement -> [{,{] block_item_list . [},}] {typedef}
    compound_statement -> [{,{] block_item_list . [},}] {union}
    compound_statement -> [{,{] block_item_list . [},}] {unsigned}
    compound_statement -> [{,{] block_item_list . [},}] {void}
    compound_statement -> [{,{] block_item_list . [},}] {volatile}
    block_item_list -> block_item_list . block_item {}}
    block_item_list -> block_item_list . block_item {!}
    block_item_list -> block_item_list . block_item {&}
    block_item_list -> block_item_list . block_item {(}
    block_item_list -> block_item_list . block_item {*}
    block_item_list -> block_item_list . block_item {+}
    block_item_list -> block_item_list . block_item {-}
    block_item_list -> block_item_list . block_item {;}
    block_item_list -> block_item_list . block_item {DEC_OP}
    block_item_list -> block_item_list . block_item {INC_OP}
    block_item_list -> block_item_list . block_item {TYPE_NAME}
    block_item_list -> block_item_list . block_item {auto}
    block_item_list -> block_item_list . block_item {bool}
    block_item_list -> block_item_list . block_item {break}
    block_item_list -> block_item_list . block_item {case}
    block_item_list -> block_item_list . block_item {char}
    block_item_list -> block_item_list . block_item {complex}
    block_item_list -> block_item_list . block_item {const}
    block_item_list -> block_item_list . block_item {continue}
    block_item_list -> block_item_list . block_item {default}
    block_item_list -> block_item_list . block_item {do}
    block_item_list -> block_item_list . block_item {double}
    block_item_list -> block_item_list . block_item {enum}
    block_item_list -> block_item_list . block_item {extern}
    block_item_list -> block_item_list . block_item {float}
    block_item_list -> block_item_list . block_item {for}
    block_item_list -> block_item_list . block_item {goto}
    block_item_list -> block_item_list . block_item {id}
    block_item_list -> block_item_list . block_item {if}
    block_item_list -> block_item_list . block_item {imaginary}
    block_item_list -> block_item_list . block_item {inline}
    block_item_list -> block_item_list . block_item {int}
    block_item_list -> block_item_list . block_item {long}
    block_item_list -> block_item_list . block_item {num}
    block_item_list -> block_item_list . block_item {register}
    block_item_list -> block_item_list . block_item {restrict}
    block_item_list -> block_item_list . block_item {return}
    block_item_list -> block_item_list . block_item {short}
    block_item_list -> block_item_list . block_item {signed}
    block_item_list -> block_item_list . block_item {sizeof}
    block_item_list -> block_item_list . block_item {static}
    block_item_list -> block_item_list . block_item {string}
    block_item_list -> block_item_list . block_item {struct}
    block_item_list -> block_item_list . block_item {switch}
    block_item_list -> block_item_list . block_item {typedef}
    block_item_list -> block_item_list . block_item {union}
    block_item_list -> block_item_list . block_item {unsigned}
    block_item_list -> block_item_list . block_item {void}
    block_item_list -> block_item_list . block_item {volatile}
    block_item_list -> block_item_list . block_item {while}
    block_item_list -> block_item_list . block_item {{}
    block_item_list -> block_item_list . block_item {~}
check: shift compound_statement -> [{,{] block_item_list . [},}] {$}
check: shift compound_statement -> [{,{] block_item_list . [},}] {TYPE_NAME}
check: shift compound_statement -> [{,{] block_item_list . [},}] {auto}
check: shift compound_statement -> [{,{] block_item_list . [},}] {bool}
check: shift compound_statement -> [{,{] block_item_list . [},}] {char}
check: shift compound_statement -> [{,{] block_item_list . [},}] {complex}
check: shift compound_statement -> [{,{] block_item_list . [},}] {const}
check: shift compound_statement -> [{,{] block_item_list . [},}] {double}
check: shift compound_statement -> [{,{] block_item_list . [},}] {enum}
check: shift compound_statement -> [{,{] block_item_list . [},}] {extern}
check: shift compound_statement -> [{,{] block_item_list . [},}] {float}
check: shift compound_statement -> [{,{] block_item_list . [},}] {imaginary}
check: shift compound_statement -> [{,{] block_item_list . [},}] {inline}
check: shift compound_statement -> [{,{] block_item_list . [},}] {int}
check: shift compound_statement -> [{,{] block_item_list . [},}] {long}
check: shift compound_statement -> [{,{] block_item_list . [},}] {register}
check: shift compound_statement -> [{,{] block_item_list . [},}] {restrict}
check: shift compound_statement -> [{,{] block_item_list . [},}] {short}
check: shift compound_statement -> [{,{] block_item_list . [},}] {signed}
check: shift compound_statement -> [{,{] block_item_list . [},}] {static}
check: shift compound_statement -> [{,{] block_item_list . [},}] {struct}
check: shift compound_statement -> [{,{] block_item_list . [},}] {typedef}
check: shift compound_statement -> [{,{] block_item_list . [},}] {union}
check: shift compound_statement -> [{,{] block_item_list . [},}] {unsigned}
check: shift compound_statement -> [{,{] block_item_list . [},}] {void}
check: shift compound_statement -> [{,{] block_item_list . [},}] {volatile}
shifts: 26, reduces: 0, accepts: 0
shifting [},}]
building new item: compound_statement -> [{,{] block_item_list [},}] . {$}
building new item: compound_statement -> [{,{] block_item_list [},}] . {TYPE_NAME}
building new item: compound_statement -> [{,{] block_item_list [},}] . {auto}
building new item: compound_statement -> [{,{] block_item_list [},}] . {bool}
building new item: compound_statement -> [{,{] block_item_list [},}] . {char}
building new item: compound_statement -> [{,{] block_item_list [},}] . {complex}
building new item: compound_statement -> [{,{] block_item_list [},}] . {const}
building new item: compound_statement -> [{,{] block_item_list [},}] . {double}
building new item: compound_statement -> [{,{] block_item_list [},}] . {enum}
building new item: compound_statement -> [{,{] block_item_list [},}] . {extern}
building new item: compound_statement -> [{,{] block_item_list [},}] . {float}
building new item: compound_statement -> [{,{] block_item_list [},}] . {imaginary}
building new item: compound_statement -> [{,{] block_item_list [},}] . {inline}
building new item: compound_statement -> [{,{] block_item_list [},}] . {int}
building new item: compound_statement -> [{,{] block_item_list [},}] . {long}
building new item: compound_statement -> [{,{] block_item_list [},}] . {register}
building new item: compound_statement -> [{,{] block_item_list [},}] . {restrict}
building new item: compound_statement -> [{,{] block_item_list [},}] . {short}
building new item: compound_statement -> [{,{] block_item_list [},}] . {signed}
building new item: compound_statement -> [{,{] block_item_list [},}] . {static}
building new item: compound_statement -> [{,{] block_item_list [},}] . {struct}
building new item: compound_statement -> [{,{] block_item_list [},}] . {typedef}
building new item: compound_statement -> [{,{] block_item_list [},}] . {union}
building new item: compound_statement -> [{,{] block_item_list [},}] . {unsigned}
building new item: compound_statement -> [{,{] block_item_list [},}] . {void}
building new item: compound_statement -> [{,{] block_item_list [},}] . {volatile}
closure post shift
LOOP: 197, token: $, token_value: $
[verbose dump (every loop)]
parser state:
current token: $, value: $
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [{,{]
  [block_item_list,block_item_list]
  [},}]
 state stack (kernel items of top state only):
  state 6
   kernel items:
    compound_statement -> [{,{] block_item_list [},}] . {$}
    compound_statement -> [{,{] block_item_list [},}] . {TYPE_NAME}
    compound_statement -> [{,{] block_item_list [},}] . {auto}
    compound_statement -> [{,{] block_item_list [},}] . {bool}
    compound_statement -> [{,{] block_item_list [},}] . {char}
    compound_statement -> [{,{] block_item_list [},}] . {complex}
    compound_statement -> [{,{] block_item_list [},}] . {const}
    compound_statement -> [{,{] block_item_list [},}] . {double}
    compound_statement -> [{,{] block_item_list [},}] . {enum}
    compound_statement -> [{,{] block_item_list [},}] . {extern}
    compound_statement -> [{,{] block_item_list [},}] . {float}
    compound_statement -> [{,{] block_item_list [},}] . {imaginary}
    compound_statement -> [{,{] block_item_list [},}] . {inline}
    compound_statement -> [{,{] block_item_list [},}] . {int}
    compound_statement -> [{,{] block_item_list [},}] . {long}
    compound_statement -> [{,{] block_item_list [},}] . {register}
    compound_statement -> [{,{] block_item_list [},}] . {restrict}
    compound_statement -> [{,{] block_item_list [},}] . {short}
    compound_statement -> [{,{] block_item_list [},}] . {signed}
    compound_statement -> [{,{] block_item_list [},}] . {static}
    compound_statement -> [{,{] block_item_list [},}] . {struct}
    compound_statement -> [{,{] block_item_list [},}] . {typedef}
    compound_statement -> [{,{] block_item_list [},}] . {union}
    compound_statement -> [{,{] block_item_list [},}] . {unsigned}
    compound_statement -> [{,{] block_item_list [},}] . {void}
    compound_statement -> [{,{] block_item_list [},}] . {volatile}
check: reduce compound_statement -> [{,{] block_item_list [},}] . {$}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: compound_statement -> [{,{] block_item_list [},}] . {$}
reduce: compound_statement -> { printf ( "%d!\n" , foo ( 2 ) ) ; return 0 ; } 
reduce item: compound_statement -> [{,{] block_item_list [},}] . {$}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {$}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {TYPE_NAME}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {auto}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {bool}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {char}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {complex}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {const}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {double}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {enum}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {extern}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {float}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {imaginary}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {inline}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {int}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {long}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {register}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {restrict}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {short}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {signed}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {static}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {struct}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {typedef}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {union}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {unsigned}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {void}
building new item: function_definition -> declaration_specifiers declarator compound_statement . {volatile}
closure post reduce
LOOP: 198, token: $, token_value: $
[verbose dump (every loop)]
parser state:
current token: $, value: $
 symbol stack:
  [translation_unit,translation_unit]
  [declaration_specifiers,declaration_specifiers]
  [declarator,declarator]
  [compound_statement,compound_statement]
 state stack (kernel items of top state only):
  state 4
   kernel items:
    function_definition -> declaration_specifiers declarator compound_statement . {$}
    function_definition -> declaration_specifiers declarator compound_statement . {TYPE_NAME}
    function_definition -> declaration_specifiers declarator compound_statement . {auto}
    function_definition -> declaration_specifiers declarator compound_statement . {bool}
    function_definition -> declaration_specifiers declarator compound_statement . {char}
    function_definition -> declaration_specifiers declarator compound_statement . {complex}
    function_definition -> declaration_specifiers declarator compound_statement . {const}
    function_definition -> declaration_specifiers declarator compound_statement . {double}
    function_definition -> declaration_specifiers declarator compound_statement . {enum}
    function_definition -> declaration_specifiers declarator compound_statement . {extern}
    function_definition -> declaration_specifiers declarator compound_statement . {float}
    function_definition -> declaration_specifiers declarator compound_statement . {imaginary}
    function_definition -> declaration_specifiers declarator compound_statement . {inline}
    function_definition -> declaration_specifiers declarator compound_statement . {int}
    function_definition -> declaration_specifiers declarator compound_statement . {long}
    function_definition -> declaration_specifiers declarator compound_statement . {register}
    function_definition -> declaration_specifiers declarator compound_statement . {restrict}
    function_definition -> declaration_specifiers declarator compound_statement . {short}
    function_definition -> declaration_specifiers declarator compound_statement . {signed}
    function_definition -> declaration_specifiers declarator compound_statement . {static}
    function_definition -> declaration_specifiers declarator compound_statement . {struct}
    function_definition -> declaration_specifiers declarator compound_statement . {typedef}
    function_definition -> declaration_specifiers declarator compound_statement . {union}
    function_definition -> declaration_specifiers declarator compound_statement . {unsigned}
    function_definition -> declaration_specifiers declarator compound_statement . {void}
    function_definition -> declaration_specifiers declarator compound_statement . {volatile}
check: reduce function_definition -> declaration_specifiers declarator compound_statement . {$}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: function_definition -> declaration_specifiers declarator compound_statement . {$}
reduce: function_definition -> int main ( int argc , char * argv [ ] ) { printf ( "%d!\n" , foo ( 2 ) ) ; return 0 ; } 
reduce item: function_definition -> declaration_specifiers declarator compound_statement . {$}
building new item: external_declaration -> function_definition . {$}
building new item: external_declaration -> function_definition . {TYPE_NAME}
building new item: external_declaration -> function_definition . {auto}
building new item: external_declaration -> function_definition . {bool}
building new item: external_declaration -> function_definition . {char}
building new item: external_declaration -> function_definition . {complex}
building new item: external_declaration -> function_definition . {const}
building new item: external_declaration -> function_definition . {double}
building new item: external_declaration -> function_definition . {enum}
building new item: external_declaration -> function_definition . {extern}
building new item: external_declaration -> function_definition . {float}
building new item: external_declaration -> function_definition . {imaginary}
building new item: external_declaration -> function_definition . {inline}
building new item: external_declaration -> function_definition . {int}
building new item: external_declaration -> function_definition . {long}
building new item: external_declaration -> function_definition . {register}
building new item: external_declaration -> function_definition . {restrict}
building new item: external_declaration -> function_definition . {short}
building new item: external_declaration -> function_definition . {signed}
building new item: external_declaration -> function_definition . {static}
building new item: external_declaration -> function_definition . {struct}
building new item: external_declaration -> function_definition . {typedef}
building new item: external_declaration -> function_definition . {union}
building new item: external_declaration -> function_definition . {unsigned}
building new item: external_declaration -> function_definition . {void}
building new item: external_declaration -> function_definition . {volatile}
closure post reduce
LOOP: 199, token: $, token_value: $
[verbose dump (every loop)]
parser state:
current token: $, value: $
 symbol stack:
  [translation_unit,translation_unit]
  [function_definition,function_definition]
 state stack (kernel items of top state only):
  state 2
   kernel items:
    external_declaration -> function_definition . {$}
    external_declaration -> function_definition . {TYPE_NAME}
    external_declaration -> function_definition . {auto}
    external_declaration -> function_definition . {bool}
    external_declaration -> function_definition . {char}
    external_declaration -> function_definition . {complex}
    external_declaration -> function_definition . {const}
    external_declaration -> function_definition . {double}
    external_declaration -> function_definition . {enum}
    external_declaration -> function_definition . {extern}
    external_declaration -> function_definition . {float}
    external_declaration -> function_definition . {imaginary}
    external_declaration -> function_definition . {inline}
    external_declaration -> function_definition . {int}
    external_declaration -> function_definition . {long}
    external_declaration -> function_definition . {register}
    external_declaration -> function_definition . {restrict}
    external_declaration -> function_definition . {short}
    external_declaration -> function_definition . {signed}
    external_declaration -> function_definition . {static}
    external_declaration -> function_definition . {struct}
    external_declaration -> function_definition . {typedef}
    external_declaration -> function_definition . {union}
    external_declaration -> function_definition . {unsigned}
    external_declaration -> function_definition . {void}
    external_declaration -> function_definition . {volatile}
check: reduce external_declaration -> function_definition . {$}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: external_declaration -> function_definition . {$}
reduce: external_declaration -> int main ( int argc , char * argv [ ] ) { printf ( "%d!\n" , foo ( 2 ) ) ; return 0 ; } 
reduce item: external_declaration -> function_definition . {$}
building new item: translation_unit -> translation_unit external_declaration . {$}
building new item: translation_unit -> translation_unit external_declaration . {TYPE_NAME}
building new item: translation_unit -> translation_unit external_declaration . {auto}
building new item: translation_unit -> translation_unit external_declaration . {bool}
building new item: translation_unit -> translation_unit external_declaration . {char}
building new item: translation_unit -> translation_unit external_declaration . {complex}
building new item: translation_unit -> translation_unit external_declaration . {const}
building new item: translation_unit -> translation_unit external_declaration . {double}
building new item: translation_unit -> translation_unit external_declaration . {enum}
building new item: translation_unit -> translation_unit external_declaration . {extern}
building new item: translation_unit -> translation_unit external_declaration . {float}
building new item: translation_unit -> translation_unit external_declaration . {imaginary}
building new item: translation_unit -> translation_unit external_declaration . {inline}
building new item: translation_unit -> translation_unit external_declaration . {int}
building new item: translation_unit -> translation_unit external_declaration . {long}
building new item: translation_unit -> translation_unit external_declaration . {register}
building new item: translation_unit -> translation_unit external_declaration . {restrict}
building new item: translation_unit -> translation_unit external_declaration . {short}
building new item: translation_unit -> translation_unit external_declaration . {signed}
building new item: translation_unit -> translation_unit external_declaration . {static}
building new item: translation_unit -> translation_unit external_declaration . {struct}
building new item: translation_unit -> translation_unit external_declaration . {typedef}
building new item: translation_unit -> translation_unit external_declaration . {union}
building new item: translation_unit -> translation_unit external_declaration . {unsigned}
building new item: translation_unit -> translation_unit external_declaration . {void}
building new item: translation_unit -> translation_unit external_declaration . {volatile}
closure post reduce
LOOP: 200, token: $, token_value: $
[verbose dump (every loop)]
parser state:
current token: $, value: $
 symbol stack:
  [translation_unit,translation_unit]
  [external_declaration,external_declaration]
 state stack (kernel items of top state only):
  state 2
   kernel items:
    translation_unit -> translation_unit external_declaration . {$}
    translation_unit -> translation_unit external_declaration . {TYPE_NAME}
    translation_unit -> translation_unit external_declaration . {auto}
    translation_unit -> translation_unit external_declaration . {bool}
    translation_unit -> translation_unit external_declaration . {char}
    translation_unit -> translation_unit external_declaration . {complex}
    translation_unit -> translation_unit external_declaration . {const}
    translation_unit -> translation_unit external_declaration . {double}
    translation_unit -> translation_unit external_declaration . {enum}
    translation_unit -> translation_unit external_declaration . {extern}
    translation_unit -> translation_unit external_declaration . {float}
    translation_unit -> translation_unit external_declaration . {imaginary}
    translation_unit -> translation_unit external_declaration . {inline}
    translation_unit -> translation_unit external_declaration . {int}
    translation_unit -> translation_unit external_declaration . {long}
    translation_unit -> translation_unit external_declaration . {register}
    translation_unit -> translation_unit external_declaration . {restrict}
    translation_unit -> translation_unit external_declaration . {short}
    translation_unit -> translation_unit external_declaration . {signed}
    translation_unit -> translation_unit external_declaration . {static}
    translation_unit -> translation_unit external_declaration . {struct}
    translation_unit -> translation_unit external_declaration . {typedef}
    translation_unit -> translation_unit external_declaration . {union}
    translation_unit -> translation_unit external_declaration . {unsigned}
    translation_unit -> translation_unit external_declaration . {void}
    translation_unit -> translation_unit external_declaration . {volatile}
check: reduce translation_unit -> translation_unit external_declaration . {$}
shifts: 0, reduces: 1, accepts: 0
trying to reduce by: translation_unit -> translation_unit external_declaration . {$}
reduce: translation_unit -> int foo ( int x ) { return x * 2 ; } int main ( int argc , char * argv [ ] ) { printf ( "%d!\n" , foo ( 2 ) ) ; return 0 ; } 
reduce item: translation_unit -> translation_unit external_declaration . {$}
building new item: START -> translation_unit . {$}
building new item: translation_unit -> translation_unit . external_declaration {$}
building new item: translation_unit -> translation_unit . external_declaration {TYPE_NAME}
building new item: translation_unit -> translation_unit . external_declaration {auto}
building new item: translation_unit -> translation_unit . external_declaration {bool}
building new item: translation_unit -> translation_unit . external_declaration {char}
building new item: translation_unit -> translation_unit . external_declaration {complex}
building new item: translation_unit -> translation_unit . external_declaration {const}
building new item: translation_unit -> translation_unit . external_declaration {double}
building new item: translation_unit -> translation_unit . external_declaration {enum}
building new item: translation_unit -> translation_unit . external_declaration {extern}
building new item: translation_unit -> translation_unit . external_declaration {float}
building new item: translation_unit -> translation_unit . external_declaration {imaginary}
building new item: translation_unit -> translation_unit . external_declaration {inline}
building new item: translation_unit -> translation_unit . external_declaration {int}
building new item: translation_unit -> translation_unit . external_declaration {long}
building new item: translation_unit -> translation_unit . external_declaration {register}
building new item: translation_unit -> translation_unit . external_declaration {restrict}
building new item: translation_unit -> translation_unit . external_declaration {short}
building new item: translation_unit -> translation_unit . external_declaration {signed}
building new item: translation_unit -> translation_unit . external_declaration {static}
building new item: translation_unit -> translation_unit . external_declaration {struct}
building new item: translation_unit -> translation_unit . external_declaration {typedef}
building new item: translation_unit -> translation_unit . external_declaration {union}
building new item: translation_unit -> translation_unit . external_declaration {unsigned}
building new item: translation_unit -> translation_unit . external_declaration {void}
building new item: translation_unit -> translation_unit . external_declaration {volatile}
closure post reduce
LOOP: 201, token: $, token_value: $
[verbose dump (every loop)]
parser state:
current token: $, value: $
 symbol stack:
  [translation_unit,translation_unit]
 state stack (kernel items of top state only):
  state 1
   kernel items:
    START -> translation_unit . {$}
    translation_unit -> translation_unit . external_declaration {$}
    translation_unit -> translation_unit . external_declaration {TYPE_NAME}
    translation_unit -> translation_unit . external_declaration {auto}
    translation_unit -> translation_unit . external_declaration {bool}
    translation_unit -> translation_unit . external_declaration {char}
    translation_unit -> translation_unit . external_declaration {complex}
    translation_unit -> translation_unit . external_declaration {const}
    translation_unit -> translation_unit . external_declaration {double}
    translation_unit -> translation_unit . external_declaration {enum}
    translation_unit -> translation_unit . external_declaration {extern}
    translation_unit -> translation_unit . external_declaration {float}
    translation_unit -> translation_unit . external_declaration {imaginary}
    translation_unit -> translation_unit . external_declaration {inline}
    translation_unit -> translation_unit . external_declaration {int}
    translation_unit -> translation_unit . external_declaration {long}
    translation_unit -> translation_unit . external_declaration {register}
    translation_unit -> translation_unit . external_declaration {restrict}
    translation_unit -> translation_unit . external_declaration {short}
    translation_unit -> translation_unit . external_declaration {signed}
    translation_unit -> translation_unit . external_declaration {static}
    translation_unit -> translation_unit . external_declaration {struct}
    translation_unit -> translation_unit . external_declaration {typedef}
    translation_unit -> translation_unit . external_declaration {union}
    translation_unit -> translation_unit . external_declaration {unsigned}
    translation_unit -> translation_unit . external_declaration {void}
    translation_unit -> translation_unit . external_declaration {volatile}
check: accept START -> translation_unit . {$}
shifts: 0, reduces: 0, accepts: 1
int foo ( int x ) { return x * 2 ; } int main ( int argc , char * argv [ ] ) { printf ( "%d!\n" , foo ( 2 ) ) ; return 0 ; }  <- translation_unit
 int foo ( int x ) { return x * 2 ; }  <- translation_unit
  int foo ( int x ) { return x * 2 ; }  <- external_declaration
   int foo ( int x ) { return x * 2 ; }  <- function_definition
    int  <- declaration_specifiers
     int  <- type_specifier
      int  <- [int,int]
    foo ( int x )  <- declarator
     foo ( int x )  <- direct_declarator
      foo  <- direct_declarator
       foo  <- [id,foo]
      (  <- [(,(]
      int x  <- parameter_type_list
       int x  <- parameter_list
        int x  <- parameter_declaration
         int  <- declaration_specifiers
          int  <- type_specifier
           int  <- [int,int]
         x  <- declarator
          x  <- direct_declarator
           x  <- [id,x]
      )  <- [),)]
    { return x * 2 ; }  <- compound_statement
     {  <- [{,{]
     return x * 2 ;  <- block_item_list
      return x * 2 ;  <- block_item
       return x * 2 ;  <- statement
        return x * 2 ;  <- jump_statement
         return  <- [return,return]
         x * 2  <- expression
          x * 2  <- assignment_expression
           x * 2  <- conditional_expression
            x * 2  <- logical_or_expression
             x * 2  <- logical_and_expression
              x * 2  <- inclusive_or_expression
               x * 2  <- exclusive_or_expression
                x * 2  <- and_expression
                 x * 2  <- equality_expression
                  x * 2  <- relational_expression
                   x * 2  <- shift_expression
                    x * 2  <- additive_expression
                     x * 2  <- multiplicative_expression
                      x  <- multiplicative_expression
                       x  <- cast_expression
                        x  <- unary_expression
                         x  <- postfix_expression
                          x  <- primary_expression
                           x  <- [id,x]
                      *  <- [*,*]
                      2  <- cast_expression
                       2  <- unary_expression
                        2  <- postfix_expression
                         2  <- primary_expression
                          2  <- [num,2]
         ;  <- [;,;]
     }  <- [},}]
 int main ( int argc , char * argv [ ] ) { printf ( "%d!\n" , foo ( 2 ) ) ; return 0 ; }  <- external_declaration
  int main ( int argc , char * argv [ ] ) { printf ( "%d!\n" , foo ( 2 ) ) ; return 0 ; }  <- function_definition
   int  <- declaration_specifiers
    int  <- type_specifier
     int  <- [int,int]
   main ( int argc , char * argv [ ] )  <- declarator
    main ( int argc , char * argv [ ] )  <- direct_declarator
     main  <- direct_declarator
      main  <- [id,main]
     (  <- [(,(]
     int argc , char * argv [ ]  <- parameter_type_list
      int argc , char * argv [ ]  <- parameter_list
       int argc  <- parameter_list
        int argc  <- parameter_declaration
         int  <- declaration_specifiers
          int  <- type_specifier
           int  <- [int,int]
         argc  <- declarator
          argc  <- direct_declarator
           argc  <- [id,argc]
       ,  <- [,,,]
       char * argv [ ]  <- parameter_declaration
        char  <- declaration_specifiers
         char  <- type_specifier
          char  <- [char,char]
        * argv [ ]  <- declarator
         *  <- pointer
          *  <- [*,*]
         argv [ ]  <- direct_declarator
          argv  <- direct_declarator
           argv  <- [id,argv]
          [  <- [[,[]
          ]  <- [],]]
     )  <- [),)]
   { printf ( "%d!\n" , foo ( 2 ) ) ; return 0 ; }  <- compound_statement
    {  <- [{,{]
    printf ( "%d!\n" , foo ( 2 ) ) ; return 0 ;  <- block_item_list
     printf ( "%d!\n" , foo ( 2 ) ) ;  <- block_item_list
      printf ( "%d!\n" , foo ( 2 ) ) ;  <- block_item
       printf ( "%d!\n" , foo ( 2 ) ) ;  <- statement
        printf ( "%d!\n" , foo ( 2 ) ) ;  <- expression_statement
         printf ( "%d!\n" , foo ( 2 ) )  <- expression
          printf ( "%d!\n" , foo ( 2 ) )  <- assignment_expression
           printf ( "%d!\n" , foo ( 2 ) )  <- conditional_expression
            printf ( "%d!\n" , foo ( 2 ) )  <- logical_or_expression
             printf ( "%d!\n" , foo ( 2 ) )  <- logical_and_expression
              printf ( "%d!\n" , foo ( 2 ) )  <- inclusive_or_expression
               printf ( "%d!\n" , foo ( 2 ) )  <- exclusive_or_expression
                printf ( "%d!\n" , foo ( 2 ) )  <- and_expression
                 printf ( "%d!\n" , foo ( 2 ) )  <- equality_expression
                  printf ( "%d!\n" , foo ( 2 ) )  <- relational_expression
                   printf ( "%d!\n" , foo ( 2 ) )  <- shift_expression
                    printf ( "%d!\n" , foo ( 2 ) )  <- additive_expression
                     printf ( "%d!\n" , foo ( 2 ) )  <- multiplicative_expression
                      printf ( "%d!\n" , foo ( 2 ) )  <- cast_expression
                       printf ( "%d!\n" , foo ( 2 ) )  <- unary_expression
                        printf ( "%d!\n" , foo ( 2 ) )  <- postfix_expression
                         printf  <- postfix_expression
                          printf  <- primary_expression
                           printf  <- [id,printf]
                         (  <- [(,(]
                         "%d!\n" , foo ( 2 )  <- argument_expression_list
                          "%d!\n"  <- argument_expression_list
                           "%d!\n"  <- assignment_expression
                            "%d!\n"  <- conditional_expression
                             "%d!\n"  <- logical_or_expression
                              "%d!\n"  <- logical_and_expression
                               "%d!\n"  <- inclusive_or_expression
                                "%d!\n"  <- exclusive_or_expression
                                 "%d!\n"  <- and_expression
                                  "%d!\n"  <- equality_expression
                                   "%d!\n"  <- relational_expression
                                    "%d!\n"  <- shift_expression
                                     "%d!\n"  <- additive_expression
                                      "%d!\n"  <- multiplicative_expression
                                       "%d!\n"  <- cast_expression
                                        "%d!\n"  <- unary_expression
                                         "%d!\n"  <- postfix_expression
                                          "%d!\n"  <- primary_expression
                                           "%d!\n"  <- [string,"%d!\n"]
                          ,  <- [,,,]
                          foo ( 2 )  <- assignment_expression
                           foo ( 2 )  <- conditional_expression
                            foo ( 2 )  <- logical_or_expression
                             foo ( 2 )  <- logical_and_expression
                              foo ( 2 )  <- inclusive_or_expression
                               foo ( 2 )  <- exclusive_or_expression
                                foo ( 2 )  <- and_expression
                                 foo ( 2 )  <- equality_expression
                                  foo ( 2 )  <- relational_expression
                                   foo ( 2 )  <- shift_expression
                                    foo ( 2 )  <- additive_expression
                                     foo ( 2 )  <- multiplicative_expression
                                      foo ( 2 )  <- cast_expression
                                       foo ( 2 )  <- unary_expression
                                        foo ( 2 )  <- postfix_expression
                                         foo  <- postfix_expression
                                          foo  <- primary_expression
                                           foo  <- [id,foo]
                                         (  <- [(,(]
                                         2  <- argument_expression_list
                                          2  <- assignment_expression
                                           2  <- conditional_expression
                                            2  <- logical_or_expression
                                             2  <- logical_and_expression
                                              2  <- inclusive_or_expression
                                               2  <- exclusive_or_expression
                                                2  <- and_expression
                                                 2  <- equality_expression
                                                  2  <- relational_expression
                                                   2  <- shift_expression
                                                    2  <- additive_expression
                                                     2  <- multiplicative_expression
                                                      2  <- cast_expression
                                                       2  <- unary_expression
                                                        2  <- postfix_expression
                                                         2  <- primary_expression
                                                          2  <- [num,2]
                                         )  <- [),)]
                         )  <- [),)]
         ;  <- [;,;]
     return 0 ;  <- block_item
      return 0 ;  <- statement
       return 0 ;  <- jump_statement
        return  <- [return,return]
        0  <- expression
         0  <- assignment_expression
          0  <- conditional_expression
           0  <- logical_or_expression
            0  <- logical_and_expression
             0  <- inclusive_or_expression
              0  <- exclusive_or_expression
               0  <- and_expression
                0  <- equality_expression
                 0  <- relational_expression
                  0  <- shift_expression
                   0  <- additive_expression
                    0  <- multiplicative_expression
                     0  <- cast_expression
                      0  <- unary_expression
                       0  <- postfix_expression
                        0  <- primary_expression
                         0  <- [num,0]
        ;  <- [;,;]
    }  <- [},}]
parser stats:
build item: 10184
build item optimizations: 0
